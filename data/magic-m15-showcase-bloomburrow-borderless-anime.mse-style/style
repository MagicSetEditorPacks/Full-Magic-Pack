mse version:		2.1.2
game:				magic
short name:			Leaves
full name:			Bloomburrow Showcase Borderless Anime
icon:				card_sample.png
position hint:		095

version:			2024-05-20
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-modules.mse-include
	version:			2024-05-20
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			744
card height:		1039
card dpi:			297

### blanks by GenevensiS
### code by GenevensiS

############################################################## Extra scripts

init script:
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: {"white"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {28.0},
		color: {"white"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	
	rarity_offset_top_1 := { 1 }
	typeline_offset_width_1 := { -2 }
	typeline_offset_left_1 := { 1 }
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {26.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	transform_symbol_disabled_1 := { true }
	nameline_offset_top_1 := { -10 }
	casting_cost_offset_left_1 := { 2 }
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	invert_watermark_1 := { true }
	
	template_prefix :=
	[
		card:				"card/",
		pt:					"pt/",
		nonpt:				"nonpt/",
		crown:				"crown/",
		alias:				"alias/",
		stamp:				"stamp/",
		nonstamp:			"nonstamp/"
		identity:			"/magic-modules.mse-include/indicators/",
		identity2:			"/magic-modules.mse-include/indicators/",
	]
	template_suffix :=
	[
		card:				"card.png",
		pt:					"pt.png",
		nonpt:				"nonpt.png",
		nonptpt:			"nonptpt.png",
		crown:				"crown.png",
		alias:				"alias.png",
		stamp:				"stamp.png",
		nonstamp:			"nonstamp.png"
		identity:			"identity.png",
		identity2:			"identity.png",
	]
	
	color_name_map :=
	[
		w:		"white",
		u:		"blue",
		b:		"black",
		r:		"red",
		g:		"green",
		c:		"colorless",
		a:		"artifact"
		m:		"gold"
	]
	
	normal_template := { template_prefix[type] + input + template_suffix[type] }
	normal_land_template := { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	
	template := {
		if contains(type, match: "identity")
			then normal_template()
		else recolor_image(
			template_suffix[type],
			color: if styling.color_scheme == "all gold" then rgb(255,226,94) else styling[color_name_map[input] + "_color"]
		)
	}
	land_template := {
		if contains(type, match: "identity")
			then normal_land_template()
		else recolor_image(
			template_suffix[type],
			color: if styling.color_scheme == "all gold" then rgb(255,226,94) else styling[color_name_map[input] + "_color"]
		)
	}
	
	
	card_background :=	{ color_background(input: card.card_color, type: "card",		base_hybrid: card_hybrid) }
	card_ptbox :=		{ color_background(input: card.card_color, type: "pt",			base_hybrid: card_hybrid) }
	card_nonptbox :=	{ color_background(input: card.card_color, type: "nonpt",		base_hybrid: card_hybrid) }
	card_nonptptbox :=	{ color_background(input: card.card_color, type: "nonptpt",		base_hybrid: card_hybrid) }
	card_crown :=		{ color_background(input: card.card_color, type: "crown",		base_hybrid: card_hybrid) }
	card_alias :=		{ color_background(input: card.card_color, type: "alias",		base_hybrid: card_hybrid) }
	card_stamp :=		{ color_background(input: card.card_color, type: "stamp",		base_hybrid: card_hybrid) }
	card_nonstamp :=	{ color_background(input: card.card_color, type: "nonstamp",	base_hybrid: card_hybrid) }
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	pt_colors := { if styling.PT_color_scheme == "canon" then pt_colors_canon() else styling.PT_color_scheme }
	pt_colors_canon := { if is_hybrid_cost() then "colored" else "gold" }
	
	has_identity := { styling.color_indicator_dot }
	has_identity_2 := { false }
	
	is_promo := { styling.promo }
	
	is_unsorted := { styling.remove_from_autocount }
	
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	
	chop_top := { split := split_comma(styling.chop_text_box); if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 1500, minimum: -1500) else 0 }
	chop_bot := { split := split_comma(styling.chop_text_box); if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 1500, minimum: -1500) else 0 }
	
	popout_left := { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" then clamp(split.0, maximum: 1500, minimum: -500) else 0 }
	popout_top := { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" then clamp(split.1, maximum: 2000, minimum: -500) else 0 }
	popout_width := { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" then clamp(split.2, maximum: 1500, minimum: 0) else 0 }
	popout_height := { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" then clamp(split.3, maximum: 2000, minimum: 0) else 0 }
	
	foil_mask_removed_sections := {
		output := []
		if is_stamped() then output := output + ["foil_mask_round.png"]
		output
	}@(face:1)

############################################################## Extra style options

styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

styling field:
	type: text
	name: namebox opacity percentage
	description: Set the opacity percentage for the namebox. Opaque is 100, transparent is 0, default is 70.
styling field:
	type: color
	name: namebox color
	description: Use the specified color for the namebox background.
	choice:
		name: black
		color: rgb(0,0,0)
	choice:
		name: white
		color: rgb(255,255,255)
	initial: black

styling field:
	type: text
	name: textbox opacity percentage
	description: Set the opacity percentage for the textbox and typebox. Opaque is 100, transparent is 0, default is 70.
styling field:
	type: color
	name: textbox color
	description: Use the specified color for the textbox background.
	choice:
		name: black
		color: rgb(0,0,0)
	choice:
		name: white
		color: rgb(255,255,255)
	initial: black
styling field:
	type: choice
	name: color scheme
	description: Use the canon mono gold, or customized colors?
	choice: all gold
	choice: customized
styling field:
	type: color
	name: white color
	description: Use the specified color for white cards.
	choice:
		name: colored
		color: rgb(244,243,235)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(244,243,235)
styling field:
	type: color
	name: blue color
	description: Use the specified color for blue cards.
	choice:
		name: colored
		color: rgb(0,110,171)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(0,110,171)
styling field:
	type: color
	name: black color
	description: Use the specified color for black cards.
	choice:
		name: colored
		color: rgb(57,55,49)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(57,55,49)
styling field:
	type: color
	name: red color
	description: Use the specified color for red cards.
	choice:
		name: colored
		color: rgb(225,63,40)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(225,63,40)
styling field:
	type: color
	name: green color
	description: Use the specified color for green cards.
	choice:
		name: colored
		color: rgb(0,110,65)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(0,110,65)
styling field:
	type: color
	name: gold color
	description: Use the specified color for gold cards.
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(255,226,94)
styling field:
	type: color
	name: artifact color
	description: Use the specified color for artifact cards.
	choice:
		name: colored
		color: rgb(163,180,197)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(163,180,197)
styling field:
	type: color
	name: colorless color
	description: Use the specified color for colorless cards.
	choice:
		name: colored
		color: rgb(166,149,134)
	choice:
		name: canon
		color: rgb(255,226,94)
	initial: rgb(166,149,134)

include file: /magic-modules.mse-include/texts/styling_fields

styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards. Canon is "colored" on hybrid cards, "gold" otherwise.
	choice:			canon
	choice:			gold
	choice:			hybrid
	choice:			colored
	choice:			land
	initial:		canon
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/stamps/styling_fields

include file: /magic-modules.mse-include/indicators/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields

include file: /magic-modules.mse-include/separators/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

include file: /magic-modules.mse-include/foils/card_fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		mask:				{ if card.pt != "" then "border_pt_mask.png" else "border_mask.png" }
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			210
		popup style:		in place
		render style:		image
		image:				{ card_background() }
		mask:				card_mask.png
	############################# Image
	image:
		left:				{ 0 }
		top:				{ 0 }
		width:				{ stylesheet.card_width }
		height:				{ if styling.stretch_image_to_whole_card then stylesheet.card_height	else if card.pt != "" then 985					else 952 }
		z index:			100
		mask:				{ if styling.stretch_image_to_whole_card then "image_mask_full.png"		else if card.pt != "" then "image_mask_pt.png"	else "image_mask.png" }
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			1010
	############################# Text box
	text:
		left:				65
		top:				{ 660 + chop_top() + (if is_stamped() then 6 else 0) + body_font_vertical() }
		right:				679
		bottom:				{ 938 - chop_bot() - if is_stamped() then 12 else 0 }
		z index:			900
		line height hard:	{ if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		7
	############################# PT
	pt:
		left:				595
		top:				{ 932 + pt_font_vertical() }
		width:				89
		height:				45
		z index:			900
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red

############################################################## Extra card fields

extra card field:
	type:				choice
	name:				crown
	editable:			false
	save value:			false
	show statistics:	false
	choice:				crown
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				pt box
extra card field:
	type:				choice
	name:				non pt box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				non pt box
extra card field:
	type:				choice
	name:				card stamp rim
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card stamp rim
extra card field:
	type:				color
	name:				card stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				name box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				name box
extra card field:
	type:				choice
	name:				text box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				text box

extra card style:
	non pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			840
		render style:		image
		image:				{ if card.pt != "" then card_nonptptbox() else card_nonptbox() }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			840
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				color := pt_colors()
				if color == "gold" and count > 1 then template("m", type: "pt")
				else if color == "land" and count > 1 then template("c", type: "pt")
				else if color == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt"), light: template(pure.1, type: "pt"))
				else card_ptbox()
	crown:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			800
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	card stamp rim:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			850
		visible:			{ is_stamped() }
		render style:		image
		image:				{ card_stamp() }
	card stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			510
		visible:			{ is_stamped() }
		mask:				border_stamp_mask.png
	name box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			150
		render style:		image
		image:				{ set_alpha(recolor_image("namebox.png", color: styling.namebox_color), alpha: get_alpha_percentage(styling.namebox_opacity_percentage, default: 70)) }
	text box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			150
		render style:		image
		image:				{ set_alpha(recolor_image(if card.pt != "" then "textbox_pt.png" else "textbox.png", color: styling.textbox_color), alpha: get_alpha_percentage(styling.textbox_opacity_percentage, default: 70)) }
