mse version: 2.0.0
game: magic
short name: Greater Morphling Style
full name: Greater Morphling
icon: card-sample.png
installer group: magic/new style/uncard effects/greater morphling
position hint: 907

version: 2014-02-22
depends on:
	package: magic.mse-game
	version: 2011-09-10
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2011-04-10
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2011-04-10
depends on:
	package: magic-future-common.mse-include
	version: 2008-05-21
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22

card width: 375
card height: 523
card dpi: 150
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.grey_hybrid_name }
	
	#Should multicolor lands with basic land types have a colored name?
	mask_multi_land_with_color := { styling.colored_multicolor_land_name }
	
	# Which artifact template should be used?  Which multicolor template should be used?
	alternate_template := {
		if input == "a" then (
			if       styling.artifact_style == "light" then "oa"
			else if  styling.artifact_style == "brown" then "ba"
			else                                            "a"
		) else if input == "m" then (
			if styling.saturated_multicolor then "m"
			else "om"
		) else	input
	}
	template_prefix := [card: "", pt: "", identity: "/magic-identity-new.mse-include/"]
	template_suffix := [card: "card.jpg", pt: "pt.png", identity: "identity.png"]
	template      := { template_prefix[type] + alternate_template() + template_suffix[type] }
	land_template := { template_prefix[type] + (if input == "a" then "c" else alternate_template()) + "l" + template_suffix[type] }
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	
	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	
	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }
	
	font_color := { if font_white() then "white" else "black" }
	
	# Filter to commas, so they can be counted to see if field is complete
	comma_count := filter_text@(match:",")
	
############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)

############################################################## Extra style options
styling field:
	type: choice
	name: artifact style
	description: Choose the style of artifacts: light = before Fifth Dawn, dark = used since Fifth Dawn, brown = old rust style.
	initial: dark
	choice: light
	choice: dark
	choice: brown
styling field:
	type: boolean
	name: saturated multicolor
	description: Should multicolor cards be more saturated? This is done on real cards.
	initial: yes
styling field:
	type: boolean
	name: grey hybrid name
	description: Use a grey background for the name and type line on hybrid cards. This is done on real cards.
styling field:
	type: boolean
	name: colored multicolor land name
	description: Use a colored background for the name and type on multicolor land cards with a basic land type. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: choice
	name: center text
	description: When to center text (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling field:
	type: choice
	name: image size
	description: Should the art extend into a transparent textbox?
	initial: standard
	choice: standard
	choice: extended
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling style:
	artifact style:
		render style: both
		choice images:
			light: oacard.jpg
			dark:  acard.jpg
			brown: bacard.jpg
	saturated multicolor:
		choice images:
			yes: mcard.jpg
			no:  omcard.jpg
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
	image size:
		render style: both
		choice images:
			standard: /magic.mse-game/icons/small-image.png
			extended: /magic.mse-game/icons/large-image.png
############################################################## Card fields
card style:
	############################# Background stuff
	border color:
		left: 0
		top: 0
		width: 375
		height:	523
		radius: 24
		left width: 18
		right width: 18
		top width: 18
		bottom width: 18
		z index: -1
	card color:
		left:0
		top: 0
		width: 375
		height: 523
		z index: -2
		render style: image
		popup style: in place
		image: { card_background() }
	############################# Name line
	name:
		left: { if card.card_symbol=="none" then 34 else 53 }
		top: 31.5
		right: { 341 - card_style.casting_cost.content_width }
		height: 23
		alignment: bottom shrink-overflow
		padding bottom: 0
		z index: 1
		font:
			name: Matrix
			size: 17
			weight: bold
			color: black
	casting cost:
		right: 343
		top: 31.5
		width: { max(30, card_style.casting_cost.content_width) + 5 }
		height: 23
		alignment: middle right
		font:
			name: MPlantin
			size: 15
		symbol font:
			name: magic-mana-large
			size: 15
			alignment: middle right
		always symbol: true
		z index: 2
		padding top: 0
	card symbol:
		left: {if card.card_symbol=="none" then 20 else 34.5}
		top: 33
		height: 20
		width: 14
		render style: image
		choice images:
			tombstone: tombstone.png
	############################# Image
	image:
		left: 33
		top: 63
		width: 309
		height:	{ if styling.image_size == "extended" then 397.5 else 84.5 }
		z index: 1
		mask:
			script: if styling.image_size == "extended" then "imagemask_extended.png" else nil
		default: {default_image(card.card_color)}
	image 2:
		left: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).0 else "0"}
		top: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).1 else "0"}
		width: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).2 else "0"}
		height: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).3 else "0"}
		z index: 3
	############################# Card type
	indicator:
		left: 36.5
		top: 157
		width: 18
		height: 18
		z index: 2
		render style: image
		visible: { has_identity() }
		image: { card_identity() }
	type:
		left: { if has_identity() then 56.5 else 36.5 }
		top: 154
		width: { (if has_identity() then 306.5 else 286) - max(26.5,card_style.rarity.content_width) }
		height: 22
		alignment: top left shrink-overflow
		z index: 2
		padding top: 2
		font:
			name: Matrix
			size: 15
			color: black
			separator color: red
	rarity:
		right: 342
		top: 153
		width: 44
		height: 24
		z index: 1
		render style: image
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:   script: symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:       script: symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:       script: symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:    script: symbol_variation(symbol: set.symbol, variation: "special")
	############################# Text box
	text:
		left: 32
		top: 184.5
		width: 309
		height: 285
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: 14
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 14
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		z index: 2
		padding left: 6
		padding right: 4
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
		line height hard max: 1.3
		line height line max: 1.6
	watermark:
		left: 117
		top: 249
		width: 138
		height: 148.5
		z index: 1
		render style: image
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks
	############################# PT
	pt:
		z index: 4
		left: 286
		top: 465.5
		width: 56
		height:	30.5
		alignment: center middle shrink-overflow
		font:
			name: ModMatrix
			size: 17
			weight: bold
			color: black
			separator color: red
	############################# Card sorting / numbering
	############################# Copyright stuff
	illustrator:
		left: 60
		top: 477.5
		width: 217
		height: 16
		z index: 1
		alignment: left shrink-overflow
		font:
			name: Matrix
			size: 10
			weight: bold
			color: { font_color(card.card_color) }
	copyright line:
		left: 30
		top: 491.5
		width: 247
		height: 12
		z index: 1
		alignment: left shrink-overflow
		font:
			name: MPlantin
			size: 6.5
			color: { font_color(card.card_color) }
############################################################## Extra card fields
extra card field:
	type: choice
	name: pt box
	script: card.card_color
	editable: false
extra card field:
	type: choice
	name: paintbrush
	script: font_color(card.card_color)
	editable: false
	save value: false
extra card field:
	type: choice
	name: foil layer
	choice: foil
	save value: false
	editable: false
extra card style:
	pt box:
		left: 273.5
		top: 462
		width: 77.5
		height:	41
		z index: 1
		visible: { card.pt != "" }
		render style: image
		image: { card_ptbox() }
	paintbrush:
		left: 28
		top: 479
		width: 32
		height: 13
		z index: 10
		render style: image
		choice images:
			black: /magic-future-common.mse-include/paintbrush_black.png
			white: /magic-future-common.mse-include/paintbrush_white.png
	foil layer:
		left: 0
		top : 0
		width: 375
		height: 523
		z index: 3
		render style: image
		image: {if styling.overlay == "" then nil else styling.overlay + "/overlay.png"}
