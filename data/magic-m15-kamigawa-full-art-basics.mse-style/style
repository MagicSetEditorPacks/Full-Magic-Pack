mse version:		2.1.2
game:				magic
short name:			NEO Basics
full name:			Kamigawa Full Art
icon:				card_sample.png
position hint:		099

version:			2023-08-15
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-default-image.mse-include
	version:			2007-09-23
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			375
card height:		523
card dpi:			150


### blanks by GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	template_prefix :=
	[
		card:		"card/"
	]
	template_suffix :=
	[
		card:			"card.png"
	]
	template :=
	{
		template_prefix[type] + input + template_suffix[type]
	}
	land_template :=
	{
		template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type]
	}
	
	card_stampholofoil :=
	{
		if not is_stamped() then "" else
		"holofoil/" +
		card.card_stamp +
		(if is_foil_stamped() then "" else "_void") +
		".png"
	}
	card_background :=
	{
		first_color := "card/" + type_to_letter_map[styling.land_type] + "card.png"
		if styling.second_land_type == "none" then first_color else (
		second_color := "card/" + type_to_letter_map[styling.second_land_type] + "card.png"
		linear_blend(
			image1: first_color,
			image2: second_color,
			x1: 0.3,  y1: 0,
			x2: 0.7,  y2: 0
		))
	}
	card_color :=
	{
		if styling.second_land_type == "none" then substring(type_to_color_map[styling.land_type] + ", land", begin: 2)
		else substring(type_to_color_map[styling.land_type] + type_to_color_map[styling.second_land_type] + ", land, horizontal", begin: 2)
	}
	card_color_filter :=
	{
		if styling.second_land_type == "none" then substring(type_to_color_map[styling.land_type] + ", land", begin: 2)
		else substring(type_to_color_map[styling.land_type] + type_to_color_map[styling.second_land_type] + ", land, horizontal", begin: 2)
	}
	
	type_to_letter_map :=
	[
		plains:		"w",
		island:		"u",
		swamp:		"b",
		mountain:	"r",
		forest:		"g",
		wastes:		"c",
		none:		"none"
	]
	type_to_color_map :=
	[
		plains:		", white",
		island:		", blue",
		swamp:		", black",
		mountain:	", red",
		forest:		", green",
		wastes:		"",
		none:		", none"
	]
	
	mana_t := { "new" }
	guild_mana := { false }
	ancestral_mana := { false }
	
	has_identity := { false }
	has_identity_2 := { false }
	
	is_promo := { styling.promo }
	
	is_unsorted := { styling.remove_from_autocount }

	is_stamped :=		{ card.card_stamp != "none" and contains(styling.holofoil_stamps, match: "yes") }
	is_foil_stamped :=	{ styling.holofoil_stamps == "yes" }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" then clamp(split.0, minimum: -500,	maximum: 800) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" then clamp(split.1, minimum: -500,	maximum: 1100) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" then clamp(split.2, minimum: 0,		maximum: 1500) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" then clamp(split.3, minimum: 0,		maximum: 2000) else 0 }
	
	split_comma := split_text@(match: " *, *")
	
	clamp :=
	{
		if input < minimum then minimum
		else if input > maximum then maximum
		else input
	}
	
	name_mask :=
	{
		"mask_name" +
		(if styling.second_land_type != "none" then "_dual" else "") +
		(if styling.second_land_type == "plains" or styling.second_land_type == "wastes" or styling.land_type == "plains" or styling.land_type == "wastes" then "_plains" else "") +
		".png"
	}
	
	plains_symbol_offset := { if styling.second_land_type == "plains" or styling.second_land_type == "wastes" or styling.land_type == "plains" or styling.land_type == "wastes" then 75 else 0 }
	symbol_offset := { if styling.second_land_type != "none" then 90 else 0 }
	two_two :=
	{
		(styling.second_land_type == "plains" or styling.second_land_type == "wastes") and (styling.land_type == "plains" or styling.land_type == "wastes")
	}


############################################################## Set info fields

set info style:
	symbol:
		variation:
			name:				invertedcommon
			border radius:		0.10
			fill type:			solid
			fill color:			rgb(255,255,255)
			border color:		rgb(0,0,0)


############################################################## Extra style options

styling field:
	type:			choice
	name:			land type
	description:	What type is this card?
	choice:			plains
	choice:			island
	choice:			swamp
	choice:			mountain
	choice:			forest
	choice:			wastes
	initial:		plains
styling field:
	type:			choice
	name:			second land type
	description:	What type is this card?
	choice:
		name:			none
		line below:		true
	choice:			plains
	choice:			island
	choice:			swamp
	choice:			mountain
	choice:			forest
	choice:			wastes
	initial:		none
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field. Formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part? Use this to help make popout effects.
	initial:		no
styling field:
	type:			boolean
	name:			hide name text
	description:	Make the nameline visible to edit it, then turn it back invisible.
	initial:		yes
styling field:
	type:			boolean
	name:			hide type text
	description:	Make the typeline visible to edit it, then turn it back invisible.
	initial:		yes
styling field:
	type:			color
	name:			text color
	description:	Color used for the text.
	choice:
		name:			black
		color:			rgb(0,0,0)
	choice:
		name:			white
		color:			rgb(255,255,255)
	initial:		white
styling field:
	type:			color
	name:			textbox color
	description:	Color used for the textbox background.
	choice:
		name:			use card color
		color:			rgb(255,255,254)
	initial:		rgb(255,255,254)
styling field:
	type:			choice
	name:			border
	description:	Use a border?
	choice:			yes
	choice:			only copyright
	choice:			no
	initial:		yes
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps?
	choice:			yes
	choice:			yes, not foil
	choice:			no
	initial:		no
styling field:
	type:			choice
	name:			corners
	description:	What should the corners of the card look like?
	choice:			rounded and antialiased
	choice:			rounded
	choice:			none
	initial:		rounded and antialiased
styling field:
	type:			package choice
	name:			overlay
	description:	Apply an overlay, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Remove the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks?
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color used for copyright, illustrator, and set code text.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true


############################################################## Card fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			100
		visible:			{ styling.border != "no" }
		mask:				{ if styling.border == "yes" then "mask_background_border.png" else "mask_background_borderless_border.png" }
	############################# Name line
	name:
		left:				30
		top:				20
		right:				345
		height:				26
		z index:			1000
		alignment:			middle left shrink-overflow
		font:
			name:				Beleren Bold
			size:				15
			color:				{ if styling.hide_name_text then rgba(0,0,0,0) else styling.text_color }
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0							else if styling.border != "yes" then 0						else 15 }
		top:				{ if styling.stretch_art_to_whole_card then 0							else if styling.border != "yes" then 0						else 15 }
		width:				{ if styling.stretch_art_to_whole_card then stylesheet.card_width		else if styling.border != "yes" then stylesheet.card_width	else 345 }
		bottom:				{ if styling.stretch_art_to_whole_card then stylesheet.card_height + 1	else if styling.border != "no"	then 481					else stylesheet.card_height + 1 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			2000
	############################# Card type
	type:
		left:				30
		top:				433
		right:				345
		height:				27
		z index:			1000
		alignment:			middle left shrink-overflow
		font:
			name:				Beleren Bold
			size:				14
			color:				{ if styling.hide_type_text then rgba(0,0,0,0) else styling.text_color }
			separator color:	red
	card stamp:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			720
		render style:		image
		popup style:		in place
		image:				{ card_stampholofoil() }
		mask:				mask_stamp_holofoil.png
	set code:
		left:				24
		top:				499
		width:				40
		height:				10
		z index:			1000
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 38 else 42 + card_style.set_code.content_width }
		top:				498.5
		width:				200
		height:				10
		z index:			1000
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				7.25
			color:				{ styling.copyright_text_color }
	copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 0 else 140 }
		height:				10
		z index:			1000
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields

extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				color
	name:				card stamp background border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card color
	editable:			false
	save value:			false
	show statistics:	false
	script:
		styling.land_type
		styling.second_land_type
		card_color()
extra card field:
	type:				choice
	name:				first type
	editable:			false
	save value:			false
	show statistics:	false
	choice:				first type
extra card field:
	type:				choice
	name:				second type
	editable:			false
	save value:			false
	show statistics:	false
	choice:				second type
extra card field:
	type:				choice
	name:				type separator
	editable:			false
	save value:			false
	show statistics:	false
	choice:				type separator
extra card field:
	type:				choice
	name:				first symbol
	editable:			false
	save value:			false
	show statistics:	false
	choice:				first symbol
extra card field:
	type:				choice
	name:				second symbol
	editable:			false
	save value:			false
	show statistics:	false
	choice:				second symbol
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				color
	name:				corners
	script:				rgb(255, 255, 255)
	editable:			false
	save value:			false
	show statistics:	false

extra card style:
	card code:
		left:				24
		top:				489
		width:				120
		height:				10
		z index:			1000
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 140 else 0 }
		height:				10
		z index:			1000
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 25 else 29 + card_style.set_code.content_width }
		top:				501
		width:				12
		height:				7
		z index:			1000
		render style:		image
		image:				{ recolor_image("icon_art.png", color: styling.copyright_text_color) }
	card stamp background border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			110
		visible:			{ styling.border != "no" and is_stamped() }
		mask:				{ if card.card_stamp == "universes beyond" then "mask_stamp_background_border_triangle.png" else "mask_stamp_background_border.png" }
	card color:
		left:				29
		top:				27
		width:				98
		height:				431
		z index:			200
		popup style:		in place
		render style:		image
		image:				{ if styling.textbox_color == rgb(255,255,254) then card_background() else recolor_image("name_color.png", color: styling.textbox_color) }
		mask:				{ name_mask() }
	first type:
		left:				{ if two_two() then 46 else 38 }
		top:				47
		width:				{ if two_two() then 65 else 81 }
		height:				{ if two_two() then 114 else 149 }
		z index:			3000
		render style:		image
		image:				{ recolor_image("type_" + styling.land_type + ".png", color: styling.text_color) }
	second type:
		left:				{ if two_two() then 46 else 38 }
		top:				{ 137 + (if styling.land_type == "plains" or styling.land_type == "wastes" then 70 else 0) - (if two_two() then 35 else 0) }
		width:				{ if two_two() then 65 else 81 }
		height:				{ if two_two() then 114 else 149 }
		z index:			3000
		visible:			{ styling.second_land_type != "none" }
		render style:		image
		image:				{  recolor_image("type_" + styling.second_land_type + ".png", color: styling.text_color) }
	type separator:
		left:				38
		top:				{ 121 + (if styling.land_type == "plains" or styling.land_type == "wastes" then 68 else 0) - (if two_two() then 34 else 0) }
		width:				80
		height:				15
		z index:			3000
		visible:			{ styling.second_land_type != "none" }
		render style:		image
		image:				{  recolor_image("type_sep.png", color: styling.text_color) }
	first symbol:
		left:				38
		top:				{ 127 + plains_symbol_offset() + symbol_offset() }
		width:				80
		height:				82
		z index:			3000
		render style:		image
		image:				{  recolor_image("symbol_" + styling.land_type + ".png", color: styling.text_color) }
	second symbol:
		left:				38
		top:				{ 202 + plains_symbol_offset() + symbol_offset() }
		width:				80
		height:				82
		z index:			3000
		visible:			{ styling.second_land_type != "none" }
		render style:		image
		image:				{  recolor_image("symbol_" + styling.second_land_type + ".png", color: styling.text_color) }
	foil layer:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
	corners:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			4000
		visible:			{ styling.corners != "none" }
		mask:				{ if styling.corners == "rounded and antialiased" then "mask_rounded_antialiased_corners.png" else "mask_rounded_corners.png" }
