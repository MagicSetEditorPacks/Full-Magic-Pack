mse version: 2.1.2
game: magic
short name: Sokrates
full name: by DoX
icon: card-sample.png
position hint: 083

version: 2024-08-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-modules.mse-include
	version: 2024-10-01
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23

card width: 750
card height: 1046
card dpi: 300

### blanks by DoX
### code by GenevensiS

############################################################## Extra scripts
init script:
	nameline_offset_left_1 := { -8 }
	nameline_offset_top_1 := { 62 }
	casting_cost_offset_left_1 := { 16 }
	casting_cost_offset_top_1 := { 3 }
	transform_symbol_offset_left_1 := { 20 }
	transform_symbol_offset_top_1 := { 14 }
	transform_symbol_offset_width_1 := { -28 }
	transform_symbol_offset_height_1 := { -28 }
	name_transform_symbol_offset_left_1 := { -18 }
	card_symbol_offset_left_1 := { -6 }
	card_symbol_offset_top_1 := { 5 }
	card_symbol_offset_width_1 := { -6 }
	card_symbol_offset_height_1 := { -6 }
	name_card_symbol_offset_left_1 := { 12 }
	name_shadow_color :=			{ rgb(0,0,0) }
	name_shadow_displacement_x :=	{ -2 }
	name_shadow_displacement_y :=	{ 2 }
	
	typeline_offset_top_1 := { 13 }
	typeline_offset_left_1 := { 4 }
	type_offset_top_1 := { 2 }
	rarity_offset_left_1 := { 8 }
	indicator_offset_left_1 := { -5 }
	indicator_offset_top_1 := { -3 }
	type_shadow_color :=			{ rgb(0,0,0) }
	type_shadow_displacement_x :=	{ -2 }
	type_shadow_displacement_y :=	{ 2 }
	
	invert_watermark_1 := { true }
	
	information_offset_top_1 := { 3 }
	information_secondary_offset_pt_left_1 := { 16 }
	
	swap_fonts_pt_default :=
	[
		name: {"Caesar Dressing"},
		size: {31.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {28.0},
		color: {"white"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_type_default :=
	[
		name: {"Caesar Dressing"},
		size: {30.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_name_default :=
	[
		name: {"Caesar Dressing"},
		size: {33.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_casting_cost_default :=
	[
		name: {"MPlantin"},
		size: {31.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	
	template_prefix :=
	[
		card:			{ "namebox/" }
		textbox:		{ "textbox/" }
		stamp:			{ "stamp/" }
		nonstamp:		{ "nonstamp/" }
		pt:				{ "pt/" }
		identity:		{ "/magic-modules.mse-include/indicators/" }
		crown:			{ "crown/" }
	]
	template_suffix :=
	[
		card:			".png"
		textbox:		".png"
		stamp:			".png"
		nonstamp:		".png"
		pt:				".png"
		identity:		"identity.png"
		crown:			".png"
	]
	template :=			{ template_prefix[type]() + input + template_suffix[type] }
	land_template :=	{ template_prefix[type]() + (if input == "a" then "c" else input) + template_suffix[type] }
	
	card_background :=	{ color_background(type:"card",			base_hybrid:card_hybrid,		hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white") }
	card_textbox :=		{ color_background(type:"textbox",		base_hybrid:card_hybrid,		hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white") }
	card_stamp :=		{ color_background(type:"stamp",		base_hybrid:card_hybrid,		hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white") }
	card_nonstamp :=	{ color_background(type:"nonstamp",		base_hybrid:card_hybrid,		hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white") }
	card_crown :=		{ color_background(type:"crown",		base_hybrid:card_hybrid,		hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white") }
	card_ptbox :=		{ color_background(type:"pt",			base_hybrid:card_hybrid,		hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white") }
	module_identity :=	{ color_background(type:"identity",		base_hybrid:identity_hybrid,	hybrid_blend: "white",	artifact_blend: "white",	multicolor_blend: "white",	folder:template_prefix["identity"]())	}
	
	is_crowned :=		{ styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	pt_colors := { if styling.PT_color_scheme == "canon" then pt_colors_canon() else styling.PT_color_scheme }
	pt_colors_canon := { if is_hybrid_cost() then "land" else "gold" }
	
	chop_top :=			{ split := split_comma(styling.chop_text_box); if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 500, minimum: -500) else 0 }
	chop_bot :=			{ split := split_comma(styling.chop_text_box); if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 500, minimum: -500) else 0 }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1500, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:2000, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:2000, minimum:0) else 0 }
	
	art_left :=			{ if styling.stretch_art_to_whole_card or styling.border != "yes" then 0						else 30 }
	art_width :=		{ if styling.stretch_art_to_whole_card or styling.border != "yes" then stylesheet.card_width	else 690 }
	art_top :=			{ if styling.stretch_art_to_whole_card or styling.border != "yes" then 0						else 30 }
	art_bottom :=		{ if styling.stretch_art_to_whole_card or styling.border == "no" then stylesheet.card_height	else 967 }
	art_mask :=
	{
		mask := "image_mask.png"
		crop(mask, offset_x: art_left(), offset_y: art_top(), width: art_width(), height: art_bottom() - art_top())
	}

############################################################## Extra style options
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/texts/styling_fields

styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards. Canon is "land" on hybrid cards, "gold" otherwise.
	choice:			canon
	choice:			gold
	choice:			hybrid
	choice:			colored
	choice:			land
	initial:		canon
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			choice
	name:			border
	description:	Use a border?
	choice:			yes
	choice:			only copyright
	choice:			no
	initial:		only copyright

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields

include file: /magic-modules.mse-include/separators/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			150
		visible:			{ styling.border != "no" }
		mask:				{ "border_" + (if styling.border == "only copyright" then "borderless_" else "") + "mask.png" }
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		popup style:		in place
		render style:		image
		image:				{ card_background() }
		mask:				card_mask.png
	
	############################# Image
	image:
		left:				{ art_left() }
		top:				{ art_top() }
		width:				{ art_width() }
		bottom:				{ art_bottom() }
		z index:			100
		mask:				{ art_mask() }
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			1000
	
	############################# Text box
	text:
		left:				72
		top:				{ 670 + chop_top() + body_font_vertical() }
		right:				678
		bottom:				{ 950 - chop_bot() + (if is_stamped() then - 9 else 0) }
		z index:			900
		line height hard:	{ if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if
				(
					styling.center_text == "short text only" and
					not contains(match:"\n", card.rule_text) and
					to_text(card.flavor_text) == "" and
					card_style.text.content_lines <= 2
				)
				or	styling.center_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		7
	
	############################# PT
	pt:
		left:				600
		top:				{ 940 + pt_font_vertical() }
		width:				87
		height:				46
		z index:			900
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red
			shadow color:		{ rgb(0,0,0) }
			shadow displacement x:	-2
			shadow displacement y:	2

############################################################## Extra card fields
extra card field:
	type:				choice
	name:				textbox
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				crown
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				stamp
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				color
	name:				stamp border
	editable:			false
	save value:			false
	script:				card.border_color
extra card style:
	textbox:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		render style:		image
		image:				{ card_textbox() }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			800
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				color := pt_colors()
				if color == "gold" and count > 1 then template("m", type: "pt")
				else if color == "land" and count > 1 then template("c", type: "pt")
				else if color == "hybrid" and count == 2 then masked_blend(mask: "special_blend_pt.png", dark: template(pure.0, type: "pt"), light: template(pure.1, type: "pt"))
				else card_ptbox()
	crown:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			300
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	stamp:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		popup style:		in place
		render style:		image
		image:				{ if is_stamped() then card_stamp() else card_nonstamp() }
	stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		visible:			{ styling.border != "no" and is_stamped() }
		mask:				border_stamp_mask.png
