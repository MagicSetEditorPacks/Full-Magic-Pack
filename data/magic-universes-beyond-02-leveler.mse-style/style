mse version:		2.1.2
game:				magic
short name:			UB Leveler
full name:			Universes Beyond
icon:				card_sample.png
position hint:		000

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-modules.mse-include
	version:			2024-05-20
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			750
card height:		1046
card dpi:			300


### blanks by Card Conjurer, Velvet Byrne, Rachel (the Touhou brainrot one) and GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	card_shape := { "leveler" }
	
	leveler_separator_disabled_1 := { false }
	
	leveler_level_box_image_folder_normal_1 :=	{ "/magic-universes-beyond-02-leveler.mse-style/level/" }
	leveler_pt_box_image_folder_normal_1 :=		{ "/magic-universes-beyond-02-leveler.mse-style/pt/" }
	
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: { if is_vehicle() then "white" else "black" },
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	
	swap_fonts_pt2_src := { styling.custom_level_font or else "" }
	swap_fonts_pt2_default :=
	[
		name: {"Beleren Bold"},
		size: {24.0},
		color: {"black"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {26.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {26.0},
		color: {"black"},
		vertical: {0},
		italic: {""}
	]
	
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {30.0},
		color: {"black"},
		vertical: {0},
		italic: {""}
	]
	
	template_prefix :=
	[
		card:					"card/",
		crown:					"crown/",
		identity:				"/magic-identity-new.mse-include/",
		stamp:					"stamp/",
		alias:					"alias/",
		stampbackground:		"stampbackground/"
		stampbackground2:		"stampbackground2/"
		stampbackground3:		"stampbackground3/"
		stampbackground4:		"stampbackground4/"
		nonstampbackground:		"nonstampbackground/"
		nonstampbackground2:	"nonstampbackground2/"
		nonstampbackground3:	"nonstampbackground3/"
		nonstampbackground4:	"nonstampbackground4/"
		textbox:				"textbox/"
		textbox2:				"textbox2/"
		textbox3:				"textbox3/"
		textbox4:				"textbox4/"
	]
	template_suffix :=
	[
		card:					"card.png",
		crown:					"crown.png",
		identity:				"identity.png"
		stamp:					"stamp.png",
		alias:					"alias.png",
		stampbackground:		"stampbackground.png"
		stampbackground2:		"stampbackground.png"
		stampbackground3:		"stampbackground.png"
		stampbackground4:		"stampbackground.png"
		nonstampbackground:		"nonstampbackground.png"
		nonstampbackground2:	"nonstampbackground.png"
		nonstampbackground3:	"nonstampbackground.png"
		nonstampbackground4:	"nonstampbackground.png"
		textbox:				"textbox.png"
		textbox2:				"textbox.png"
		textbox3:				"textbox.png"
		textbox4:				"textbox.png"
	]
	template :=
	{
		template_prefix[type] +
		(if input == "c" and is_clear() then (if type == "card" then "cclear" else if type != "pt" and not contains(type, match: "textbox") and not contains(type, match: "stampbackground") then "a" else "c") else input) +
		template_suffix[type]
	}
	template :=
	{
		template_prefix[type] +
		(if input == "c" and is_clear() then (if type == "card" then "cclear" else if type != "pt" and not contains(type, match: "textbox") and not contains(type, match: "stampbackground") then "a" else "c") else input) +
		template_suffix[type]
	}
	
	card_background :=				{ color_background(input: card.card_color, type: "card",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_alias :=					{ color_background(input: card.card_color, type: "alias",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown :=					{ color_background(input: card.card_color, type: "crown",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp :=					{ color_background(input: card.card_color, type: "stamp",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background :=		{ color_background(input: card.card_color, type: "stampbackground",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background2 :=		{ color_background(input: card.card_color, type: "stampbackground2",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background3 :=		{ color_background(input: card.card_color, type: "stampbackground3",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp_background4 :=		{ color_background(input: card.card_color, type: "stampbackground4",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background :=		{ color_background(input: card.card_color, type: "nonstampbackground",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background2 :=	{ color_background(input: card.card_color, type: "nonstampbackground2",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background3 :=	{ color_background(input: card.card_color, type: "nonstampbackground3",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamp_background4 :=	{ color_background(input: card.card_color, type: "nonstampbackground4",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox :=					{ color_background(input: card.card_color, type: "textbox",				base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox2 :=				{ color_background(input: card.card_color, type: "textbox2",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox3 :=				{ color_background(input: card.card_color, type: "textbox3",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_textbox4 :=				{ color_background(input: card.card_color, type: "textbox4",			base_hybrid: card_hybrid)		}@(offset:0 )
	
	is_promo := { styling.promo }
	
	is_unsorted := { styling.remove_from_autocount }
	
	is_aliased := { card.alias != "" }
	
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	
	is_land := { styling.land_frame == "yes" or (styling.land_frame == "if land" and lang_setting("is_land")(card.super_type)) }
	
	is_vehicle := { styling.vehicle_frame == "yes" or (styling.vehicle_frame == "if vehicle" and lang_setting("is_vehicle")(card.sub_type)) }
	
	frame_alpha :=
	{
		if styling.opacity_percentage == "" then
		(
			if pure_colors(card.card_color) == ""
			and	not lang_setting("is_land")(card.super_type)
			and	not lang_setting("is_artifact")(card.super_type)
			and	not contains(card.card_color, match:"artifact")
			and	not contains(card.card_color, match:"land")
			and	not contains(card.card_color, match:"hybrid")
			and	not contains(card.card_color, match:"multicolor")
			then 0.8
			else 1.0
		)
		else if styling.opacity_percentage == "100" then 1.0
		else clamp(styling.opacity_percentage/100, minimum: 0.0, maximum: 1.0)
	}
	is_clear := { frame_alpha() <= 0.995 }
	clear_mask :=
	{
		grey := frame_alpha() * 255
		combine_blend(image1: recolor_image("clear_mask.png", color: rgb(grey,grey,grey)), image2: if is_crowned() then "opaque_crown_mask.png" else "opaque_mask.png", combine: "add")
	}
	
	chop_top :=			{ split := split_comma(styling.chop_text_box); if length(split) > 0 and split[0] != "" and split[0] != "-" then clamp(split[0], maximum:500, minimum:-500) else 0 }
	chop_bottom :=		{ split := split_comma(styling.chop_text_box); if length(split) > 1 and split[1] != "" and split[1] != "-" then clamp(split[1], maximum:500, minimum:-500) else 0 }
	chop_right :=		{ split := split_comma(styling.chop_text_box); if length(split) > 2 and split[2] != "" and split[2] != "-" then clamp(split[2], maximum:500, minimum:-500) else 0 }
	
	popout_left :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:1500, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:2000, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:1500, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:2000, minimum:0) else 0 }
	
	include file: /magic-modules.mse-include/levelers/init_script

############################################################## Extra style options

styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/levelers/styling_fields

include file: /magic-modules.mse-include/texts/styling_fields

styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards. Canon is "land" on hybrid cards, "gold" otherwise.
	choice:			canon
	choice:			gold
	choice:			hybrid
	choice:			colored
	choice:			land
	initial:		canon
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			land frame
	description:	Use the land frame overlay?
	choice:			yes
	choice:			if land
	choice:			no
	initial:		if land
styling field:
	type:			text
	name:			opacity percentage
	description:	Use a clear frame with the given opacity. Default is 80 for colorless non-artifact cards, and 100 for all other cards.

include file: /magic-modules.mse-include/stamps/styling_fields

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

styling field:
	type:			text
	name:			custom level font
	description:	Font used for the level label text. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields

include file: /magic-modules.mse-include/separators/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

include file: /magic-modules.mse-include/levelers/card_fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			11
		mask:				border_mask.png
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			10
		render style:		image
		popup style:		in place
		image:				{ card_background() }
		mask:				{ if is_clear() then clear_mask() else "card_mask.png" }
	############################# Name line
	alias:
		left:				108
		top:				116
		right:				641
		height:				28
		z index:			300
		alignment:			middle center shrink-overflow
		font:
			name:				MPlantin-Italic
			size:				18
			color:				white
			weight:				bold
	############################# Image
	image:
		left:				{ if styling.stretch_image_to_whole_card then 0							else if is_clear() then 30	else 57 }
		top:				{ if styling.stretch_image_to_whole_card then 0							else if is_clear() then 29	else 118 }
		width:				{ if styling.stretch_image_to_whole_card then stylesheet.card_width		else if is_clear() then 690	else 636 }
		height:				{ if styling.stretch_image_to_whole_card then stylesheet.card_height	else if is_clear() then 938	else 464 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			400
	############################# Text box
	text:
		left:				66
		top:				{ 667 + chop_top() + (if is_stamped() then 4 else 0) + body_font_vertical() }
		right:				683
		bottom:				{ 951 - chop_bot() - (if is_stamped() then 8 else 0) }
		z index:			900
		line height hard:	{ if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	2.3
		alignment:
			script:
				if
				(
					styling.center_text == "short text only" and
					not contains(match:"\n", card.rule_text) and
					to_text(card.flavor_text) == "" and
					card_style.text.content_lines <= 2
				)
				or	styling.center_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		7
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		7

############################################################## Extra card fields

extra card field:
	type:				choice
	name:				textbox
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				textbox 2
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				textbox 3
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				textbox 4
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				alias box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown clear shadow
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				color
	name:				crown border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				choice
	name:				land overlay
	editable:			false
	save value:			false
	show statistics:	false
	choice:				land overlay
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	show statistics:	false
	choice:				vehicle overlay
extra card field:
	type:				choice
	name:				card stamp background
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp background 2
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp background 3
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp background 4
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				color
	name:				card stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp rim
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card stamp rim

extra card style:
	textbox:
		left:				0
		top:				{ hack_to_force_update := card_style.text.content_width;	0 }
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			11
		render style:		image
		image:				{ card_textbox() }
		mask:				textbox_mask.png
	textbox 2:
		left:				0
		top:				{ hack_to_force_update := card_style.text.content_width;	0 }
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			11
		visible:			{ leveler_level_is_active_1(2) }
		render style:		image
		image:				{ card_textbox2() }
		mask:				{ combine_blend(image1: "textbox_short_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - leveler_separator_top_1(1), max_x: 750, max_y: 3046), combine: "multiply") }
	textbox 3:
		left:				0
		top:				{ hack_to_force_update := card_style.text.content_width;	0 }
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			11
		visible:			{ leveler_level_is_active_1(3) }
		render style:		image
		image:				{ card_textbox3() }
		mask:				{ combine_blend(image1: "textbox_short_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - leveler_separator_top_1(2), max_x: 750, max_y: 3046), combine: "multiply") }
	textbox 4:
		left:				0
		top:				{ hack_to_force_update := card_style.text.content_width;	0 }
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			11
		visible:			{ leveler_level_is_active_1(4) }
		render style:		image
		image:				{ card_textbox4() }
		mask:				{ combine_blend(image1: "textbox_short_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - leveler_separator_top_1(3), max_x: 750, max_y: 3046), combine: "multiply") }
	foil layer:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
		mask:				{ "foil_mask" + (if is_stamped() then "_rare" else "") + (if card.pt != "" then "_pt" else "") + (if is_crowned() then "_crown" else "") + ".png"}
	land overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			38
		visible:			{ is_land() }
		render style:		image
		image:				loverlay.png
	vehicle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			39
		visible:			{ is_vehicle() }
		render style:		image
		image:				voverlay.png
	alias box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			40
		visible:			{ is_aliased() }
		render style:		image
		image:				{ card_alias() }
	crown:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			41
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	crown clear shadow:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			42
		visible:			{ is_crowned() and is_clear() }
		render style:		image
		image:				shadow_clear_crown.png
	crown border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			40
		visible:			{ is_crowned() }
		mask:				crown_border_mask.png
	card stamp background:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background() else card_nonstamp_background() }
		mask:				textbox_mask.png
	card stamp background 2:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background2() else card_nonstamp_background2() }
		mask:				{ combine_blend(image1: "textbox_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - leveler_separator_top_1(1), max_x: 750, max_y: 3046), combine: "multiply") }
	card stamp background 3:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background3() else card_nonstamp_background3() }
		mask:				{ combine_blend(image1: "textbox_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - leveler_separator_top_1(2), max_x: 750, max_y: 3046), combine: "multiply") }
	card stamp background 4:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			27
		render style:		image
		image:				{ if is_stamped() then card_stamp_background4() else card_nonstamp_background4() }
		mask:				{ combine_blend(image1: "textbox_mask.png", image2: crop_safe("textbox_dynamic_mask.png", width: 750, height: 1046, offset_x: 0, offset_y: 1500 - leveler_separator_top_1(3), max_x: 750, max_y: 3046), combine: "multiply") }
	card stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			29
		visible:			{ is_stamped() }
		mask:				stamp_border_mask.png
	card stamp rim:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			30
		visible:			{ is_stamped() }
		render style:		image
		image:				{ card_stamp() }
		mask:				{ if is_clear() then "stamprim_clear_mask.png" else "" }
