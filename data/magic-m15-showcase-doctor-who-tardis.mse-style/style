mse version:		2.1.2
game:				magic
short name:			TARDIS
full name:			Doctor Who Showcase
icon:				card_sample.png
position hint:		095

version:			2023-08-15
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23
depends on:
	package:			magic-namelines.mse-include
	version:			2024-01-29
depends on:
	package:			magic-symbols.mse-include
	version:			2024-01-29
depends on:
	package:			magic-typelines.mse-include
	version:			2024-01-29
depends on:
	package:			magic-separators.mse-include
	version:			2024-01-29
depends on:
	package:			magic-watermarks.mse-include
	version:			2024-01-29
depends on:
	package:			magic-stamps.mse-include
	version:			2024-01-29
depends on:
	package:			magic-corners.mse-include
	version:			2024-01-29
depends on:
	package:			magic-copyright.mse-include
	version:			2024-01-29

card width:			375
card height:		523
card dpi:			150


### blanks by GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	include file: /magic-copyright.mse-include/init_script
	
	
	
	template_prefix :=
	[
		card:			"card/",
		crown:			"crown/",
		identity:		"/magic-identity-new.mse-include/"
	]
	template_suffix :=
	[
		card:			"card.png",
		crown:			"crown.png",
		identity:		"identity.png"
	]
	template			:= { template_prefix[type] + input + template_suffix[type] }
	land_template		:= { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	
	card_background		:= { color_background(input: card.card_color, type: "card",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown			:= { color_background(input: card.card_color, type: "crown",		base_hybrid: card_hybrid)		}@(offset:0 )
	
	mana_t :=
	{
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana		:= { styling.use_guild_mana_symbols }
	ancestral_mana	:= { styling.use_ancestral_mana_symbols }
	
	has_identity	:= { styling.color_indicator_dot }
	has_identity_2	:= { false }
	
	is_promo		:= { styling.promo }
	
	is_unsorted		:= { styling.remove_from_autocount }
	
	is_stamped		:= { card.card_stamp != "none" and (contains(styling.holofoil_stamps, match: "yes") or (styling.holofoil_stamps == "only rares and mythics" and is_rare()))}
	is_foil_stamped	:= { styling.holofoil_stamps == "yes, all foil" or is_rare() }
	
	is_crowned		:= { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	
	chop_top		:= { split := split_comma(styling.chop_textbox); if length(split) > 0 and split.0 != "" then clamp(split.0, maximum: 700, minimum: -700) else 0 }
	chop_bot		:= { split := split_comma(styling.chop_textbox); if length(split) > 1 and split.1 != "" then clamp(split.1, maximum: 700, minimum: -700) else 0 }
	
	popout_left		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" then clamp(split.0, maximum: 800, minimum: -500) else 0 }
	popout_top		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" then clamp(split.1, maximum: 1000, minimum: -500) else 0 }
	popout_width	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" then clamp(split.2, maximum: 800, minimum: 0) else 0 }
	popout_height	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" then clamp(split.3, maximum: 1000, minimum: 0) else 0 }
	
	swap_fonts_name_default := [
		name: {"Chantilly-Medium-Regular-AllCaps"},
		size: {16},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_type_default := [
		name: {"Chantilly-Medium-Regular-AllCaps"},
		size: {13},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_body_default := [
		name: {"MPlantin"},
		size: {13},
		color: {"white"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_pt_default := [
		name: {"Beleren Bold"},
		size: {14.5},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	w_scale := stylesheet.card_width/375
	h_scale := stylesheet.card_height/523
	
	card_stamp_default := { "universes beyond" }
	
	transform_symbol_disabled := { true }
	
	nameline_offset_top := { 1 }
	
	typeline_offset_left := { 1 }
	typeline_offset_top := { 1 }
	typeline_offset_width := { 4 }
	
	rarity_offset_left := { -1 }
	rarity_offset_top := { -1 }
	rarity_offset_size := { 1 }
	
	type_offset_right := { if styling.circle_around_rarity then -31 * w_scale else 0 }


############################################################## Extra style options
styling field:
	type:			text
	name:			chop textbox
	description:	Formatted as "X,Y". Shrinks textbox X pixels from the top and Y from the bottom.
styling field:
	type:			choice
	name:			center rule text
	description:	When to center text (short text means only on one-line cards with no flavor text)
	choice:			always
	choice:			short text only
	choice:			never
	initial:		never
styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			boolean
	name:			color indicator dot
	description:	Use a dot in the typeline to indicate card color?
	initial:		no
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps?
	choice:			yes, all foil
	choice:			yes, un/commons not foil
	choice:			only rares and mythics
	choice:			no
	initial:		yes, un/commons not foil
styling field:
	type:			boolean
	name:			colored border
	description:	Tint the border?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			text
	name:			rarity offsets
	description:	Moves the set symbol. Formatted as "left,top,size".
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Should the common rarity symbol be inverted, like in Coldsnap?
	initial:		no
styling field:
	type:			boolean
	name:			circle around rarity
	description:	Should there be a white circle around the set symbol?
	initial:		yes
styling field:
	type:			choice
	name:			corners
	description:	What should the corners of the card look like?
	choice:			rounded and antialiased
	choice:			rounded
	choice:			none
	initial:		rounded and antialiased
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			boolean
	name:			use ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	What tap and untap symbols should be used on cards?
	choice:			modern
	choice:			old
	choice:			diagonal T
	initial:		modern
styling field:
	type:			package choice
	name:			casting cost mana symbols
	description:	Symbols used in the casting cost.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-large.mse-symbol-font
styling field:
	type:			package choice
	name:			text box mana symbols
	description:	Symbols used in the rule text and flavor text.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			boolean
	name:			apply custom fonts
	description:	Enable to attempt to use custom fonts given below
	initial:		no
styling field:
	type:			text
	name:			custom name font
	description:	Formatted as "font name;font size;font color;vertical offset;italic font name" last 4 are optional. color can be a name or R,G,B,A numbers.
styling field:
	type:			text
	name:			custom type font
	description:	Formatted as "font name;font size;font color;vertical offset;italic font name" last 4 are optional. color can be a name or R,G,B,A numbers.
styling field:
	type:			text
	name:			custom body font
	description:	Formatted as "font name;font size;font color;vertical offset;italic font name" last 4 are optional. color can be a name or R,G,B,A numbers.
styling field:
	type:			text
	name:			custom pt font
	description:	Formatted as "font name;font size;font color;vertical offset;italic font name" last 4 are optional. color can be a name or R,G,B,A numbers.
styling style:
	use guild mana symbols:
		choice images:
			yes:				/magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:					/magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style:	both
		choice images:
			modern:				/magic-mana-large.mse-symbol-font/mana_t.png
			old:				/magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T:			/magic-mana-large.mse-symbol-font/mana_t_older.png
	center rule text:
		render style:	both
		choice images:
			always:				/magic.mse-game/icons/center-all-text.png
			short text only:	/magic.mse-game/icons/center-short-text.png
			never:				/magic.mse-game/icons/center-no-text.png


############################################################## Card fields


### Includes
include file: /magic-namelines.mse-include/card_fields
include file: /magic-typelines.mse-include/card_fields
include file: /magic-separators.mse-include/card_fields
include file: /magic-watermarks.mse-include/card_fields
include file: /magic-stamps.mse-include/complete_stamps
include file: /magic-copyright.mse-include/card_fields
include file: /magic-corners.mse-include/card_fields


card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			100
		mask:				border_mask.png
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			210
		popup style:		in place
		render style:		image
		image:				{ card_background() }
		mask:				card_mask.png
	############################# Image
	image:
		left:				{ if styling.stretch_image_to_whole_card then 0							else 29 }
		top:				{ if styling.stretch_image_to_whole_card then 0							else 65 }
		width:				{ if styling.stretch_image_to_whole_card then stylesheet.card_width		else 317 }
		height:				{ if styling.stretch_image_to_whole_card then stylesheet.card_height	else 225 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			2000
	############################# Text box
	text:
		left:				33
		top:				{ 333 + chop_top() + body_font_vertical() }
		right:				342
		bottom:				{ 475 - chop_bot() }
		z index:			2000
		line height hard:	{ if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if	(styling.center_rule_text == "short text only" and
					not contains(match:"\n", card.rule_text) and
					card.flavor_text == "<i-flavor></i-flavor>" and
					card_style.text.content_lines <= 2) or
					styling.center_rule_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				{ body_font_size() }
			scale down to:		6
			color:				{ body_font_color() }
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ body_font_size() }
			scale down to:		6
	############################# PT
	pt:
		left:				295
		top:				{ 466 + pt_font_vertical() }
		width:				55
		height:				28
		z index:			3000
		alignment:			center middle shrink-overflow
		font:
			name:				{pt_font()}
			italic name:		{pt_font_italic()}
			size:				{pt_font_size()}
			color:				{pt_font_color()}
			separator color:	red
	############################# Copyright stuff
	partition select:
		left:				24
		top:				488
		width:				{if not use_auto_numbers() then 0 else if contains(set.card_number_style, match:"/0") then 50 else 35}
		height:				10
		z index:			3
		render style:		hidden

############################################################## Extra card fields

extra card field:
	type:				choice
	name:				rarity circle
	editable:			false
	save value:			false
	show statistics:	false
	choice:				rarity circle
extra card field:
	type:				choice
	name:				card background
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card background
extra card field:
	type:				choice
	name:				image border
	editable:			false
	save value:			false
	show statistics:	false
	choice:				image border
extra card field:
	type:				color
	name:				card colored border
	script:				rgb(0, 21, 34)
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown background
	editable:			false
	save value:			false
	show statistics:	false
	choice:				crown background
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				pt box
extra card field:
	type:				choice
	name:				pt shadow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				pt shadow
extra card field:
	type:				color
	name:				card stamp background border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				color
	name:				card stamp colored border
	script:				rgb(0, 21, 34)
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer

extra card style:
	rarity circle:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1020
		visible:			{ styling.circle_around_rarity }
		render style:		image
		image:				circle.png
	card background:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		render style:		image
		image:				card.png
	image border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			220
		render style:		image
		image:				image_border.png
	crown:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			310
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	crown background:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			300
		visible:			{ is_crowned() }
		render style:		image
		image:				crown.png
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			810
		visible:			{ card.pt != "" }
		render style:		image
		image:				pt.png
	pt shadow:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			800
		visible:			{ card.pt != "" }
		render style:		image
		image:				pt_shadow.png
	card stamp background border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			700
		visible:			{ is_stamped() }
		mask:				border_stamp_mask.png
	card stamp colored border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			701
		visible:			{ is_stamped() and styling.colored_border }
		mask:				border_stamp_mask.png
	card colored border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			101
		visible:			{ styling.colored_border }
		mask:				border_mask.png
	foil layer:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
		mask:				{ "foil_mask" + (if is_stamped() then "_rare" else "") + (if card.pt != "" then "_pt" else "") + (if is_crowned() then "_crown" else "") + ".png" }
