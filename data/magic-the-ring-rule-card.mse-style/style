mse version:		2.0.0
game:				magic
short name:			The Ring Rules
full name:			Mechanics Reminder
icon:				card_sample.png
position hint:		999

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-default-image.mse-include
	version:			2007-09-23
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			375
card height:		523
card dpi:			150


### blanks by GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	mana_t :=
	{
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana		:= { styling.use_guild_mana_symbols }
	ancestral_mana	:= { styling.use_ancestral_mana_symbols }
	
	has_identity	:= { false }
	has_identity_2	:= { false }
	
	is_promo		:= { styling.promo }
	
	is_unsorted		:= { styling.remove_from_autocount }
	
	is_stamped		:= { card.card_stamp != "none" }
	is_foil_stamped	:= { card.card_stamp != "standard" }
	
	chop_top		:= { if styling.chop_rule_textbox == "-" then 0 else max(min(to_int(styling.chop_rule_textbox),200),-225) }
	
	shrink_name		:= { if styling.shrink_name_text != "" then to_number(styling.shrink_name_text) else 0 }
	
	name_margin :=
	{
		casting_cost_margin := if card_style.casting_cost.content_width == 0 then 0 else card_style.casting_cost.content_width + 4
		rarity_margin := if styling.visible_rarity then rarity_size() else 0
		max(casting_cost_margin, rarity_margin)
	}
	
	use_main_rarity	:= { contains(set.mainframe_rarity_name, match: ".png") }
	
	alt_rarity := { styling.alt_rarity_color != "" }
	alt_rarity_color :=
	{
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		output
	}
	alt_symbol :=
	{
		colors := alt_rarity_color()
		symbol_variation(
			symbol:			set.symbol,
			border_radius:	colors.12,
			fill_type:		"linear gradient",
			fill_color_1:	rgb(colors.0, colors.1, colors.2),
			fill_color_2:	rgb(colors.3, colors.4, colors.5),
			border_color_1:	rgb(colors.6, colors.7, colors.8),
			border_color_2:	rgb(colors.9, colors.10, colors.11),
			center_x:		0.5,
			center_y:		0.5,
			end_x:			1,
			end_y:			1
		)
	}
	
	rarity_right	:= { split := split_comma(styling.rarity_coordinates); if length(split) > 0 and split.0 != "" then max(min(split.0,1000),0) else 344 }
	rarity_top		:= { split := split_comma(styling.rarity_coordinates); if length(split) > 1 and split.1 != "" then max(min(split.1,1500),0) else typebox_bottom() - 33 }
	rarity_size		:= { split := split_comma(styling.rarity_coordinates); if length(split) > 2 and split.2 != "" then max(min(split.2,1500),0) else 26 }
	rarity_left		:= { rarity_right() - rarity_size() }
	
	popout_left		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" then max(min(split.0,1000),-500) else 0 }
	popout_top		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" then max(min(split.1,1500),-500) else 0 }
	popout_width	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" then max(min(split.2,1000),0) else 0 }
	popout_height	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" then max(min(split.3,1500),0) else 0 }
	
	split_comma	:= split_text@(match: " *, *")
	
	font_size_cap :=
	{
		if styling.font_size_cap == "" then 14 else to_number(styling.font_size_cap)
	}
	
	active_abilities :=
	{
		if		styling.number_of_textboxes == "four"	then	3
		else if	styling.number_of_textboxes == "three"	then	2
		else if	styling.number_of_textboxes == "five"	then	4
		else if	styling.number_of_textboxes == "two"	then	1
		else if	styling.number_of_textboxes == "six"	then	5
		else if styling.number_of_textboxes == "seven"	then	6
		else													0
	}
	
	typebox_bottom :=
	{
		251 + chop_top()
	}
	
	textbox_image :=
	{
		alpha_value :=	if styling.textbox_opacity_percentage == "" then 80 else to_number(styling.textbox_opacity_percentage) or else 80
		alpha_value_clamped :=	if alpha_value < 0 then 0
								else if alpha_value <= 100 then alpha_value/100
								else 1
		set_alpha(recolor_image("textbox_background.png", color: styling.textbox_color), alpha: alpha_value_clamped)
	}
	
	divider_height := 
	{
		count := active_abilities()
		if not styling.notches then 4
		else if count == 5 then 9
		else if count == 6 or count == 7 then 8
		else 10
	}
	
	alt_text := { true }
	alt_text_script :=
	{
		count := active_abilities()
		if count == 0 then
			forward_editor(field: card.level_1_text)
		else if count == 1 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
		else if count == 2 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
		else if count == 3 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
		else if count == 4 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
		else if count == 5 then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
		else
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	}
	
	text_filter := text_filter + { if input == "" then "​" else input }


############################################################## Extra style options

styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no
styling field:
	type:			boolean
	name:			border
	description:	Use a border around the card?
	initial:		yes
styling field:
	type:			text
	name:			shrink name text
	description:	Shrinks name X pixels.
styling field:
	type:			boolean
	name:			center name text
	description:	Center the name on the card.
	initial:		yes
styling field:
	type:			choice
	name:			number of textboxes
	description:	How many rules textboxes should there be? MODIFY CONTENTS OF TEXTBOXES IF THIS HAS TROUBLE UPDATING AFTER BEING CHANGED.
	choice:			one
	choice:			two
	choice:			three
	choice:			four
	choice:			five
	choice:			six
	choice:			seven
	initial:		four
styling field:
	type:			boolean
	name:			notches
	description:	Use notches on the ability dividers?
	initial:		yes
styling field:
	type:			text
	name:			font size cap
	description:	Caps the font size of the rules text. Default is 14.
styling field:
	type:			text
	name:			chop rule textbox
	description:	Reduces textbox height by X pixels. Use negatives to increase height.
styling field:
	type:			boolean
	name:			center rule text
	description:	Center all rule text on the card.
	initial:		yes
styling field:
	type:			color
	name:			text color
	description:	Use the specified color for the rule text.
	choice:
		name:			black
		color:			rgb(0,0,0)
	choice:
		name:			white
		color:			rgb(255,255,255)
	initial:		white
styling field:
	type:			text
	name:			textbox opacity percentage
	description:	Set the opacity percentage for the textbox background. Opaque is 100, transparent is 0, default is 80.
styling field:
	type:			color
	name:			textbox color
	description:	Use the specified color for the textbox background.
	choice:
		name:			black
		color:			rgb(0,0,0)
	choice:
		name:			white
		color:			rgb(255,255,255)
	initial:		black
styling field:
	type:			boolean
	name:			visible rarity
	description:	Should the rarity symbol be visible?
	initial:		no
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Should the common rarity symbol be inverted, like in Coldsnap?
	initial:		no
styling field:
	type:			text
	name:			alt rarity color
	description:	Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:..." 1 and 2 are fill color, 3 and 4 border color
styling field:
	type:			text
	name:			rarity coordinates
	description:	The coordinates for the set symbol, formatted as "right,top,size". Default is 687,593,52.
styling field:
	type:			boolean
	name:			use ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	What tap and untap symbols should be used on cards?
	choice:			modern
	choice:			old
	choice:			diagonal T
	initial:		modern
styling field:
	type:			package choice
	name:			mana symbols
	description:	Symbol font used.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		yes
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			text
	name:			name font
	description:	Font used for the name. Hover your mouse over the font file to see it's details, and write it's Title here.
styling field:
	type:			text
	name:			text font
	description:	Font used for the rule text. Hover your mouse over the font file to see it's details, and write it's Title here.
styling field:
	type:			text
	name:			text italic font
	description:	Font used for the flavor text and reminder texts. Hover your mouse over the font file to see it's details, and write it's Title here.
styling style:
	use guild mana symbols:
		choice images:
			yes:			/magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:				/magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style:	both
		choice images:
			modern:			/magic-mana-large.mse-symbol-font/mana_t.png
			old:			/magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T:		/magic-mana-large.mse-symbol-font/mana_t_older.png


############################################################## Card fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top :				0
		width:				375
		height:				523
		z index:			100
		mask:				{ if styling.border then "border_mask.png" else "border_small_mask.png" }
	############################# Name line
	name:
		left:				{ 32 + (if styling.center_name_text then name_margin() else 0) }
		top:				{ typebox_bottom() - 33 }
		right:				{ 342 - name_margin() }
		height:				26
		z index:			300
		alignment:			{ if styling.center_name_text then "middle center shrink-overflow" else "middle left shrink-overflow" }
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 15 - shrink_name() }
			color:				white
	casting cost:
		right:				343
		top:				{ typebox_bottom() - 33 }
		width:				{ max(35, card_style.casting_cost.content_width + 6) }
		height:				26
		z index:			310
		alignment:			middle right
		always symbol:		true
		font:
			name:				MPlantin
			size:				15
			color:				white
		symbol font:
			name:				{ styling.mana_symbols }
			size:				15
			#alignment:			middle right
	rarity:
		right:				{ rarity_right() }
		top:				{ rarity_top() }
		width:				{ if styling.visible_rarity then rarity_size() else 0 }
		height:				{ rarity_size() }
		z index:			310
		alignment:			middle right
		visible:			{ styling.visible_rarity }
		render style:		image
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Image
	image:
		left:				{ if styling.stretch_image_to_whole_card or not styling.border then 0 else 15 }
		top:				{ if styling.stretch_image_to_whole_card or not styling.border then 0 else 15 }
		width:				{ if styling.stretch_image_to_whole_card or not styling.border then 375 else 345 }
		height:				{ if styling.stretch_image_to_whole_card then 523 else if not styling.border then 486 else 471 }
		z index:			0
		mask:				{ "image_" + (if styling.border then "" else "borderless_") + (if styling.stretch_image_to_whole_card then "full_" else "") + "mask.png" }
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			400
	############################# Text box
	text:
		left:				30
		width:				315
		top:				{ typebox_bottom() }
		bottom:				{ if is_stamped() then 470 else 478 }
		z index:			300
		alignment:			{ if styling.center_rule_text then "middle center" else "middle left" }
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size_cap() }
			scale down to:		6
			color:				{ styling.text_color }
		symbol font:
			name:				{ styling.mana_symbols }
			size:				{ font_size_cap() }
			scale down to:		6
		padding left:		2
		padding right:		2
		line height hard:	1.2
		line height line:	1.6
		line height soft:	0.9
		line height hard max:	1.3
		line height line max:	1.7
		line height soft max:	0.9
	watermark:
		left:				10
		top:				{ typebox_bottom() }
		right:				355
		bottom:				480
		z index:			190
		render style:		image
		popup style:		in place
		alignment:			middle center
		include file:		/magic-watermarks.mse-include/watermarks
	############################# Copyright stuff
	card stamp:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			220
		visible:			{ is_stamped() }
		render style:		image
		popup style:		in place
		image:				stamp.png
		mask:				stamp_mask.png
	set code:
		left:				24
		top:				498
		width:				40
		height:				10
		z index:			300
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 38 else 42 + card_style.set_code.content_width }
		top:				497.5
		width:				200
		height:				10
		z index:			300
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				7.25
			color:				{ styling.copyright_text_color }
	copyright:
		right:				351
		top:				488
		width:				{ if set.automatic_copyright then 0 else 140 }
		height:				10
		z index:			300
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields

extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				choice
	name:				typeline
	editable:			false
	save value:			false
	show statistics:	false
	choice:				typeline
extra card field:
	type:				choice
	name:				pinlines
	editable:			false
	save value:			false
	show statistics:	false
	choice:				pinlines
extra card field:
	type:				choice
	name:				stampline
	editable:			false
	save value:			false
	show statistics:	false
	choice:				stampline
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				choice
	name:				divider 1
	editable:			false
	save value:			false
	show statistics:	false
	choice:				divider 1
extra card field:
	type:				choice
	name:				divider 2
	editable:			false
	save value:			false
	show statistics:	false
	choice:				divider 2
extra card field:
	type:				choice
	name:				divider 3
	editable:			false
	save value:			false
	show statistics:	false
	choice:				divider 3
extra card field:
	type:				choice
	name:				divider 4
	editable:			false
	save value:			false
	show statistics:	false
	choice:				divider 4
extra card field:
	type:				choice
	name:				divider 5
	editable:			false
	save value:			false
	show statistics:	false
	choice:				divider 5
extra card field:
	type:				choice
	name:				divider 6
	editable:			false
	save value:			false
	show statistics:	false
	choice:				divider 6
extra card field:
	type:				color
	name:				card stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				card stamp foil
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card stamp foil
extra card field:
	type:				choice
	name:				textbox background
	editable:			false
	save value:			false
	show statistics:	false
	choice:				textbox background

extra card style:
	card code:
		left:				24
		top:				488
		width:				120
		height:				10
		z index:			300
		alignment:			middle left shrink-overflow
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				351
		top:				488
		width:				{ if set.automatic_copyright then 140 else 0 }
		height:				10
		z index:			300
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 25 else 29 + card_style.set_code.content_width }
		top:				500
		width:				12
		height:				7
		z index:			300
		render style:		image
		image:				{ recolor_image("artist_arrow.png", color: styling.copyright_text_color) }
	foil layer:
		left:				0
		top :				0
		width:				375
		height:				523
		z index:			500
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
		mask:				{ if styling.border then "image_full_mask.png" else "image_borderless_full_mask.png" }
	card stamp border:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			210
		visible:			{ is_stamped() }
		mask:				stamp_border_mask.png
	card stamp foil:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			220
		visible:			{ is_stamped() }
		render style:		image
		image:				{ if is_foil_stamped() then "stamp_foil.png" else "stamp_non_foil.png" }
	typeline:
		left:				0
		bottom:				{ typebox_bottom() }
		width:				375
		height:				40
		z index:			200
		render style:		image
		image:				typeline.png
	stampline:
		left:				0
		top:				479
		width:				375
		height:				7
		z index:			200
		render style:		image
		image:				stampline.png
	divider 1:
		left:				0
		width:				375
		top:				{ if length(card_style.text.layout.separators) or else 0 > 0 then card_style.text.top + card_style.text.layout.separators[0] - divider_height()/3 else 800 }
		height:				{ divider_height() }
		z index:			200
		visible:			{ active_abilities() > 0 }
		render style:		image
		image:				{ if styling.notches then "divider.png" else "divider_notchless.png" }
	divider 2:
		left:				0
		width:				375
		top:				{ if length(card_style.text.layout.separators) or else 0 > 1 then card_style.text.top + card_style.text.layout.separators[1] - divider_height()/3 else 800 }
		height:				{ divider_height() }
		z index:			200
		visible:			{ active_abilities() > 1 }
		render style:		image
		image:				{ if styling.notches then "divider.png" else "divider_notchless.png" }
	divider 3:
		left:				0
		width:				375
		top:				{ if length(card_style.text.layout.separators) or else 0 > 2 then card_style.text.top + card_style.text.layout.separators[2] - divider_height()/3 else 800 }
		height:				{ divider_height() }
		z index:			200
		visible:			{ active_abilities() > 2 }
		render style:		image
		image:				{ if styling.notches then "divider.png" else "divider_notchless.png" }
	divider 4:
		left:				0
		width:				375
		top:				{ if length(card_style.text.layout.separators) or else 0 > 3 then card_style.text.top + card_style.text.layout.separators[3] - divider_height()/3 else 800 }
		height:				{ divider_height() }
		z index:			200
		visible:			{ active_abilities() > 3 }
		render style:		image
		image:				{ if styling.notches then "divider.png" else "divider_notchless.png" }
	divider 5:
		left:				0
		width:				375
		top:				{ if length(card_style.text.layout.separators) or else 0 > 4 then card_style.text.top + card_style.text.layout.separators[4] - divider_height()/3 else 800 }
		height:				{ divider_height() }
		z index:			200
		visible:			{ active_abilities() > 4 }
		render style:		image
		image:				{ if styling.notches then "divider.png" else "divider_notchless.png" }
	divider 6:
		left:				0
		width:				375
		top:				{ if length(card_style.text.layout.separators) or else 0 > 5 then card_style.text.top + card_style.text.layout.separators[5] - divider_height()/3 else 800 }
		height:				{ divider_height() }
		z index:			200
		visible:			{ active_abilities() > 5 }
		render style:		image
		image:				{ if styling.notches then "divider.png" else "divider_notchless.png" }
	pinlines:
		left:				0
		width:				375
		top:				{ typebox_bottom() }
		bottom:				481
		z index:			90
		render style:		image
		image:				pinlines.png
	textbox background:
		left:				29
		width:				316
		top:				{ typebox_bottom() - 3 }
		bottom:				482
		z index:			180
		render style:		image
		image:				{ textbox_image() }