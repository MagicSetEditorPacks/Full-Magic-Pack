mse version:		2.1.2
game:				magic
short name:			Scroll
full name:			LotR Showcase
icon:				card_sample.png
position hint:		095

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-default-image.mse-include
	version:			2007-09-23
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			375
card height:		523
card dpi:			150


### blanks by GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	card_shape := { "saga" }
	
	card_hybrid_2 :=
	{
		masked_blend(mask: "special_blend_card.png", dark: template(colors.0), light: template(colors.1))
	}
	horizontal_card_hybrid :=
	[
		0:	horizontal_card_hybrid[0]
		1:	horizontal_card_hybrid[1]
		2:	card_hybrid_2
		3:	horizontal_card_hybrid[3]
		4:	horizontal_card_hybrid[4]
		5:	horizontal_card_hybrid[5]
		6:	horizontal_card_hybrid[6]
		7:	horizontal_card_hybrid[7]
	]
	card_hybrid :=
	[
		radial:		card_hybrid["radial"]
		horizontal:	horizontal_card_hybrid
		overlay:	card_hybrid["overlay"]
		vertical:	card_hybrid["vertical"]
	]
	
	template_prefix :=
	[
		card:			"card/",
		pt:				"pt/",
		crown:			"crown/",
		stamprim:		"stamprim/",
		nonstamprim:	"nonstamprim/",
		identity:		"/magic-identity-new.mse-include/"
	]
	template_suffix :=
	[
		card:			"card.png",
		pt:				"pt.png",
		crown:			"crown.png",
		stamprim:		"stamprim.png",
		nonstamprim:	"nonstamprim.png",
		identity:		"identity.png"
	]
	
	template := { template_prefix[type] + input + template_suffix[type] }
	land_template := { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	
	card_background :=		{ color_background(input: card.card_color, type: "card",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown :=			{ color_background(input: card.card_color, type: "crown",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox :=			{ color_background(input: card.card_color, type: "pt",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamprim :=		{ color_background(input: card.card_color, type: "stamprim",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamprim :=		{ color_background(input: card.card_color, type: "nonstamprim",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stampholofoil :=
	{
		if is_stamped() then (if is_foil_stamped() then "holofoil/universes beyond.png" else "holofoil/universes beyond_void.png") else ""
	}
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	
	mana_t :=
	{
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana :=		{ styling.use_guild_mana_symbols }
	ancestral_mana :=	{ styling.use_ancestral_mana_symbols }
	
	has_identity :=		{ styling.color_indicator_dot }
	has_identity_2 :=	{ false }
	
	is_promo :=			{ styling.promo }
	is_unsorted :=		{ styling.remove_from_autocount }
	is_stamped :=		{ card.card_stamp != "none" and (contains(styling.holofoil_stamps, match: "yes") or (styling.holofoil_stamps == "only rares and mythics" and is_rare()))}
	is_foil_stamped :=	{ styling.holofoil_stamps == "yes, all foil" or is_rare() }
	is_crowned :=		{ styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	is_gold_barred :=	{ styling.gold_name_and_type == "yes" }
	
	chapter_number_map :=
	[
		1: "I"
		2: "II"
		3: "III"
		4: "IV"
		5: "V"
		6: "VI"
		7: "VII"
	]
	a_saga := { true }
	saga_reminder :=
	{
		number_of_chapters := if styling.snap_chapter_to_box != "" then min(7,length(split_comma(styling.snap_chapter_to_box))) else styling.number_of_textboxes
		if styling.default_reminder != "" then replace(styling.default_reminder, match: "\\[number of chapters\\]", replace: chapter_number_map[number_of_chapters])
		else "As this Saga enters and after your draw step, add a lore counter. Sacrifice after " + chapter_number_map[number_of_chapters] + "."
	}
	
	shrink_name :=	{ if styling.shrink_name_text == "-" then 0 else if styling.shrink_name_text != "" then clamp(styling.shrink_name_text, minimum: -40, maximum: 13) else 0 }
	shrink_type :=	{ if styling.shrink_type_text == "-" then 0 else if styling.shrink_type_text != "" then clamp(styling.shrink_type_text, minimum: -40, maximum: 11) else 0 }
	
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png") }
	
	alt_rarity := { styling.alt_rarity_color != "" }
	alt_rarity_color :=
	{
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		output
	}
	alt_symbol :=
	{
		colors := alt_rarity_color()
		symbol_variation(
			symbol:			set.symbol,
			border_radius:	colors.12,
			fill_type:		"linear gradient",
			fill_color_1:	rgb(colors.0, colors.1, colors.2),
			fill_color_2:	rgb(colors.3, colors.4, colors.5),
			border_color_1:	rgb(colors.6, colors.7, colors.8),
			border_color_2:	rgb(colors.9, colors.10, colors.11),
			center_x:		0.5,
			center_y:		0.5,
			end_x:			1,
			end_y:			1
		)
	}
	
	rarity_right :=		{ split := split_comma(styling.rarity_coordinates); if length(split) > 0 and split.0 != "" then clamp(split.0, minimum: 0, maximum: 1000) else 343 }
	rarity_top :=		{ split := split_comma(styling.rarity_coordinates); if length(split) > 1 and split.1 != "" then clamp(split.1, minimum: 0, maximum: 1500) else 443 }
	rarity_size :=		{ split := split_comma(styling.rarity_coordinates); if length(split) > 2 and split.2 != "" then clamp(split.2, minimum: 0, maximum: 1000) else 26 }
	rarity_left :=		{ rarity_right() - rarity_size() }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" then clamp(split.0, minimum: -300,	maximum: 400) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" then clamp(split.1, minimum: -300,	maximum: 600) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" then clamp(split.2, minimum: 0,		maximum: 600) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" then clamp(split.3, minimum: 0,		maximum: 800) else 0 }
	
	split_comma := split_text@(match: " *, *")
	
	un_png := replace@(match:".png", replace: "")
	
	get_alpha :=
	{
		alpha_value :=	if input == "" then default
						else to_number(input) or else default
		if alpha_value < 0 then 0.0
		else if alpha_value <= 100 then alpha_value/100.0
		else 1.0
	}
	
	clamp :=
	{
		number := to_number(input)
		if number < minimum then minimum
		else if number > maximum then maximum
		else number
	}
	
	crop_safe :=
	{
		if		offset_x < 0
			or	offset_y < 0
			or	width < 1
			or	height < 1
			or	offset_x + width > 375
			or	offset_y + height > 523
		then ""
		else crop(input, offset_x: offset_x, offset_y: offset_y, width: width, height: height)
	}
	
	font_size := { if styling.text_font_size == "" then 13 else to_number(styling.text_font_size) or else 13 }
	
	abilities_count := { to_int(styling.number_of_textboxes) }
	
	chapter_move :=		{ split := split_comma(styling.move_chapter_icons); if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:700, minimum:-700) else 0 }
	separator_move :=	{ split := split_comma(styling.move_separators); if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:500, minimum:-500) else 0 }
	textbox_move :=		{ split := split_comma(styling.move_textbox_bottoms); if length(split) > input-1 and split[input-1] != "" and split[input-1] != "-" then clamp(split[input-1], maximum:500, minimum:-500) else 0 }
	
	chapter_indexes :=
	{
		snaps := if styling.snap_chapter_to_box == "" then [1,2,3,4,5,6,7] else split_comma(styling.snap_chapter_to_box)
		snaps_count := length(snaps)
		for c from 0 to 6 do
		(
			if c >= snaps_count then [-1]
			else
			(
				index := (to_int(trim(snaps[c])) or else -1) - 1
				if index > active_count or index < 0 then [-1]
				else [index]
			)
		)
	}
	
	textbox_heights :=
	{
		###force proper initialization of card_style values
		hack_to_force_update := card_style.level_1_text.content_width
		
		active_count := abilities_count() - 1
		
		total_max_possible_height := 278
		
		chapter_icon_height := 33
		chapter_icon_spacing := 5
		chapter_icon_spacing_importance := (if styling.chapter_spacing_percentage == "" then 70 else clamp(styling.chapter_spacing_percentage or else 70, minimum: 0, maximum: 100)) / 100
		chapter_indexes := chapter_indexes(active_count: active_count)
		chaptertrain_0_count := 0
		chaptertrain_1_count := 0
		chaptertrain_2_count := 0
		chaptertrain_3_count := 0
		chaptertrain_4_count := 0
		chaptertrain_5_count := 0
		chaptertrain_6_count := 0
		for c from 0 to 6 do
		(
			if		chapter_indexes[c] == -1 then	(0)
			else if	chapter_indexes[c] == 0 then	(chaptertrain_0_count := chaptertrain_0_count + 1)
			else if	chapter_indexes[c] == 1 then	(chaptertrain_1_count := chaptertrain_1_count + 1)
			else if	chapter_indexes[c] == 2 then	(chaptertrain_2_count := chaptertrain_2_count + 1)
			else if	chapter_indexes[c] == 3 then	(chaptertrain_3_count := chaptertrain_3_count + 1)
			else if	chapter_indexes[c] == 4 then	(chaptertrain_4_count := chaptertrain_4_count + 1)
			else if	chapter_indexes[c] == 5 then	(chaptertrain_5_count := chaptertrain_5_count + 1)
			else									(chaptertrain_6_count := chaptertrain_6_count + 1)
		)
		chaptertrain_counts_per_textbox := [chaptertrain_0_count, chaptertrain_1_count, chaptertrain_2_count, chaptertrain_3_count, chaptertrain_4_count, chaptertrain_5_count, chaptertrain_6_count]
		chaptertrain_desired_heights := for x from 0 to active_count do [chaptertrain_counts_per_textbox[x] * (chapter_icon_height + chapter_icon_spacing)]
		
		line_height := 1.555 * font_size()
		hard_line_height := line_height * card_style.level_1_text.line_height_hard
		soft_line_height := line_height * card_style.level_1_text.line_height_soft
		last_line_height := line_height * 1.222 / 1.555
		content_line_counts := for x from 0 to active_count do [card_style["level_" + (x+1) + "_text"].content_lines]
		hard_line_counts := for x from 0 to active_count do [length(card_style["level_" + (x+1) + "_text"].layout.paragraphs)-1]
		soft_line_counts := for x from 0 to active_count do [content_line_counts[x] - hard_line_counts[x] - 1]
		text_desired_heights := for x from 0 to active_count do [hard_line_counts[x] * hard_line_height + soft_line_counts[x] * soft_line_height + last_line_height]
		
		textbox_desired_heights := for x from 0 to active_count do [max(text_desired_heights[x], chapter_icon_spacing_importance * chaptertrain_desired_heights[x])]
		
		total_desired_height := for x from 0 to active_count do textbox_desired_heights[x]
		
		missing := ( total_desired_height - total_max_possible_height ) / ( active_count + 1 )
		factor := total_max_possible_height / total_desired_height
		
		###when resizing, always make small textboxes as big as possible, to make a more balanced looking card
		textbox_effective_heights :=	if missing <= 0 then	(for x from 0 to active_count do [textbox_desired_heights[x] - missing])	#when increasing size, add equally to each textbox
										else					(for x from 0 to active_count do [textbox_desired_heights[x] * factor])		#when decreasing size, do it in percentage, taking away more from big textboxes
		
		#trace("chapter_indexes "							+ (for c from 0 to 6 do chapter_indexes[c] + " "))
		#trace("chaptertrain_counts_per_textbox "			+ (for x from 0 to 6 do chaptertrain_counts_per_textbox[x] + " "))
		#trace("chaptertrain_desired_heights "				+ (for x from 0 to active_count do chaptertrain_desired_heights[x] + " "))
		#trace("content_line_counts "						+ (for x from 0 to active_count do content_line_counts[x] + " "))
		#trace("hard_line_counts "							+ (for x from 0 to active_count do hard_line_counts[x] + " "))
		#trace("soft_line_counts "							+ (for x from 0 to active_count do soft_line_counts[x] + " "))
		#trace("text_desired_heights "						+ (for x from 0 to active_count do text_desired_heights[x] + " "))
		#trace("textbox_desired_heights "					+ (for x from 0 to active_count do textbox_desired_heights[x] + " "))
		#trace("textbox_effective_heights "					+ (for x from 0 to active_count do textbox_effective_heights[x] + " "))
		#trace("card_style.level_1_text.width "				+ card_style.level_1_text.width)
		#trace("card_style.level_1_text.content_width "		+ card_style.level_1_text.content_width)
		#trace("card_style.level_1_text.content_height "		+ card_style.level_1_text.content_height)
		
		textbox_effective_heights
	}
	
	chapter_info :=
	{
		chapter_indexes := chapter_indexes(active_count: abilities_count() - 1);
		index := chapter_indexes[input]
		if index == -1 then [-1,-1,-1]
		else
		(
			subindex :=	if input == 0 then 0
						else (for c from 0 to (input-1) do (if chapter_indexes[c] == index then 1 else 0))
			count :=	subindex + 1 + (for c from (input+1) to 6 do (if chapter_indexes[c] == index then 1 else 0))
			[index, subindex, count]
		)
	}
	
	chapter_top :=
	{
		hack_to_force_update := card_style.level_1_text.content_width
		
		chapter_info := chapter_info(input)
		if chapter_info[0] == -1 then 1200
		else
		(
			index := chapter_info[0]
			subindex := chapter_info[1]
			count := chapter_info[2]
			chapter_icon_height := 33
			chapter_icon_spacing := 5
			desired_chapter_height := count * chapter_icon_height																										###how much total space do the chapter icons want
			desired_spacing := (count-1) * chapter_icon_spacing																											###how much total space do the gaps between chapters want
			desired_height := desired_chapter_height + desired_spacing																									###how much total space do the chapters and gaps between them want
			textbox_height := card_style["level_" + (index+1) + "_text"].height																							###how much space is does the textbox offer
			missing_height := desired_height - textbox_height																											###how much space is missing from the textbox
			effective_spacing := desired_spacing - max(missing_height, 0)																								###how much total space do the gaps between chapters actually have
			effective_spacing := max(effective_spacing, (count-1) * (chapter_icon_spacing - chapter_icon_height))														###chapters must always be at least chapter_icon_spacing pixels below the previous one
			effective_spacing_per_chapter := effective_spacing / max(count-1,1)																							###how much space does each gap have (can be negative, chapters will then overlap)
			effective_height := desired_chapter_height + effective_spacing																								###how much total space do the chapters and gaps between and around them want
			offset := (textbox_height - effective_height)/2
			top := card_style["level_" + (index+1) + "_text"].top + offset + subindex * (chapter_icon_height + effective_spacing_per_chapter)
			
			#trace("desired_chapter_height "			+ desired_chapter_height)
			#trace("desired_spacing "				+ desired_spacing)
			#trace("desired_height "					+ desired_height)
			#trace("textbox_height "					+ textbox_height)
			#trace("missing_height "					+ missing_height)
			#trace("effective_spacing "				+ effective_spacing)
			#trace("effective_spacing_per_chapter "	+ effective_spacing_per_chapter)
			#trace("effective_height "				+ effective_height)
			#trace("offset "							+ offset)
			#trace("top "							+ top)
			
			top
		)
	}
	
	chapter_image :=
	{
		if contains(styling.custom_chapter_icons, match: ".png") then (un_png(styling.custom_chapter_icons) + "_" + input + ".png")
		else "chapter/chapter_" + input + ".png"
	}


############################################################## Set info fields

set info style:
	symbol:
		variation:
			name:				invertedcommon
			border radius:		0.10
			fill type:			solid
			fill color:			rgb(255,255,255)
			border color:		rgb(0,0,0)


############################################################## Extra style options

styling field:
	type:			text
	name:			text font size
	description:	Sets the font size of ability textboxes. MUST BE CHANGED MANUALLY IF THERE IS NOT ENOUGH ROOM ON THE CARD. Default is 13.
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no
styling field:
	type:			text
	name:			art filter opacity percentage
	description:	Set the opacity percentage for the old paper illustration filter. Opaque is 100, transparent is 0, default is 80.
styling field:
	type:			text
	name:			shrink name text
	description:	Shrinks name text X pixels.
styling field:
	type:			text
	name:			shrink type text
	description:	Shrinks type text X pixels.
styling field:
	type:			choice
	name:			number of textboxes
	description:	Number of textboxes for chapters and passives. MODIFY CONTENT OF TEXTBOXES IF THIS HAS TROUBLE UPDATING AFTER BEING CHANGED.
	choice:			1
	choice:			2
	choice:			3
	choice:			4
	choice:			5
	choice:			6
	choice:			7
	initial:		3
styling field:
	type:			text
	name:			snap chapter to box
	description:	Sets the chapter icons to the given textbox. For example "1,1,2" puts chapters I and II on Ability 1, and chapter III on Ability 2. Max 7 chapters.
styling field:
	type:			text
	name:			chapter spacing percentage
	description:	Determines the behavior of chapter icons when there is not enough space. 0 clumps them together. 100 spreads them apart as much as possible. Default is 70.
styling field:
	type:			text
	name:			move chapter icons
	description:	Moves chapter icons down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6,7"
styling field:
	type:			text
	name:			custom chapter icons
	description:	The file path (starting from the data folder) of '.png' images used for chapter icons. Dimensions can be anything, but native is 51x57. Write /PATH/NAME.png here. Save images as /PATH/NAME_1.png, /PATH/NAME_2.png, etc...
styling field:
	type:			text
	name:			move separators
	description:	Moves the gray lines separating abilities down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6"
styling field:
	type:			text
	name:			move textbox bottoms
	description:	Moves the bottom of each textbox down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6,7"
styling field:
	type:			text
	name:			default reminder
	description:	Change the reminder text that is generated for new cards. RELOAD DATA IF THIS DOES NOT SHOW UP. Use [number of chapters] to stand in dynamically for the number of chapters.
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			gold name and type
	description:	Tint the nameline and typeline gold?
	choice:			yes
	choice:			no
	initial:		no
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps?
	choice:			yes, all foil
	choice:			yes, un/commons not foil
	choice:			only rares and mythics
	choice:			no
	initial:		yes, un/commons not foil
styling field:
	type:			boolean
	name:			color indicator dot
	description:	Use a dot in the typeline to indicate card color?
	initial:		no
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Should the common rarity symbol be inverted, like in Coldsnap?
	initial:		no
styling field:
	type:			text
	name:			alt rarity color
	description:	Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:..." 1 and 2 are fill color, 3 and 4 border color
styling field:
	type:			text
	name:			rarity coordinates
	description:	The coordinates for the set symbol, formatted as "right,top,size". Default is 343,443,26.
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			choice
	name:			corners
	description:	What should the corners of the card look like?
	choice:			rounded and antialiased
	choice:			rounded
	choice:			none
	initial:		rounded and antialiased
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text of the front of the card.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			boolean
	name:			use ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	What tap and untap symbols should be used on cards?
	choice:			modern
	choice:			old
	choice:			diagonal T
	initial:		modern
styling field:
	type:			package choice
	name:			casting cost mana symbols
	description:	Symbols used in the casting cost.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-large.mse-symbol-font
styling field:
	type:			package choice
	name:			text box mana symbols
	description:	Symbols used in the rule text and flavor text.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			text
	name:			name font
	description:	Font used for the name on the front of the card. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling field:
	type:			text
	name:			text font
	description:	Font used for the rule text. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling field:
	type:			text
	name:			text italic font
	description:	Font used for the flavor text and reminder texts. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling style:
	use guild mana symbols:
		choice images:
			yes:				/magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:					/magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style:	both
		choice images:
			modern:				/magic-mana-large.mse-symbol-font/mana_t.png
			old:				/magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T:			/magic-mana-large.mse-symbol-font/mana_t_older.png
	inverted common symbol:
		choice images:
			no:					{ symbol_variation(symbol: set.symbol, variation: "common") }
			yes:				{ symbol_variation(symbol: set.symbol, variation: "invertedcommon") }


############################################################## Card fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top :				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		radius:				31
		z index:			100
		mask:				border_mask.png
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			200
		render style:		image
		popup style:		in place
		image:				{ card_background() }
		mask:				card_mask.png
	############################# Name line
	name:
		left:				32
		top:				27
		right:				{ 343 - (if card_style.casting_cost.content_width == 0 then 0 else card_style.casting_cost.content_width + 6) }
		height:				26
		z index:			1000
		alignment:			middle left shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 15 - shrink_name() }
			color:				black
	casting cost:
		right:				347
		top:				28
		width:				{ max(35, card_style.casting_cost.content_width + 6) }
		height:				26
		z index:			1010
		alignment:			middle right
		always symbol:		true
		font:
			name:				MPlantin
			size:				15
			color:				black
		symbol font:
			name:				{ styling.casting_cost_mana_symbols }
			size:				15
			#alignment:			middle right
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0 else 185 }
		top:				{ if styling.stretch_art_to_whole_card then 0 else 58 }
		width:				{ if styling.stretch_art_to_whole_card then 375 else 162 }
		height:				{ if styling.stretch_art_to_whole_card then 523 else 382 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			2000
	############################# Card type
	indicator:
		left:				31
		top:				448
		width:				17
		height:				17
		z index:			1000
		render style:		image
		visible:			{ has_identity() }
		image:				{ card_identity() }
	type:
		left:				{ if has_identity() then 53 else 32 }
		top:				443
		right:				{ if set.shorten_types_for_rarity then clamp(rarity_left()-6, minimum: 187, maximum: 343) else 343 }
		height:				26
		z index:			1010
		alignment:			middle left shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 13 - shrink_type() }
			color:				black
			separator color:	red
	rarity:
		right:				{ rarity_right() }
		top:				{ rarity_top() }
		width:				{ rarity_size() }
		height:				{ rarity_size() }
		z index:			1000
		alignment:			middle right
		render style:		image
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	chapter text:
		left:				33
		top:				71
		width:				150
		height:				74
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				13
			scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				13
			scale down to:		7
		line height hard:	{ if is_modal(card.chapter_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.chapter_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 1 text:
		left:				50
		top:				157
		width:				133
		height:				{ textbox_heights()[0] + textbox_move(1) }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_1_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_1_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 2 text:
		left:				50
		top:				{ card_style.level_1_text.bottom }
		width:				133
		height:				{ if abilities_count() > 1 then textbox_heights()[1] + textbox_move(2) else 0 }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_2_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_2_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 3 text:
		left:				50
		top:				{ card_style.level_2_text.bottom }
		width:				133
		height:				{ if abilities_count() > 2 then textbox_heights()[2] + textbox_move(3) else 0 }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_3_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_3_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 4 text:
		left:				50
		top:				{ card_style.level_3_text.bottom }
		width:				133
		height:				{ if abilities_count() > 3 then textbox_heights()[3] + textbox_move(4) else 0 }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_4_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_4_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 5 text:
		left:				50
		top:				{ card_style.level_4_text.bottom }
		width:				133
		height:				{ if abilities_count() > 4 then textbox_heights()[4] + textbox_move(5) else 0 }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_5_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_5_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 6 text:
		left:				50
		top:				{ card_style.level_5_text.bottom }
		width:				133
		height:				{ if abilities_count() > 5 then textbox_heights()[5] + textbox_move(6) else 0 }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_6_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_6_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	level 7 text:
		left:				50
		top:				{ card_style.level_6_text.bottom }
		width:				133
		height:				{ if abilities_count() > 6 then textbox_heights()[6] + textbox_move(7) else 0 }
		z index:			1000
		alignment:			middle left
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ font_size() }
			#scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ font_size() }
		line height hard:	{ if is_modal(card.level_7_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.level_7_text) then 1.0 else 1.3 }
		line height line max:	1.6
		line height soft max:	0.9
	watermark:
		left:				25
		top:				183
		width:				179
		height:				134
		z index:			700
		render style:		image
		popup style:		in place
		alignment:			middle center
		include file:		/magic-watermarks.mse-include/watermarks
	############################# PT
	pt:
		left:				291
		top:				407
		width:				47
		height:				23
		z index:			1020
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				15
			color:				black
			separator color:	red
	############################# Copyright stuff
	card stamp:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			820
		render style:		image
		popup style:		in place
		image:				{ card_stampholofoil() }
		mask:				stamp_mask.png
	set code:
		left:				24
		top:				499
		width:				40
		height:				10
		z index:			1030
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 38 else 42 + card_style.set_code.content_width }
		top:				498.5
		width:				200
		height:				10
		z index:			1030
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				7.25
			color:				{ styling.copyright_text_color }
	copyright:
		right:				351
		top:				494
		width:				{ if set.automatic_copyright then 0 else 140 }
		height:				10
		z index:			1030
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields

extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				choice
	name:				flavor bar
	editable:			false
	save value:			false
	show statistics:	false
	choice:				flavor bar
extra card field:
	type:				choice
	name:				pt box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				gold bars
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				choice
	name:				card stamp background
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card stamp background
extra card field:
	type:				color
	name:				corners
	script:				rgb(255, 255, 255)
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				chapter 1
	editable:			false
	save value:			false
	choice:				chapter 1
extra card field:
	type:				choice
	name:				chapter 2
	editable:			false
	save value:			false
	choice:				chapter 2
extra card field:
	type:				choice
	name:				chapter 3
	editable:			false
	save value:			false
	choice:				chapter 3
extra card field:
	type:				choice
	name:				chapter 4
	editable:			false
	save value:			false
	choice:				chapter 4
extra card field:
	type:				choice
	name:				chapter 5
	editable:			false
	save value:			false
	choice:				chapter 5
extra card field:
	type:				choice
	name:				chapter 6
	editable:			false
	save value:			false
	choice:				chapter 6
extra card field:
	type:				choice
	name:				chapter 7
	editable:			false
	save value:			false
	choice:				chapter 7
extra card field:
	type:				choice
	name:				textbox stripe separator 1
	editable:			false
	save value:			false
	choice:				textbox stripe separator 1
extra card field:
	type:				choice
	name:				textbox stripe separator 2
	editable:			false
	save value:			false
	choice:				textbox stripe separator 2
extra card field:
	type:				choice
	name:				textbox stripe separator 3
	editable:			false
	save value:			false
	choice:				textbox stripe separator 3
extra card field:
	type:				choice
	name:				textbox stripe separator 4
	editable:			false
	save value:			false
	choice:				textbox stripe separator 4
extra card field:
	type:				choice
	name:				textbox stripe separator 5
	editable:			false
	save value:			false
	choice:				textbox stripe separator 5
extra card field:
	type:				choice
	name:				textbox stripe separator 6
	editable:			false
	save value:			false
	choice:				textbox stripe separator 6
extra card field:
	type:				choice
	name:				hybrid bands
	editable:			false
	save value:			false
	choice:				hybrid bands
extra card field:
	type:				choice
	name:				art filter
	editable:			false
	save value:			false
	choice:				art filter
extra card style:
	card code:
		left:				24
		top:				489
		width:				120
		height:				10
		z index:			1030
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				351
		top:				494
		width:				{ if set.automatic_copyright then 140 else 0 }
		height:				10
		z index:			1030
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 25 else 29 + card_style.set_code.content_width }
		top:				501
		width:				12
		height:				7
		z index:			1030
		render style:		image
		image:				{ recolor_image("artist_arrow.png", color: styling.copyright_text_color) }
	flavor bar:
		left:				17
		top:				154
		width:				166
		height:				3
		z index:			710
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: 154, width: 166, height: 3) }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			820
		visible:			{ card.pt != "" }
		render style:		image
		image:				{ card_ptbox() }
	crown:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			310
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	gold bars:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			310
		visible:			{ is_gold_barred() }
		render style:		image
		image:				gold_bars.png
	foil layer:
		left:				0
		top :				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
	card stamp background:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			600
		render style:		image
		image:				{ if is_stamped() then card_stamprim() else card_nonstamprim() }
	corners:
		left:				0
		top :				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			4000
		visible:			{ styling.corners != "none" }
		mask:				{ if styling.corners == "rounded and antialiased" then "corners_rounded_antialiased_mask.png" else "corners_rounded_mask.png" }
	chapter 1:
		left:				15
		top:				{ chapter_top(0) + chapter_move(1) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(1) }
	chapter 2:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 1) or length(split_comma(styling.snap_chapter_to_box)) > 1 }
		left:				15
		top:				{ chapter_top(1) + chapter_move(2) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(2) }
	chapter 3:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 2) or length(split_comma(styling.snap_chapter_to_box)) > 2 }
		left:				15
		top:				{ chapter_top(2) + chapter_move(3) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(3) }
	chapter 4:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 3) or length(split_comma(styling.snap_chapter_to_box)) > 3 }
		left:				15
		top:				{ chapter_top(3) + chapter_move(4) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(4) }
	chapter 5:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 4) or length(split_comma(styling.snap_chapter_to_box)) > 4 }
		left:				15
		top:				{ chapter_top(4) + chapter_move(5) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(5) }
	chapter 6:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 5) or length(split_comma(styling.snap_chapter_to_box)) > 5 }
		left:				15
		top:				{ chapter_top(5) + chapter_move(6) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(6) }
	chapter 7:
		visible:			{ (styling.snap_chapter_to_box == "" and abilities_count() > 6) or length(split_comma(styling.snap_chapter_to_box)) > 6 }
		left:				15
		top:				{ chapter_top(6) + chapter_move(7) }
		width:				29
		height:				33
		z index:			810
		render style:		image
		image:				{ chapter_image(7) }
	textbox stripe separator 1:
		left:				17
		top:				{ hack_to_force_update := card_style.level_2_text.content_width; card_style.level_2_text.top - 1 + separator_move(1) }
		width:				166
		height:				3
		z index:			710
		visible:			{ abilities_count() > 1 }
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: card_style.level_2_text.top - 1 + separator_move(1), width: 166, height: 3) }
	textbox stripe separator 2:
		left:				17
		top:				{ hack_to_force_update := card_style.level_3_text.content_width; card_style.level_3_text.top - 1 + separator_move(2) }
		width:				166
		height:				3
		z index:			710
		visible:			{ abilities_count() > 2 }
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: card_style.level_3_text.top - 1 + separator_move(2), width: 166, height: 3) }
	textbox stripe separator 3:
		left:				17
		top:				{ hack_to_force_update := card_style.level_4_text.content_width; card_style.level_4_text.top - 1 + separator_move(3) }
		width:				166
		height:				3
		z index:			710
		visible:			{ abilities_count() > 3 }
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: card_style.level_4_text.top - 1 + separator_move(3), width: 166, height: 3) }
	textbox stripe separator 4:
		left:				17
		top:				{ hack_to_force_update := card_style.level_5_text.content_width; card_style.level_5_text.top - 1 + separator_move(4) }
		width:				166
		height:				3
		z index:			710
		visible:			{ abilities_count() > 4 }
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: card_style.level_5_text.top - 1 + separator_move(4), width: 166, height: 3) }
	textbox stripe separator 5:
		left:				17
		top:				{ hack_to_force_update := card_style.level_6_text.content_width; card_style.level_6_text.top - 1 + separator_move(5) }
		width:				166
		height:				3
		z index:			710
		visible:			{ abilities_count() > 5 }
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: card_style.level_6_text.top - 1 + separator_move(5), width: 166, height: 3) }
	textbox stripe separator 6:
		left:				17
		top:				{ hack_to_force_update := card_style.level_7_text.content_width; card_style.level_7_text.top - 1 + separator_move(6) }
		width:				166
		height:				3
		z index:			710
		visible:			{ abilities_count() > 6 }
		render style:		image
		image:				flavor_bar.png
		mask:				{ crop_safe("bookmark_mask.png", offset_x: 17, offset_y: card_style.level_7_text.top - 1 + separator_move(6), width: 166, height: 3) }
	hybrid bands:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			210
		visible:
			script:
				count := length(pure_colors(card.card_color))
				artifact := contains(card.card_color, match: "artifact")
				hybrid := contains(card.card_color, match: "hybrid")
				contains(card.card_color, match: "horizontal") and
				(
					(count == 2 and not	(artifact and hybrid))
					or
					(count == 1 and		(artifact and hybrid))
				)
		render style:		image
		image:				hybrid_bands.png
	art filter:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			10
		render style:		image
		image:				{ set_alpha("art_filter.png", alpha: get_alpha(styling.art_filter_opacity_percentage, default: 80)) }
