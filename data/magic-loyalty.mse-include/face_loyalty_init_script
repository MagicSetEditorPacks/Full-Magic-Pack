a_left :=						{ face_coordinates_array(loyalty_face())[0] }
a_top :=						{ face_coordinates_array(loyalty_face())[1] }
a_bottom :=						{ face_coordinates_array(loyalty_face())[1] + face_coordinates_array(loyalty_face())[3] }
a_width :=						{ face_coordinates_array(loyalty_face())[2] }
a_height :=						{ face_coordinates_array(loyalty_face())[3] }
r_width :=						{ face_coordinates_array(loyalty_face())[2]/375 }
r_height :=						{ face_coordinates_array(loyalty_face())[3]/523 }

to_744_width :=					{ input/a_width()*744 }
to_744_height :=				{ input/a_height()*1039 }

loyalty_left :=					{ round_near((if contains(loyalty_box_field(input), match: "defense") then 323 else 313) * r_width() + a_left() + loyalty_offset_left() - loyalty_offset_width()) }
loyalty_top :=					{ round_near(472 * r_height() + a_top() + loyalty_offset_top() - loyalty_offset_height()) }
loyalty_width :=				{ (if contains(loyalty_box_field(input), match: "defense") then 20 else 40) * r_width() + 2*loyalty_offset_width() }
loyalty_height :=				{ if loyalty_face() == input then 21 * r_height() + 2*loyalty_offset_height() else 0 }
loyalty_font_size :=			{ (if contains(loyalty_box_field(input), match: "defense") then 15 else 17) * (21 * r_height() + 2*loyalty_offset_height())/21 }

loyalty_box_left :=				{ 301 * r_width() + a_left() + loyalty_offset_left() - loyalty_offset_width() }
loyalty_box_top :=				{ 457 * r_height() + a_top() + loyalty_offset_top() - loyalty_offset_height() }
loyalty_box_width :=			{ 64 * r_width() + 2*loyalty_offset_width() }
loyalty_box_height :=			{ if loyalty_face() == input then 52.5 * r_height() + 2*loyalty_offset_height() else 0 }

loyalty_cost_left :=			{ round_near(ability_left() - 24 * r_width() + loyalty_cost_offset_left() - loyalty_cost_offset_width()) }
loyalty_cost_top :=				{ round_near(ability_center(input) - loyalty_cost_r_height()/2 + loyalty_cost_r_correction(input) + loyalty_cost_move(input) + loyalty_cost_offset_top() - loyalty_cost_offset_height()) }
loyalty_cost_width :=			{ loyalty_cost_r_width() + 2*loyalty_cost_offset_width() }
loyalty_cost_height :=			{ if abilities_count() >= input then loyalty_cost_r_height() + 2*loyalty_cost_offset_height() else 0 }
loyalty_cost_r_width :=			{ 24 * r_width() }
loyalty_cost_r_height :=		{ 20 * r_height() }
loyalty_cost_r_correction :=
{
	cost := card["loyalty_cost_box_" + input]
	if		contains(cost, match: "+") or contains(cost, match: "anti ult") then	-1 * r_height()
	else if	contains(cost, match: "-") or contains(cost, match: "ult")		then	-5 * r_height()
	else																			-3 * r_height()
}
loyalty_cost_font_size :=		{ 13 * (loyalty_cost_r_height() + 2*loyalty_cost_offset_height())/20 }

loyalty_cost_box_left :=		{ ability_left() - 36 * r_width() + loyalty_cost_offset_left() - loyalty_cost_offset_width() }
loyalty_cost_box_top :=			{ ability_center(input) - loyalty_cost_box_r_height()/2 + loyalty_cost_move(input) + loyalty_cost_offset_top() - loyalty_cost_offset_height() }
loyalty_cost_box_width :=		{ loyalty_cost_box_r_width() + 2*loyalty_cost_offset_width() }
loyalty_cost_box_height :=		{ if abilities_count() >= input then loyalty_cost_box_r_height() + 2*loyalty_cost_offset_height() else 0 }
loyalty_cost_box_r_width :=		{ 47 * r_width() }
loyalty_cost_box_r_height :=	{ 36 * r_height() }

loyalty_colon_left :=			{ round_near(ability_left() + 9 * r_width() + loyalty_cost_offset_left() + loyalty_cost_offset_width()) }
loyalty_colon_top :=			{ round_near(ability_center(input) - loyalty_colon_r_height()/2 + loyalty_colon_r_correction(input) + loyalty_cost_move(input) + loyalty_cost_offset_top() - loyalty_cost_offset_height()) }
loyalty_colon_width :=			{ loyalty_colon_r_width() }
loyalty_colon_height :=			{ loyalty_colon_r_height() }
loyalty_colon_r_width :=		{ 5 * r_width() }
loyalty_colon_r_height :=		{ 21 * r_height() }
loyalty_colon_r_correction :=	{ -3 * r_height() }
loyalty_colon_font_size :=		{ 13 * (loyalty_colon_r_height() + 2*loyalty_cost_offset_height())/21 }

loyalty_stripe_separator_top :=		{ (ability_bottom(input) + ability_top(input+1) - loyalty_stripe_separator_height())/2 + loyalty_separator_move(input) }
loyalty_stripe_separator_height :=	{ 8.06 * r_height() }

loyalty_cost_move :=
{
	text := pull_comma_array(styling.move_loyalty_costs, cell:input-1, end:0, default:0)
	if text == "-" then 0 else clamp(text, minimum: -300, maximum: 300)
}
loyalty_separator_move :=
{
	text := pull_comma_array(styling.move_separators, cell:input-1, end:0, default:0)
	if text == "-" then 0 else clamp(text, minimum: -300, maximum: 300)
}

level_is_active :=
{
	if		input == "lv8" then	abilities_count() >= 8
	else if	input == "lv7" then	abilities_count() >= 7
	else if	input == "lv6" then	abilities_count() >= 6
	else if	input == "lv5" then	abilities_count() >= 5
	else if	input == "lv4" then	abilities_count() >= 4
	else if	input == "lv3" then	abilities_count() >= 3
	else if	input == "lv2" then	abilities_count() >= 2
	else						true
}
abilities_count :=
{
	to_int(styling.number_of_textboxes)
}

ability_left :=
{
	field := if loyalty_text_field() <= 1 then card_style.text else card_style["text_" + loyalty_text_field()]
	if field.left or else 0 > 0
	then field.left
	else 500 * r_width()
}
ability_top :=
{
	field := if loyalty_text_field() <= 1 then card_style.text else card_style["text_" + loyalty_text_field()]
	if field.layout.blocks[input-1].bottom or else 0 > 0
	then field.top + field.layout.blocks[input-1].top
	else 600 * r_height()
}
ability_center :=
{
	field := if loyalty_text_field() <= 1 then card_style.text else card_style["text_" + loyalty_text_field()]
	if field.layout.blocks[input-1].bottom or else 0 > 0
	then field.top + field.layout.blocks[input-1].middle
	else 600 * r_height()
}
ability_bottom :=
{
	field := if loyalty_text_field() <= 1 then card_style.text else card_style["text_" + loyalty_text_field()]
	if field.layout.blocks[input-1].bottom or else 0 > 0
	then field.top + field.layout.blocks[input-1].bottom
	else 600 * r_height()
}

loyalty_stripe_separator_mask :=
{
	mask := loyalty_textbox_mask()
	if		mask == "/magic-loyalty.mse-include/default_textbox_stamp_mask.png"
		or	mask == "/magic-loyalty.mse-include/default_textbox_mask.png" then
	(
		crop_safe(
			mask,
			offset_x: 0,
			offset_y: to_744_height(loyalty_stripe_separator_top(input) - a_top()),
			width: 744,
			height: to_744_height(loyalty_stripe_separator_height()),
			max_x: 744,
			max_y: 1039
		)
	)
	else
	(
		crop_safe(
			mask,
			offset_x: 0,
			offset_y: loyalty_stripe_separator_top(input) - a_top(),
			width: a_width(),
			height: loyalty_stripe_separator_height(),
			max_x: a_width(),
			max_y: a_height()
		)
	)
}
loyalty_stripe_mask :=
{
	mask := loyalty_textbox_mask()
	if		mask == "/magic-loyalty.mse-include/default_textbox_stamp_mask.png"
		or	mask == "/magic-loyalty.mse-include/default_textbox_mask.png" then
	(
		top :=		if input > 1					then loyalty_stripe_separator_top(2*input-2) + loyalty_stripe_separator_height()	else a_top()
		height := (if abilities_count() >= 2*input	then loyalty_stripe_separator_top(2*input-1)										else a_bottom()) - top
		top := to_744_height(top - a_top())
		height := to_744_height(height)
		crop_safe(
			mask,
			offset_x: 0,
			offset_y: top,
			width: 744,
			height: height,
			max_x: 744,
			max_y: 1039
		)
	)
	else
	(
		top :=		if input > 1					then loyalty_stripe_separator_top(2*input-2) + loyalty_stripe_separator_height()	else a_top()
		height := (if abilities_count() >= 2*input	then loyalty_stripe_separator_top(2*input-1)										else a_bottom()) - top
		top := top - a_top()
		crop_safe(
			mask,
			offset_x: 0,
			offset_y: top,
			width: a_width(),
			height: height,
			max_x: a_width(),
			max_y: a_height()
		)
	)
}
loyalty_stripe_separator_image :=
{
	set_alpha(
		recolor_image(
			"/magic-loyalty.mse-include/stripe_" + (if (input mod 2) == 0 then "top" else "bottom") + ".png",
			color: styling.stripes_color
		),
		alpha: get_alpha_percentage(
			styling.stripes_opacity_percentage,
			default: 40
		)
	)
}
loyalty_stripe_image :=
{
	set_alpha(
		recolor_image(
			"/magic-loyalty.mse-include/color.png",
			color: styling.stripes_color
		),
		alpha: get_alpha_percentage(
			styling.stripes_opacity_percentage,
			default: 40
		)
	)
}

mainframe_walker := { loyalty_text_field() <= 1 }
mainframe_walkerb := { loyalty_text_field() == 2 }
mainframe_walkerc := { loyalty_text_field() == 3 }
mainframe_walkerd := { loyalty_text_field() == 4 }
mainframe_walker_text_script :=
{
	count := abilities_count()
	if		count == 8 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text, separator7: "<line>\n</line>", field8: card.level_8_text)
	else if	count == 7 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	else if	count == 6 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
	else if	count == 5 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
	else if	count == 4 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
	else if	count == 3 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
	else if	count == 2 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
	else 					forward_editor(field: card.level_1_text)
}
mainframe_walker_text_scriptb :=
{
	count := abilities_count()
	if		count == 8 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text, separator7: "<line>\n</line>", field8: card.level_8_text)
	else if	count == 7 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	else if	count == 6 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
	else if	count == 5 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
	else if	count == 4 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
	else if	count == 3 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
	else if	count == 2 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
	else 					forward_editor(field: card.level_1_text)
}
mainframe_walker_text_scriptc :=
{
	count := abilities_count()
	if		count == 8 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text, separator7: "<line>\n</line>", field8: card.level_8_text)
	else if	count == 7 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	else if	count == 6 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
	else if	count == 5 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
	else if	count == 4 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
	else if	count == 3 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
	else if	count == 2 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
	else 					forward_editor(field: card.level_1_text)
}
mainframe_walker_text_scriptd :=
{
	count := abilities_count()
	if		count == 8 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text, separator7: "<line>\n</line>", field8: card.level_8_text)
	else if	count == 7 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text, separator6: "<line>\n</line>", field7: card.level_7_text)
	else if	count == 6 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
	else if	count == 5 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
	else if	count == 4 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
	else if	count == 3 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
	else if	count == 2 then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
	else 					forward_editor(field: card.level_1_text)
}
margin_left :=
{
	if		(input == "lv1" and card.loyalty_cost_1 != "")
		or	(input == "lv2" and card.loyalty_cost_2 != "")
		or	(input == "lv3" and card.loyalty_cost_3 != "")
		or	(input == "lv4" and card.loyalty_cost_4 != "")
		or	(input == "lv5" and card.loyalty_cost_5 != "")
		or	(input == "lv6" and card.loyalty_cost_6 != "")
		or	(input == "lv7" and card.loyalty_cost_7 != "")
		or	(input == "lv8" and card.loyalty_cost_8 != "")
	then to_int(190 * r_width() + (loyalty_cost_offset_left() + loyalty_cost_offset_width() + loyalty_cost_offset_text_margin()) * 10)
	else 0
}
text_filter := text_filter + { apply_margins(input, name:margin_code) } + { add_spacers(input, name:margin_code) }
add_spacers :=
{
	#The 'then ""' has a zero-width space inside
	if input == "" and level_is_active(name) then "​"
	else input
}

#loyalty_textbox_background_top :=		{ 327 - move_typeline()*523/1039 }
#loyalty_textbox_background_bottom :=	{ 483 }

#chop_top :=		{ split := split_comma(styling.chop_textbox); if length(split) > 0 and split[0] != "" and split[0] != "-" then clamp(split[0], maximum:300, minimum:-300) else 0 }
#chop_bottom :=		{ split := split_comma(styling.chop_textbox); if length(split) > 1 and split[1] != "" and split[1] != "-" then clamp(split[1], maximum:300, minimum:-300) else 0 }
#chop_right :=		{ split := split_comma(styling.chop_textbox); if length(split) > 2 and split[2] != "" and split[2] != "-" then clamp(split[2], maximum:300, minimum:-300) else 0 }

#move_typeline :=	{ if styling.move_typeline != "" and styling.move_typeline != "-" then clamp(styling.move_typeline, minimum: -200, maximum: 410) else 0 }
