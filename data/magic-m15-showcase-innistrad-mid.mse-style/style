mse version:		2.0.0
game:				magic
short name:			Innistrad
full name:			Showcase
icon:				card_sample.png
position hint:		095

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-default-image.mse-include
	version:			2007-09-23
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			375
card height:		523
card dpi:			150


### blanks by GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	card_hybrid_2 :=
	{
		masked_blend(mask: "blend_card.png", dark: template(colors.0), light: template(colors.1))
	}
	horizontal_card_hybrid :=
	[
		0:	horizontal_card_hybrid[0]
		1:	horizontal_card_hybrid[1]
		2:	card_hybrid_2
		3:	horizontal_card_hybrid[3]
		4:	horizontal_card_hybrid[4]
		5:	horizontal_card_hybrid[5]
		6:	horizontal_card_hybrid[6]
		7:	horizontal_card_hybrid[7]
	]
	card_hybrid :=
	[
		radial:		card_hybrid["radial"]
		horizontal:	horizontal_card_hybrid
		overlay:	card_hybrid["overlay"]
		vertical:	card_hybrid["vertical"]
	]
	
	template_prefix		:= [card: "card/", textboxes: "textboxes/", pt: "pt/", crown: "crown/", stamp: "stamp/", identity: "/magic-identity-new.mse-include/"]
	template_suffix		:= [card: "card.png", textboxes: "textboxes.png", pt: "pt.png", crown: "crown.png", stamp: "stamp.png", identity: "identity.png"]
	template			:= { template_prefix[type] + input + template_suffix[type] }
	land_template		:= { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	
	card_background		:= { color_background(input: card.card_color, type: "card",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown			:= { color_background(input: card.card_color, type: "crown",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox			:= { color_background(input: card.card_color, type: "pt",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp			:= { color_background(input: card.card_color, type: "stamp",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_textboxes		:= { color_background(input: card.card_color, type: "textboxes",	base_hybrid: card_hybrid)		}@(offset:0 )
	
	image_left_short :=
	{
		if		styling.image_location == "portrait only"					then	32
		else if	styling.image_location == "portrait + name"					then	28
		else if	styling.image_location == "portrait + name + type"			then	28
		else if	styling.image_location == "portrait + name + type + text"	then	28
		else if	styling.image_location == "portrait + type"					then	30
		else if	styling.image_location == "portrait + type + text"			then	28
		else																		0
	}
	image_top_short :=
	{
		if		styling.image_location == "portrait only"					then	66
		else if	styling.image_location == "portrait + name"					then	28
		else if	styling.image_location == "portrait + name + type"			then	28
		else if	styling.image_location == "portrait + name + type + text"	then	28
		else if	styling.image_location == "portrait + type"					then	66
		else if	styling.image_location == "portrait + type + text"			then	66
		else																		0
	}
	image_right_short :=
	{
		if		styling.image_location == "portrait only"					then	345
		else if	styling.image_location == "portrait + name"					then	350
		else if	styling.image_location == "portrait + name + type"			then	350
		else if	styling.image_location == "portrait + name + type + text"	then	350
		else if	styling.image_location == "portrait + type"					then	347
		else if	styling.image_location == "portrait + type + text"			then	347
		else																		375
	}
	image_bottom_short :=
	{
		if		styling.image_location == "portrait only"					then	290
		else if	styling.image_location == "portrait + name"					then	290
		else if	styling.image_location == "portrait + name + type"			then	326
		else if	styling.image_location == "portrait + name + type + text"	then	483
		else if	styling.image_location == "portrait + type"					then	326
		else if	styling.image_location == "portrait + type + text"			then	483
		else																		523
	}
	
	image_left :=
	{
				if		styling.image_location == "portrait only"					then	55
				else if	styling.image_location == "portrait + name"					then	49
				else if	styling.image_location == "portrait + name + type"			then	49
				else if	styling.image_location == "portrait + name + type + text"	then	48
				else if	styling.image_location == "portrait + type"					then	52
				else if	styling.image_location == "portrait + type + text"			then	48
				else																		0
	}
	image_top :=
	{
				if		styling.image_location == "portrait only"					then	114
				else if	styling.image_location == "portrait + name"					then	49
				else if	styling.image_location == "portrait + name + type"			then	49
				else if	styling.image_location == "portrait + name + type + text"	then	49
				else if	styling.image_location == "portrait + type"					then	114
				else if	styling.image_location == "portrait + type + text"			then	114
				else																		0
	}
	image_right :=
	{
				if		styling.image_location == "portrait only"					then	594
				else if	styling.image_location == "portrait + name"					then	603
				else if	styling.image_location == "portrait + name + type"			then	603
				else if	styling.image_location == "portrait + name + type + text"	then	603
				else if	styling.image_location == "portrait + type"					then	597
				else if	styling.image_location == "portrait + type + text"			then	597
				else																		646
	}
	image_bottom :=
	{
				if		styling.image_location == "portrait only"					then	500
				else if	styling.image_location == "portrait + name"					then	500
				else if	styling.image_location == "portrait + name + type"			then	561
				else if	styling.image_location == "portrait + name + type + text"	then	832
				else if	styling.image_location == "portrait + type"					then	561
				else if	styling.image_location == "portrait + type + text"			then	832
				else																		901
	}
	
	get_alpha :=
	{
		alpha := if input == "" then default else to_number(input)
		if alpha < 0 then 0.0
		else if alpha <= 100.0 then alpha/100.0
		else 1.0
	}
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	
	mana_t :=
	{
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana		:= { styling.use_guild_mana_symbols }
	ancestral_mana	:= { styling.use_ancestral_mana_symbols }
	
	has_identity	:= { styling.color_indicator_dot }
	has_identity_2	:= { false }
	
	is_promo		:= { styling.promo }
	
	is_unsorted		:= { styling.remove_from_autocount }

	is_stamped		:= { card.card_stamp != "none" and (styling.holofoil_stamps == "yes" or (styling.holofoil_stamps == "rares and mythics" and is_rare())) }
	
	is_crowned		:= { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and contains(card.super_type, match:"Legendary")) }
	
	chop_top		:= { split := split_comma(styling.chop_rule_textbox); if length(split) > 0 and split.0 != "" then max(min(split.0,1500),-1500) else 0 }
	chop_bot		:= { split := split_comma(styling.chop_rule_textbox); if length(split) > 1 and split.1 != "" then max(min(split.1,1500),-1500) else 0 }
	
	shrink_name :=	{ if styling.shrink_name_text == "-"		then 0 else if styling.shrink_name_text != ""		then clamp(to_number(styling.shrink_name_text), minimum: -40, maximum: 13) else 0 }
	shrink_type :=	{ if styling.shrink_typeline_text == "-"	then 0 else if styling.shrink_typeline_text != ""	then clamp(to_number(styling.shrink_typeline_text), minimum: -40, maximum: 11) else 0 }
	
	use_main_rarity	:= { contains(set.mainframe_rarity_name, match: ".png") }
	
	alt_rarity := { styling.alt_rarity_color != "" }
	alt_rarity_color :=
	{
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		output
	}
	alt_symbol :=
	{
		colors := alt_rarity_color()
		symbol_variation(
			symbol:			set.symbol,
			border_radius:	colors.12,
			fill_type:		"linear gradient",
			fill_color_1:	rgb(colors.0, colors.1, colors.2),
			fill_color_2:	rgb(colors.3, colors.4, colors.5),
			border_color_1:	rgb(colors.6, colors.7, colors.8),
			border_color_2:	rgb(colors.9, colors.10, colors.11),
			center_x:		0.5,
			center_y:		0.5,
			end_x:			1,
			end_y:			1
		)
	}
	
	rarity_right	:= { split := split_comma(styling.rarity_coordinates); if length(split) > 0 and split.0 != "" then max(min(split.0,1000),0) else 340 }
	rarity_top		:= { split := split_comma(styling.rarity_coordinates); if length(split) > 1 and split.1 != "" then max(min(split.1,1500),0) else 296 }
	rarity_size		:= { split := split_comma(styling.rarity_coordinates); if length(split) > 2 and split.2 != "" then max(min(split.2,1500),0) else 26 }
	rarity_left		:= { rarity_right() - rarity_size() }
	
	popout_left		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" then max(min(split.0,1500),-500) else 0 }
	popout_top		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" then max(min(split.1,2000),-500) else 0 }
	popout_width	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" then max(min(split.2,1500),0) else 0 }
	popout_height	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" then max(min(split.3,2000),0) else 0 }
	
	split_comma	:= split_text@(match: " *, *")
	
	un_png		:= replace@(match:".png", replace: "")
	
	clamp :=
	{
		if input < minimum then minimum
		else if input > maximum then maximum
		else input
	}


############################################################## Set info fields

set info style:
	symbol:
		variation:
			name:				invertedcommon
			border radius:		0.10
			fill type:			solid
			fill color:			rgb(255,255,255)
			border color:		rgb(0,0,0)


############################################################## Extra style options

styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			choice
	name:			image location
	description:	Make the image span more or less of the card. Use this to make the image visible behing the name, type, text, or to help make popout effects.
	choice:			portrait only
	choice:			portrait + name
	choice:			portrait + name + type
	choice:			portrait + name + type + text
	choice:			portrait + type
	choice:			portrait + type + text
	choice:			whole card
	initial:		portrait + name + type + text
styling field:
	type:			text
	name:			shrink name text
	description:	Shrinks name X pixels.
styling field:
	type:			text
	name:			shrink typeline text
	description:	Shrinks type X pixels.
styling field:
	type:			text
	name:			rule text font cap
	description:	Caps the font size of the rules text and the flavor text. Default is 13.5.
styling field:
	type:			text
	name:			chop rule textbox
	description:	Formatted as "X,Y". Shrinks textbox X pixels from the top and Y from the bottom.
styling field:
	type:			choice
	name:			center rule text
	description:	When to center text (short text means only on one-line cards with no flavor text)
	choice:			always
	choice:			short text only
	choice:			never
	initial:		never
styling field:
	type:			text
	name:			nameline opacity percentage
	description:	Set the opacity percentage for the nameline. Opaque is 100, transparent is 0. Default is 70. Only active if the image can be seen behind the name.
styling field:
	type:			text
	name:			typeline opacity percentage
	description:	Set the opacity percentage for the typeline. Opaque is 100, transparent is 0. Default is 70. Only active if the image can be seen behind the type.
styling field:
	type:			text
	name:			textbox opacity percentage
	description:	Set the opacity percentage for the rules textbox. Opaque is 100, transparent is 0. Default is 80. Only active if the image can be seen behind the text.
styling field:
	type:			boolean
	name:			use ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	What tap and untap symbols should be used on cards?
	choice:			modern
	choice:			old
	choice:			diagonal T
	initial:		modern
styling field:
	type:			package choice
	name:			casting cost mana symbols
	description:	Symbols used in the casting cost.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-large.mse-symbol-font
styling field:
	type:			package choice
	name:			text box mana symbols
	description:	Symbols used in the rule text and flavor text.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards
	choice:			gold
	choice:			hybrid
	choice:			blend
	initial:		gold
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Should the common rarity symbol be inverted, like in Coldsnap?
	initial:		no
styling field:
	type:			text
	name:			alt rarity color
	description:	Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:..." 1 and 2 are fill color, 3 and 4 border color
styling field:
	type:			text
	name:			rarity coordinates
	description:	The coordinates for the set symbol, formatted as "right,top,size". Default is 340,296,26.
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		yes
styling field:
	type:			boolean
	name:			flavor bar
	description:	Use the flavor bar to separate rule text from flavor text.
	initial:		yes
styling field:
	type:			boolean
	name:			color indicator dot
	description:	Use a dot in the typeline to indicate card color?
	initial:		no
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps?
	choice:			yes
	choice:			rares and mythics
	choice:			no
	initial:		rares and mythics
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling style:
	use guild mana symbols:
		choice images:
			yes:				/magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:					/magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style:	both
		choice images:
			modern:				/magic-mana-large.mse-symbol-font/mana_t.png
			old:				/magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T:			/magic-mana-large.mse-symbol-font/mana_t_older.png
	center rule text:
		render style:	both
		choice images:
			always:				/magic.mse-game/icons/center-all-text.png
			short text only:	/magic.mse-game/icons/center-short-text.png
			never:				/magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:					{ symbol_variation(symbol: set.symbol, variation: "common") }
			yes:				{ symbol_variation(symbol: set.symbol, variation: "invertedcommon") }


############################################################## Card fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top :				0
		width:				375
		height:				523
		radius:				18
		left width:			26
		right width:		25
		top width:			27
		bottom width:		39
		z index:			0
	card color:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			1
		render style:		image
		popup style:		in place
		image:				{ card_background() }
		mask:				foil_mask.png
	############################# Name line
	name:
		left:				35
		top:				29
		right:				{ 343 - (if card_style.casting_cost.content_width == 0 then 0 else card_style.casting_cost.content_width + 6) }
		height:				26
		z index:			300
		alignment:			middle left shrink-overflow
		font:
			name:				Beleren Bold
			size:				{ 15 - shrink_name() }
			color:				black
	casting cost:
		right:				345
		top:				30
		width:				{ max(30, card_style.casting_cost.content_width) + 5 }
		height:				26
		z index:			310
		alignment:			middle right
		always symbol:		true
		font:
			name:				MPlantin
			size:				15
			color:				black
		symbol font:
			name:				{ styling.casting_cost_mana_symbols }
			size:				15
			#alignment:			middle right
	############################# Image
	image:
		left:				{ image_left_short() }
		top:				{ image_top_short() }
		right:				{ image_right_short() }
		bottom:				{ image_bottom_short() }
		z index:			10
		mask:				{ crop("image_mask.png", offset_x: image_left(), offset_y: image_top(), width: image_right()-image_left(), height: image_bottom()-image_top()) }
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			400
	############################# Card type
	indicator:
		left:				34
		top:				301
		width:				17
		height:				17
		z index:			110
		render style:		image
		visible:			{ has_identity() }
		image:				{ card_identity() }
	type:
		left:				{ if has_identity() then 53 else 34 }
		top:				296
		right:				{ if set.shorten_types_for_rarity then max(188,min(rarity_left()-4,340)) else 340 }
		height:				26
		z index:			110
		alignment:			middle left shrink-overflow
		font:
			name:				Beleren Bold
			size:				{ 13 - shrink_type() }
			color:				black
			separator color:	red
	rarity:
		right:				{ rarity_right() }
		top:				{ rarity_top() }
		width:				{ rarity_size() }
		height:				{ rarity_size() }
		z index:			111
		alignment:			middle right
		render style:		image
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	text:
		left:				32
		top:				{ 333 + chop_top() }
		right:				343
		bottom:				{ 479 - chop_bot() }
		z index:			100
		padding left:		6
		padding right:		4
		line height hard:	{ if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if (styling.center_rule_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_rule_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				MPlantin
			italic name:		MPlantin-Italic
			size:				{ if styling.rule_text_font_cap != "" then to_number(styling.rule_text_font_cap) else 13.5 }
			scale down to:		6
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ if styling.rule_text_font_cap != "" then to_number(styling.rule_text_font_cap) else 13.5 }
			scale down to:		6
	watermark:
		left:				10
		top:				329
		right:				365
		bottom:				482
		z index:			10
		render style:		image
		popup style:		in place
		alignment:			middle center
		include file:		/magic-watermarks.mse-include/watermarks
	############################# PT
	pt:
		left:				300
		top:				469
		width:				47
		height:				22
		z index:			100
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				15
			color:				black
			separator color:	red
	############################# Copyright stuff
	card stamp:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			31
		render style:		image
		popup style:		in place
		image:				{ if is_stamped() then card_stamp() else "" }
		mask:				stamp_mask.png
	set code:
		left:				24
		top:				499
		width:				40
		height:				10
		z index:			100
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 38 else 42 + card_style.set_code.content_width }
		top:				498.5
		width:				200
		height:				10
		z index:			100
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				7.25
			color:				{ styling.copyright_text_color }
	copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 0 else 140 }
		height:				10
		z index:			100
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields

extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				choice
	name:				pt box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				flavor bar
	editable:			false
	save value:			false
	show statistics:	false
	choice:				flavor bar
extra card field:
	type:				color
	name:				card stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				nameline box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				nameline box
extra card field:
	type:				choice
	name:				typeline box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				typeline box
extra card field:
	type:				choice
	name:				rules box
	editable:			false
	save value:			false
	show statistics:	false
	choice:				rules box

extra card style:
	card code:
		left:				24
		top:				489
		width:				120
		height:				10
		z index:			100
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 140 else 0 }
		height:				10
		z index:			100
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 25 else 29 + card_style.set_code.content_width }
		top:				501
		width:				12
		height:				7
		z index:			100
		render style:		image
		image:				{ recolor_image("artist_arrow.png", color: styling.copyright_text_color) }
	flavor bar:
		left:				38
		top:				{ bar_equation() + 1 }
		right:				337
		height:				2
		z index:			20
		visible:			{ styling.flavor_bar and card.rule_text != "" and remove_tags(card.flavor_text) != "" }
		render style:		image
		image:				flavor_bar.png
	pt box:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			40
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if styling.PT_color_scheme == "gold" and count > 1 then template("m", type: "pt")
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "blend_pt.png", dark: template(pure.0, type: "pt"), light: template(pure.1, type: "pt"))
				else card_ptbox()
		mask:				pt_mask.png
	crown:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			40
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
		mask:				crown_mask.png
	foil layer:
		left:				0
		top :				0
		width:				375
		height:				523
		z index:			200
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
		mask:				{ "foil_mask" + (if is_stamped() then "_rare" else "") + (if card.pt != "" then "_pt" else "") + (if is_crowned() then "_crown" else "") + ".png"}
	card stamp border:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			30
		visible:			{ is_stamped() }
		mask:				stamp_border_mask.png
	nameline box:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			12
		render style:		image
		image:				{ if styling.image_location == "whole card" or contains(styling.image_location, match: "name") then set_alpha(card_textboxes(), alpha: get_alpha(styling.nameline_opacity_percentage, default: 70)) else card_textboxes() }
		mask:				name_mask.png
	typeline box:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			12
		render style:		image
		image:				{ if styling.image_location == "whole card" or contains(styling.image_location, match: "type") then set_alpha(card_textboxes(), alpha: get_alpha(styling.typeline_opacity_percentage, default: 70)) else card_textboxes() }
		mask:				type_mask.png
	rules box:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			12
		render style:		image
		image:				{ if styling.image_location == "whole card" or contains(styling.image_location, match: "text") then set_alpha(card_textboxes(), alpha: get_alpha(styling.textbox_opacity_percentage, default: 80)) else card_textboxes() }
		mask:				text_mask.png
