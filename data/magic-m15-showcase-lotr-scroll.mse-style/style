mse version:		2.0.0
game:				magic
short name:			LotR Scroll
full name:			Showcase
icon:				card_sample.png
position hint:		095

version:			2021-02-16
depends on:
	package:			magic.mse-game
	version:			2014-06-25
depends on:
	package:			magic-default-image.mse-include
	version:			2007-09-23
depends on:
	package:			magic-watermarks.mse-include
	version:			2007-09-23
depends on:
	package:			magic-identity-new.mse-include
	version:			2012-01-22
depends on:
	package:			magic-mana-large.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mana-small.mse-symbol-font
	version:			2007-09-23
depends on:
	package:			magic-mainframe-extras.mse-include
	version:			2007-09-23

card width:			375
card height:		523
card dpi:			150


### blanks by GenevensiS
### code by GenevensiS


############################################################## Extra scripts

init script:
	card_hybrid_2 :=
	{
		if type == "loyaltycost" then template(colors.0)
		else masked_blend(mask: "special_blend_card.png", dark: template(colors.0), light: template(colors.1))
	}
	horizontal_card_hybrid :=
	[
		0:	horizontal_card_hybrid[0]
		1:	horizontal_card_hybrid[1]
		2:	card_hybrid_2
		3:	horizontal_card_hybrid[3]
		4:	horizontal_card_hybrid[4]
		5:	horizontal_card_hybrid[5]
		6:	horizontal_card_hybrid[6]
		7:	horizontal_card_hybrid[7]
	]
	card_hybrid :=
	[
		radial:		card_hybrid["radial"]
		horizontal:	horizontal_card_hybrid
		overlay:	card_hybrid["overlay"]
		vertical:	card_hybrid["vertical"]
	]
	
	template_prefix :=
	[
		card:			"card/",
		pt:				"pt/",
		crown:			"crown/",
		stamprim:		"stamprim/",
		nonstamprim:	"nonstamprim/",
		identity:		"/magic-identity-new.mse-include/"
	]
	template_suffix :=
	[
		card:			"card.png",
		pt:				"pt.png",
		crown:			"crown.png",
		stamprim:		"stamprim.png",
		nonstamprim:	"nonstamprim.png",
		identity:		"identity.png"
	]
	
	template :=
	{
		if type == "loyaltycost" then crop_safe("loyaltycost/" + input + "loyaltycost.png", offset_x: 0, offset_y: 200-loyaltycost_move(number), width: 375, height: 523)
		else template_prefix[type] + input + template_suffix[type]
	}
	land_template := { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	
	card_background :=		{ color_background(input: card.card_color, type: "card",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown :=			{ color_background(input: card.card_color, type: "crown",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox :=			{ color_background(input: card.card_color, type: "pt",			base_hybrid: card_hybrid)		}@(offset:0 )
	card_loyaltycostbox :=	{ color_background(input: card.card_color, type: "loyaltycost",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamprim :=		{ color_background(input: card.card_color, type: "stamprim",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_nonstamprim :=		{ color_background(input: card.card_color, type: "nonstamprim",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_stampholofoil :=
	{
		if is_stamped() then (if is_foil_stamped() then "holofoil/universes beyond.png" else "holofoil/universes beyond_void.png") else ""
	}
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	
	mana_t :=
	{
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana :=		{ styling.use_guild_mana_symbols }
	ancestral_mana :=	{ styling.use_ancestral_mana_symbols }
	
	has_identity :=		{ styling.color_indicator_dot }
	has_identity_2 :=	{ false }
	
	is_promo :=			{ styling.promo }
	is_unsorted :=		{ styling.remove_from_autocount }
	is_flavor_barred :=	{ contains(styling.textbox_layout, match: "flavor") and not contains(styling.textbox_layout, match: "only flavor") and styling.flavor_bar and remove_tags(card.flavor_text) != "" }
	is_stamped :=		{ card.card_stamp != "none" and (contains(styling.holofoil_stamps, match: "yes") or (styling.holofoil_stamps == "only rares and mythics" and is_rare()))}
	is_foil_stamped :=	{ styling.holofoil_stamps == "yes, all foil" or is_rare() }
	is_crowned :=		{ styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and contains(card.super_type, match:"Legendary")) }
	
	chop_top :=				{ clamp((to_int(pull_comma_array(styling.chop_textbox, cell:0, end:0, default:0)) or else 0), minimum: -500, maximum: 500) }
	chop_bottom :=			{ clamp((to_int(pull_comma_array(styling.chop_textbox, cell:1, end:0, default:0)) or else 0), minimum: -500, maximum: 500) }
	chop_right :=			{ clamp((to_int(pull_comma_array(styling.chop_textbox, cell:2, end:0, default:0)) or else 0), minimum: -500, maximum: 500) }
	
	shrink_name :=	{ if styling.shrink_name_text == "-" then 0 else if styling.shrink_name_text != "" then clamp(to_number(styling.shrink_name_text), minimum: -40, maximum: 13) else 0 }
	shrink_type :=	{ if styling.shrink_type_text == "-" then 0 else if styling.shrink_type_text != "" then clamp(to_number(styling.shrink_type_text), minimum: -40, maximum: 11) else 0 }
	
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png") }
	
	alt_rarity := { styling.alt_rarity_color != "" }
	alt_rarity_color :=
	{
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		output
	}
	alt_symbol :=
	{
		colors := alt_rarity_color()
		symbol_variation(
			symbol:			set.symbol,
			border_radius:	colors.12,
			fill_type:		"linear gradient",
			fill_color_1:	rgb(colors.0, colors.1, colors.2),
			fill_color_2:	rgb(colors.3, colors.4, colors.5),
			border_color_1:	rgb(colors.6, colors.7, colors.8),
			border_color_2:	rgb(colors.9, colors.10, colors.11),
			center_x:		0.5,
			center_y:		0.5,
			end_x:			1,
			end_y:			1
		)
	}
	
	mainframe_walker :=
	{
		true
	}
	
	mainframe_walker_text_script :=
	{
		if		styling.textbox_layout == "6 textboxes" then				combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.level_6_text)
		else if	styling.textbox_layout == "5 textboxes + flavor text" then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text, separator5: "<line>\n</line>", field6: card.flavor_text)
		else if	styling.textbox_layout == "5 textboxes" then				combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.level_5_text)
		else if	styling.textbox_layout == "4 textboxes + flavor text" then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text, separator4: "<line>\n</line>", field5: card.flavor_text)
		else if	styling.textbox_layout == "4 textboxes" then				combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
		else if	styling.textbox_layout == "3 textboxes + flavor text" then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.flavor_text)
		else if	styling.textbox_layout == "3 textboxes" then				combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
		else if	styling.textbox_layout == "2 textboxes + flavor text" then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.flavor_text)
		else if	styling.textbox_layout == "2 textboxes" then				combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
		else if	styling.textbox_layout == "1 textbox + flavor text" then	combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.flavor_text)
		else if	styling.textbox_layout == "1 textbox" then					forward_editor(field: card.level_1_text)
		else 																forward_editor(field: card.flavor_text)
	}
	
	margin_left :=
	{
		if		input == "lv1" then	(if card.loyalty_cost_1 == "" then 0 else 250)
		else if	input == "lv2" then	(if card.loyalty_cost_2 == "" then 0 else 250)
		else if	input == "lv3" then	(if card.loyalty_cost_3 == "" then 0 else 250)
		else if	input == "lv4" then	(if card.loyalty_cost_4 == "" then 0 else 250)
		else if	input == "lv5" then	(if card.loyalty_cost_5 == "" then 0 else 250)
		else if	input == "lv6" then	(if card.loyalty_cost_6 == "" then 0 else 250)
		else						0
	}
	
	text_filter := remove_tag@(tag: "<i-flavor>") + text_filter + { apply_margins(input, name:margin_code) } + { add_spacers(input, name:margin_code) }
	flavor_text_filter := replace@(match: "​", replace: "") + flavor_text_filter + { if contains(styling.textbox_layout, match: "flavor") and remove_tags(input) == "" then input + "​" else input }
	
	add_spacers :=
	{
		#The 'then ""' has a zero-width space inside
		if input == "" and level_is_active(name) then "​"
		else input
	}
	
	level_is_active :=
	{
		if		input == "lv6" then	abilities_count() >= 6
		else if	input == "lv5" then	abilities_count() >= 5
		else if	input == "lv4" then	abilities_count() >= 4
		else if	input == "lv3" then	abilities_count() >= 3
		else if	input == "lv2" then	abilities_count() >= 2
		else						true
	}
	
	ability_top :=
	{
		if card_style.text.layout.blocks[input-1].bottom or else 0 > 0 then to_int(card_style.text.top) + to_int(card_style.text.layout.blocks[input-1].top)
		else 600
	}
	
	ability_center :=
	{
		if card_style.text.layout.blocks[input-1].bottom or else 0 > 0 then to_int(card_style.text.top) + to_int(card_style.text.layout.blocks[input-1].middle)
		else 600
	}
	
	ability_bottom :=
	{
		if card_style.text.layout.blocks[input-1].bottom or else 0 > 0 then to_int(card_style.text.top) + to_int(card_style.text.layout.blocks[input-1].bottom)
		else 600
	}
	
	abilities_count :=
	{
		if		contains(styling.textbox_layout, match: "1")	then	1
		else if	contains(styling.textbox_layout, match: "3")	then	3
		else if	contains(styling.textbox_layout, match: "4")	then	4
		else if	contains(styling.textbox_layout, match: "2")	then	2
		else if	contains(styling.textbox_layout, match: "5")	then	5
		else if	contains(styling.textbox_layout, match: "6")	then	6
		else															0
	}
	
	loyal_move :=		{ clamp((to_int(pull_comma_array(styling.move_loyalty_costs,	cell:input-1, end:0, default:0)) or else 0), minimum: -300, maximum: 300) }
	separator_move :=	{ clamp((to_int(pull_comma_array(styling.move_separators,		cell:input-1, end:0, default:0)) or else 0), minimum: -300, maximum: 300) }
	
	stripe_top := { -to_int(( -ability_bottom(input) - ability_top(input+1) )/2) - 2 + separator_move(input) }
	
	loyaltycost_move := { clamp(ability_center(number) - 508 + loyal_move(number), minimum: -300, maximum: 300) }
	
	rarity_right :=		{ split := split_comma(styling.rarity_coordinates); if length(split) > 0 and split.0 != "" then clamp(split.0, minimum: 0, maximum: 1000) else 343 }
	rarity_top :=		{ split := split_comma(styling.rarity_coordinates); if length(split) > 1 and split.1 != "" then clamp(split.1, minimum: 0, maximum: 1500) else 295 }
	rarity_size :=		{ split := split_comma(styling.rarity_coordinates); if length(split) > 2 and split.2 != "" then clamp(split.2, minimum: 0, maximum: 1500) else 26 }
	rarity_left :=		{ rarity_right() - rarity_size() }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" then clamp(split.0, minimum: -300,	maximum: 400) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" then clamp(split.1, minimum: -300,	maximum: 600) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" then clamp(split.2, minimum: 0,		maximum: 600) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" then clamp(split.3, minimum: 0,		maximum: 800) else 0 }
	
	split_comma := split_text@(match: " *, *")
	
	un_png := replace@(match:".png", replace: "")
	
	clamp :=
	{
		if input < minimum then minimum
		else if input > maximum then maximum
		else input
	}
	
	crop_safe :=
	{
		if		offset_x < 0
			or	offset_y < 0
			or	width < 1
			or	height < 1
			or	offset_x + width > 375
			or	offset_y + height > 1123
		then ""
		else crop(input, offset_x: offset_x, offset_y: offset_y, width: width, height: height)
	}


############################################################## Set info fields

set info style:
	symbol:
		variation:
			name:				invertedcommon
			border radius:		0.10
			fill type:			solid
			fill color:			rgb(255,255,255)
			border color:		rgb(0,0,0)


############################################################## Extra style options

styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no
styling field:
	type:			text
	name:			shrink name text
	description:	Shrinks name text X pixels.
styling field:
	type:			text
	name:			shrink type text
	description:	Shrinks type text X pixels.
styling field:
	type:			choice
	name:			textbox layout
	description:	Number of textboxes for abilities and passives. MODIFY CONTENT OF TEXTBOXES IF THIS HAS TROUBLE UPDATING AFTER BEING CHANGED.
	choice:			only flavor text
	choice:			1 textbox
	choice:			1 textbox + flavor text
	choice:			2 textboxes
	choice:			2 textboxes + flavor text
	choice:			3 textboxes
	choice:			3 textboxes + flavor text
	choice:			4 textboxes
	choice:			4 textboxes + flavor text
	choice:			5 textboxes
	choice:			5 textboxes + flavor text
	choice:			6 textboxes
	initial:		1 textbox
styling field:
	type:			text
	name:			chop textbox
	description:	Formatted as "X,Y,Z". Shrinks rules textbox X pixels from the top, Y from the bottom, and Z from the right.
styling field:
	type:			text
	name:			text font cap
	description:	Caps the font size of the rules text and the flavor text. Default is 13.
styling field:
	type:			choice
	name:			center text
	description:	When to center text (short text means only on one-line cards with no flavor text)
	choice:			always
	choice:			short text only
	choice:			never
	initial:		never
styling field:
	type:			text
	name:			move separators
	description:	Moves the stripes between abilities down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5"
styling field:
	type:			text
	name:			move loyalty costs
	description:	Moves loyalty costs down by this many pixels. Use negatives to move up. Formatted as "1,2,3,4,5,6"
styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards.
	choice:			gold
	choice:			hybrid
	choice:			blend
	initial:		hybrid
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			boolean
	name:			flavor bar
	description:	Use the flavor bar to separate rule text from flavor text.
	initial:		yes
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps?
	choice:			yes, all foil
	choice:			yes, un/commons not foil
	choice:			only rares and mythics
	choice:			no
	initial:		yes, un/commons not foil
styling field:
	type:			boolean
	name:			color indicator dot
	description:	Use a dot in the typeline to indicate card color?
	initial:		no
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Should the common rarity symbol be inverted, like in Coldsnap?
	initial:		no
styling field:
	type:			text
	name:			alt rarity color
	description:	Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:..." 1 and 2 are fill color, 3 and 4 border color
styling field:
	type:			text
	name:			rarity coordinates
	description:	The coordinates for the set symbol, formatted as "right,top,size". Default is 343,295,26.
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling field:
	type:			choice
	name:			corners
	description:	What should the corners of the card look like?
	choice:			rounded and antialiased
	choice:			rounded
	choice:			none
	initial:		rounded and antialiased
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text of the front of the card.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			boolean
	name:			use ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	What tap and untap symbols should be used on cards?
	choice:			modern
	choice:			old
	choice:			diagonal T
	initial:		modern
styling field:
	type:			package choice
	name:			casting cost mana symbols
	description:	Symbols used in the casting cost.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-large.mse-symbol-font
styling field:
	type:			package choice
	name:			text box mana symbols
	description:	Symbols used in the rule text and flavor text.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			text
	name:			name font
	description:	Font used for the name on the front of the card. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling field:
	type:			text
	name:			text font
	description:	Font used for the rule text. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling field:
	type:			text
	name:			text italic font
	description:	Font used for the flavor text and reminder texts. Hover your mouse over the font file to see it's details in a yellow popup, and write it's Title here.
styling style:
	use guild mana symbols:
		choice images:
			yes:				/magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:					/magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style:	both
		choice images:
			modern:				/magic-mana-large.mse-symbol-font/mana_t.png
			old:				/magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T:			/magic-mana-large.mse-symbol-font/mana_t_older.png
	center text:
		render style:	both
		choice images:
			always:				/magic.mse-game/icons/center-all-text.png
			short text only:	/magic.mse-game/icons/center-short-text.png
			never:				/magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:					{ symbol_variation(symbol: set.symbol, variation: "common") }
			yes:				{ symbol_variation(symbol: set.symbol, variation: "invertedcommon") }


############################################################## Card fields

card style:
	############################# Background stuff
	border color:
		left:				0
		top :				0
		width:				375
		height:				523
		radius:				31
		z index:			100
		mask:				border_mask.png
	card color:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			200
		render style:		image
		popup style:		in place
		image:				{ card_background() }
		mask:				card_mask.png
	############################# Name line
	name:
		left:				32
		top:				27
		right:				{ 343 - (if card_style.casting_cost.content_width == 0 then 0 else card_style.casting_cost.content_width + 6) }
		height:				26
		z index:			1000
		alignment:			middle left shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 15 - shrink_name() }
			color:				black
	casting cost:
		right:				347
		top:				28
		width:				{ max(35, card_style.casting_cost.content_width + 6) }
		height:				26
		z index:			1010
		alignment:			middle right
		always symbol:		true
		font:
			name:				MPlantin
			size:				15
			color:				black
		symbol font:
			name:				{ styling.casting_cost_mana_symbols }
			size:				15
			#alignment:			middle right
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0 else 28 }
		top:				{ if styling.stretch_art_to_whole_card then 0 else 57 }
		width:				{ if styling.stretch_art_to_whole_card then 375 else 319 }
		height:				{ if styling.stretch_art_to_whole_card then 523 else 234 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			2000
	############################# Card type
	indicator:
		left:				31
		top:				300
		width:				17
		height:				17
		z index:			1000
		render style:		image
		visible:			{ has_identity() }
		image:				{ card_identity() }
	type:
		left:				{ if has_identity() then 53 else 32 }
		top:				295
		right:				{ if set.shorten_types_for_rarity then clamp(rarity_left()-6, minimum: 187, maximum: 343) else 343 }
		height:				26
		z index:			1010
		alignment:			middle left shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				{ 13 - shrink_type() }
			color:				black
			separator color:	red
	rarity:
		right:				{ rarity_right() }
		top:				{ rarity_top() }
		width:				{ rarity_size() }
		height:				{ rarity_size() }
		z index:			1000
		alignment:			middle right
		render style:		image
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	text:
		left:				29
		top:				{ 331 + chop_top() }
		right:				{ 345 - chop_right() }
		bottom:				{ (if is_stamped() then 470 else 477) - chop_bottom() }
		z index:			1000
		padding left:		4
		padding right:		3
		line height hard:	{ if is_modal(card.text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{ if is_modal(card.text) then 1.0 else 1.3 }
		line height line max:	1.6
		alignment:
			script:
				if		(styling.center_text == "short text only" and card_style.text.content_lines <= 2)
					or	styling.center_text == "always"
				then "middle center"
				else "middle left"
		font:
			name:				{ if styling.text_font == "" then "MPlantin" else styling.text_font }
			italic name:		{ if styling.text_italic_font == "" then "MPlantin-Italic" else styling.text_italic_font }
			size:				{ if styling.text_font_cap != "" then to_number(styling.text_font_cap) else 13 }
			scale down to:		7
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ if styling.text_font_cap != "" then to_number(styling.text_font_cap) else 13 }
			scale down to:		7
	loyalty cost 1:
		left:				11
		top:				{ ability_center(1) - 13 + loyal_move(1) }
		width:				{ if abilities_count() >= 1 then 27 else 0 }
		height:				28
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				15
			scale down to:		10
			color:				black
	loyalty cost 2:
		left:				11
		top:				{ ability_center(2) - 13 + loyal_move(2) }
		width:				{ if abilities_count() >= 2 then 27 else 0 }
		height:				28
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				15
			scale down to:		10
			color:				black
	loyalty cost 3:
		left:				11
		top:				{ ability_center(3) - 13 + loyal_move(3) }
		width:				{ if abilities_count() >= 3 then 27 else 0 }
		height:				28
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				15
			scale down to:		10
			color:				black
	loyalty cost 4:
		left:				11
		top:				{ ability_center(4) - 13 + loyal_move(4) }
		width:				{ if abilities_count() >= 4 then 27 else 0 }
		height:				28
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				15
			scale down to:		10
			color:				black
	loyalty cost 5:
		left:				11
		top:				{ ability_center(5) - 13 + loyal_move(5) }
		width:				{ if abilities_count() >= 5 then 27 else 0 }
		height:				28
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				15
			scale down to:		10
			color:				black
	loyalty cost 6:
		left:				11
		top:				{ ability_center(6) - 13 + loyal_move(6) }
		width:				{ if abilities_count() >= 6 then 27 else 0 }
		height:				28
		z index:			1010
		alignment:			center middle shrink-overflow
		font:
			name:				{ if styling.name_font == "" then "Beleren Bold" else styling.name_font }
			size:				15
			scale down to:		10
			color:				black
	watermark:
		left:				10
		top:				329
		right:				355
		bottom:				{ if is_stamped() then 474 else 479 }
		z index:			700
		render style:		image
		popup style:		in place
		alignment:			middle center
		include file:		/magic-watermarks.mse-include/watermarks
	############################# PT
	pt:
		left:				300
		top:				469
		width:				46
		height:				23
		z index:			1020
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				15
			color:				black
			separator color:	red
	############################# Copyright stuff
	card stamp:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			820
		render style:		image
		popup style:		in place
		image:				{ card_stampholofoil() }
		mask:				stamp_mask.png
	set code:
		left:				24
		top:				499
		width:				40
		height:				10
		z index:			1030
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 38 else 42 + card_style.set_code.content_width }
		top:				498.5
		width:				200
		height:				10
		z index:			1030
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				7.25
			color:				{ styling.copyright_text_color }
	copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 0 else 140 }
		height:				10
		z index:			1030
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields

extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				choice
	name:				flavor bar
	editable:			false
	save value:			false
	show statistics:	false
	choice:				flavor bar
extra card field:
	type:				choice
	name:				pt box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				choice
	name:				card stamp background
	editable:			false
	save value:			false
	show statistics:	false
	choice:				card stamp background
extra card field:
	type:				color
	name:				corners
	script:				rgb(255, 255, 255)
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				text
	name:				colon 1
	editable:			false
	save value:			false
	script:				":"
extra card field:
	type:				text
	name:				colon 2
	editable:			false
	save value:			false
	script:				":"
extra card field:
	type:				text
	name:				colon 3
	editable:			false
	save value:			false
	script:				":"
extra card field:
	type:				text
	name:				colon 4
	editable:			false
	save value:			false
	script:				":"
extra card field:
	type:				text
	name:				colon 5
	editable:			false
	save value:			false
	script:				":"
extra card field:
	type:				text
	name:				colon 6
	editable:			false
	save value:			false
	script:				":"
extra card field:
	type:				choice
	name:				loyalty cost box 1
	editable:			false
	save value:			false
	choice:				loyalty cost box 1
extra card field:
	type:				choice
	name:				loyalty cost box 2
	editable:			false
	save value:			false
	choice:				loyalty cost box 2
extra card field:
	type:				choice
	name:				loyalty cost box 3
	editable:			false
	save value:			false
	choice:				loyalty cost box 3
extra card field:
	type:				choice
	name:				loyalty cost box 4
	editable:			false
	save value:			false
	choice:				loyalty cost box 4
extra card field:
	type:				choice
	name:				loyalty cost box 5
	editable:			false
	save value:			false
	choice:				loyalty cost box 5
extra card field:
	type:				choice
	name:				loyalty cost box 6
	editable:			false
	save value:			false
	choice:				loyalty cost box 6
extra card field:
	type:				choice
	name:				textbox stripe separator 1
	editable:			false
	save value:			false
	choice:				textbox stripe separator 1
extra card field:
	type:				choice
	name:				textbox stripe separator 2
	editable:			false
	save value:			false
	choice:				textbox stripe separator 2
extra card field:
	type:				choice
	name:				textbox stripe separator 3
	editable:			false
	save value:			false
	choice:				textbox stripe separator 3
extra card field:
	type:				choice
	name:				textbox stripe separator 4
	editable:			false
	save value:			false
	choice:				textbox stripe separator 4
extra card field:
	type:				choice
	name:				textbox stripe separator 5
	editable:			false
	save value:			false
	choice:				textbox stripe separator 5
extra card field:
	type:				choice
	name:				art filter
	editable:			false
	save value:			false
	choice:				art filter
extra card style:
	card code:
		left:				24
		top:				489
		width:				120
		height:				10
		z index:			1030
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 140 else 0 }
		height:				10
		z index:			1030
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 25 else 29 + card_style.set_code.content_width }
		top:				501
		width:				12
		height:				7
		z index:			1030
		render style:		image
		image:				{ recolor_image("artist_arrow.png", color: styling.copyright_text_color) }
	flavor bar:
		left:				38
		top:				{ if abilities_count() >= 1 then stripe_top(abilities_count()) + 3 else 600 }
		width:				298
		height:				3
		z index:			710
		visible:			{ is_flavor_barred() }
		render style:		image
		image:				flavor_bar.png
	pt box:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			820
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				if styling.PT_color_scheme == "gold" and count > 1 then masked_blend(mask: "special_multicolor_blend_pt.png", dark: template("m", type: "pt"), light: card_ptbox())
				else if styling.PT_color_scheme == "hybrid" and count == 2 then masked_blend(mask: "special_hybrid_blend_pt.png", dark: template(pure.0, type: "pt"), light: template(pure.1, type: "pt"))
				else card_ptbox()
	crown:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			310
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	foil layer:
		left:				0
		top :				0
		width:				375
		height:				523
		z index:			3000
		visible:			{ styling.overlay != "none" and styling.overlay != "" }
		render style:		image
		image:				{ if styling.overlay == "" then "" else styling.overlay + "/overlay.png" }
	card stamp background:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			600
		render style:		image
		image:				{ if is_stamped() then card_stamprim() else card_nonstamprim() }
	corners:
		left:				0
		top :				0
		width:				375
		height:				523
		z index:			4000
		visible:			{ styling.corners != "none" }
		mask:				{ if styling.corners == "rounded and antialiased" then "corners_rounded_antialiased_mask.png" else "corners_rounded_mask.png" }
	loyalty cost box 1:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			810
		visible:			{ card.loyalty_cost_1 != "" and abilities_count() >= 1 }
		render style:		image
		image:				{ card_loyaltycostbox(number: 1) }
	loyalty cost box 2:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			810
		visible:			{ card.loyalty_cost_2 != "" and abilities_count() >= 2 }
		render style:		image
		image:				{ card_loyaltycostbox(number: 2) }
	loyalty cost box 3:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			810
		visible:			{ card.loyalty_cost_3 != "" and abilities_count() >= 3}
		render style:		image
		image:				{ card_loyaltycostbox(number: 3) }
	loyalty cost box 4:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			810
		visible:			{ card.loyalty_cost_4 != "" and abilities_count() >= 4 }
		render style:		image
		image:				{ card_loyaltycostbox(number: 4) }
	loyalty cost box 5:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			810
		visible:			{ card.loyalty_cost_5 != "" and abilities_count() >= 5 }
		render style:		image
		image:				{ card_loyaltycostbox(number: 5) }
	loyalty cost box 6:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			810
		visible:			{ card.loyalty_cost_6 != "" and abilities_count() >= 6 }
		render style:		image
		image:				{ card_loyaltycostbox(number: 6) }
	colon 1:
		left:				48
		top:				{ ability_center(1) - 14 + loyal_move(1) }
		width:				7
		height:				26
		z index:			1010
		visible:			{ card.loyalty_cost_1 != "" and abilities_count() >= 1 }
		font:
			name:				Beleren Bold
			size:				15
			color:				black
		alignment: center middle
	colon 2:
		left:				48
		top:				{ ability_center(2) - 14 + loyal_move(2) }
		width:				7
		height:				26
		z index:			1010
		visible:			{ card.loyalty_cost_2 != "" and abilities_count() >= 2 }
		font:
			name:				Beleren Bold
			size:				15
			color:				black
		alignment: center middle
	colon 3:
		left:				48
		top:				{ ability_center(3) - 14 + loyal_move(3) }
		width:				7
		height:				26
		z index:			1010
		visible:			{ card.loyalty_cost_3 != "" and abilities_count() >= 3 }
		font:
			name:				Beleren Bold
			size:				15
			color:				black
		alignment: center middle
	colon 4:
		left:				48
		top:				{ ability_center(4) - 14 + loyal_move(4) }
		width:				7
		height:				26
		z index:			1010
		visible:			{ card.loyalty_cost_4 != "" and abilities_count() >= 4 }
		font:
			name:				Beleren Bold
			size:				15
			color:				black
		alignment: center middle
	colon 5:
		left:				48
		top:				{ ability_center(5) - 14 + loyal_move(5) }
		width:				7
		height:				26
		z index:			1010
		visible:			{ card.loyalty_cost_5 != "" and abilities_count() >= 5 }
		font:
			name:				Beleren Bold
			size:				15
			color:				black
		alignment: center middle
	colon 6:
		left:				48
		top:				{ ability_center(6) - 14 + loyal_move(6) }
		width:				7
		height:				26
		z index:			1010
		visible:			{ card.loyalty_cost_6 != "" and abilities_count() >= 6 }
		font:
			name:				Beleren Bold
			size:				15
			color:				black
		alignment: center middle
	textbox stripe separator 1:
		left:				45
		width:				285
		top:				{ stripe_top(1) }
		height:				4
		z index:			710
		visible:			{ abilities_count() >= 2 }
		render style:		image
		image:				stripe_1.png
	textbox stripe separator 2:
		left:				45
		width:				285
		top:				{ stripe_top(2) }
		height:				4
		z index:			710
		visible:			{ abilities_count() >= 3 }
		render style:		image
		image:				stripe_2.png
	textbox stripe separator 3:
		left:				45
		width:				285
		top:				{ stripe_top(3) }
		height:				4
		z index:			710
		visible:			{ abilities_count() >= 4 }
		render style:		image
		image:				stripe_1.png
	textbox stripe separator 4:
		left:				45
		width:				285
		top:				{ stripe_top(4) }
		height:				4
		z index:			710
		visible:			{ abilities_count() >= 5 }
		render style:		image
		image:				stripe_2.png
	textbox stripe separator 5:
		left:				45
		width:				285
		top:				{ stripe_top(5) }
		height:				4
		z index:			710
		visible:			{ abilities_count() >= 6 }
		render style:		image
		image:				stripe_1.png
	art filter:
		left:				28
		top:				57
		width:				319
		height:				234
		z index:			10
		visible:			false
		render style:		image
		image:				art_filter.png