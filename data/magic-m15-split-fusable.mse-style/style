mse version: 2.0.0
game: magic
short name: Mainframe Splits
full name: Fusable Split Cards
icon: card-sample.png
installer group: magic/m15 style/split cards/fuse
position hint: 011

version: 2024-01-05
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2018-01-01

card width: 523
card height: 375
card dpi: 150
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.grey_hybrid_name }
	
	#Should multicolor lands with basic land types have a colored name?
	mask_multi_land_with_color := { styling.colored_multicolor_land_name }
	
	template_prefix := [card: "" card2: "" card3: "normal/" pt: "" stamp: "" identity: "/magic-identity-new.mse-include/"]
	template_suffix := [card: "card.jpg" card2: "card2.jpg" card3: "card.jpg" pt: "pt.png", stamp: "stamp.jpg" identity: "identity.png"]
	template      := { template_prefix[type] + input + template_suffix[type] }
	land_template := { template_prefix[type] + (if input == "a" then "c" else input) + "l" + template_suffix[type] }
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	
	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	
	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }
	
	# Is the card a promo card?
	is_promo := { styling.promo }
	
	card_shape := { "fuse split" }
	
	bridge_colored := {
		
		# Card 1
		# What type of 'hybrid'?
		land     := chosen(choice:"land", card.card_color)
		multi    := chosen(choice:"multicolor", card.card_color)
		hybrid   := chosen(choice:"hybrid", card.card_color)
		artifact := chosen(choice:"artifact", card.card_color)
		if land and colored_lands then template := land_template # use land template instead?
		
		# The selected colors
		colors := sort_text( order: "(wubrg)"
						   , (if chosen(choice:"white", card.card_color) then "w")
						   + (if chosen(choice:"blue", card.card_color)  then "u")
						   + (if chosen(choice:"black", card.card_color) then "b")
						   + (if chosen(choice:"red", card.card_color)   then "r")
						   + (if chosen(choice:"green", card.card_color) then "g"))
		
		
		if multi and (hybrid or colors == "") then (
			colors := colors + "m"
			multi := false
		)
		if artifact and (hybrid or colors == "") then (
			colors := colors + "a"
			artifact := false
		)
		if chosen(choice:"reversed") then colors := reverse(colors)
		color_count := number_of_items(in: colors)
		if colors == "" then color1 := "c"
		
		if color_count > 0 then color1 := colors[color_count - 1]
		image1 := mask_bridge(color: color1)
		
		# Card 2
		# What type of 'hybrid'?
		land     := chosen(choice:"land", card.card_color_2)
		multi    := chosen(choice:"multicolor", card.card_color_2)
		hybrid   := chosen(choice:"hybrid", card.card_color_2)
		artifact := chosen(choice:"artifact", card.card_color_2)
		if land and colored_lands then template := land_template # use land template instead?
		
		# The selected colors
		colors := sort_text( order: "(wubrg)"
						   , (if chosen(choice:"white", card.card_color_2) then "w")
						   + (if chosen(choice:"blue", card.card_color_2)  then "u")
						   + (if chosen(choice:"black", card.card_color_2) then "b")
						   + (if chosen(choice:"red", card.card_color_2)   then "r")
						   + (if chosen(choice:"green", card.card_color_2) then "g"))
		
		
		if multi and (hybrid or colors == "") then (
			colors := colors + "m"
			multi := false
		)
		if artifact and (hybrid or colors == "") then (
			colors := colors + "a"
			artifact := false
		)
		if chosen(choice:"reversed") then colors := reverse(colors)
		color_count := number_of_items(in: colors)
		if colors == "" then color2 := "c"
		
		if color_count > 0 then (
			if chosen(choice:"vertical", card.card_color_2) then
				color2 := colors[color_count - 1]
			else 
				color2 := colors[0]
		)
		image2 := mask_bridge(color: color2)
		
		linear_blend(x1:0, y1:0, x2:1, y2:0)
	}

	mask_bridge := {
		base := color + "bridge.png"
		
		if land then
			"clbridge.png"
		else if multi then 
			masked_blend(
				mask:  "bridgemask.png",
				dark:  "mbridge.png",
				light: base,
			)
		else if artifact and color_count > 1 and mask_hybrid_with_land() then 
			masked_blend(
				mask:  "bridgemask.png",
				dark:  "clbridge.png",
				light: base
			)
		else if artifact then 
			base
		else if color_count > 1 and mask_hybrid_with_land() then
			masked_blend(
				mask:  "bridgemask.png",
				dark:  "clbridge.png",
				light: base,
			)
		else base
	}

	use_fuse := { card.rule_text_3 != "" }
	card_background_2 := { color_background(type:"card2", base_hybrid:card_hybrid) }
	card_background_3 := { color_background(type:"card3", base_hybrid:card_hybrid) }
	has_identity := { styling.color_indicator_dot }
	has_identity2 := { styling.color_indicator_dot_2 }
	is_unsorted := {styling.remove_from_autocount}

	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png")}
	un_png := replace@(match:".png", replace: "")
	ancestral_mana := { contains(styling.other_options, match:"ancestral generic")}

	bar_offset := {if styling_offset() == "-" then 0 else if styling_offset() != "" then -styling_offset() else 0}
	styling_offset := { replace(styling.flavor_bar_offset, match:"(u|d)+", replace: "") }
	offset_lines := {offset_counter(styling.flavor_bar_offset)}
	bar_offset2 := {if styling_offset2() == "-" then 0 else if styling_offset2() != "" then -styling_offset2() else 0}
	styling_offset2 := { replace(styling.flavor_bar_offset_2, match:"(u|d)+", replace: "") }
	offset_lines2 := {offset_counter(styling.flavor_bar_offset_2)}

	left_font_size := {to_number(pull_comma_array(styling.font_size_cap, end:false, cell:0, default:13))}
	right_font_size := {to_number(pull_comma_array(styling.font_size_cap, end:false, cell:1, default:left_font_size()))}

	# alternate rarity color
	alt_rarity := {styling.alt_rarity_color}
	
############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)
############################################################## Extra style options
styling field:
	type: boolean
	name: use fuse arrows
	description: disable this to only use the extra fuse textbox and not fuse arrows
styling field:
	type: text
	name: flavor bar offset
	description: Move the left flavor bar up X pixels. Use negative to move down.
styling field:
	type: text
	name: flavor bar offset 2
	description: Move the right flavor bar up X pixels. Use negative to move down.
styling field:
	type: text
	name: font size cap
	description: Maximum font size for both textboxes, or "X,Y" to set individual caps
styling field:
	type: multiple choice
	name: other options
	choice: ancestral generic mana
	choice: prerelease stamp
	choice: two illustrators
	initial: two illustrators
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: boolean
	name: color indicator dot
	description: Use the color indicator dot
	initial: no
styling field:
	type: boolean
	name: color indicator dot 2
	description: Use the color indicator dot
	initial: no
styling field:
	type: boolean
	name: remove from autocount
	description: Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial: no
styling field:
	type: boolean
	name: holofoil stamped rares
	description: Use holofoil stamps on rares?
	initial: yes
styling field:
	type: text
	name: alt rarity color
	description: Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:...:X:" 1 and 2 are fill color, 3 and 4 border color, X is border thickness. For example, rare is 214,196,94:95,84,40:0,0,0:0,0,0:0.07
styling field:
	type: boolean
	name: grey hybrid name
	description: Use a grey background for the name and type line on hybrid cards. This is done on real cards.
styling field:
	type: boolean
	name: colored multicolor land name
	description: Use a colored background for the name and type on multicolor land cards with a basic land type. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: choice
	name: center text 1
	description: When to center text on the first card (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: choice
	name: center text 2
	description: When to center text on the second card (short text only means only on one-line cards with no flavor text)
	choice: always
	choice: short text only
	choice: never
	initial: never
styling field:
	type: boolean
	name: promo
	description: Is this card a promo card, with the "P" rarity?
	initial: no
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling style:
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text 1:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	center text 2:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
	other options:
		render style: checklist
		direction: vertical
############################################################## Card fields
card style:
	############################# Background stuff
	border color:
		left: 0
		top : 0
		width:	523
		height:	375
		radius: 15
		z index: -1
	card color:
		left:	31
		top:	14
		width:	241
		height:	345
		z index: 0
		render style: image
		popup style: in place
		image: { if use_fuse() and styling.use_fuse_arrows then card_background() else card_background_3() }
	card color 2:
		left:	272
		top:	14
		width:	241
		height:	345
		z index: 0
		render style: image
		popup style: in place
		image: { if use_fuse() and styling.use_fuse_arrows then card_background_2() else card_background_3() }
	############################# Name line
	name:
		left: { if card.card_symbol=="none" then 48 else 61 }
		top: 27
		right:  { 242 - card_style.casting_cost.content_width }
		height: 20
		alignment: bottom shrink-overflow
		padding bottom: 0
		z index: 1
		font:
			name: Beleren Bold
			size: 15
			color: black
	name 2:
		left: { if card.card_symbol_2=="none" then 289 else 302 }
		top: 27
		right:  { 495 - card_style.casting_cost_2.content_width }
		height: 20
		alignment: bottom shrink-overflow
		padding bottom: 0
		z index: 1
		font:
			name: Beleren Bold
			size: 15
			color: black
	casting cost:
		right: 256
		top: 28
		width: { max(24, card_style.casting_cost.content_width) + 3 }
		height: 18
		alignment: middle right
		font:
			name: MPlantin
			size: 18
		symbol font:
			name: magic-mana-large
			size: 18
			alignment: middle right
		always symbol: true
		z index: 2
		padding top: 0
	casting cost 2:
		right: 498
		top: 28
		width: { max(24, card_style.casting_cost_2.content_width) + 3 }
		height: 18
		alignment: middle right
		font:
			name: MPlantin
			size: 18
		symbol font:
			name: magic-mana-large
			size: 15
			alignment: middle right
		always symbol: true
		z index: 2
		padding top: 0
	card symbol:
		left: {if card.card_symbol=="none" then 37 else 43}
		top: 26
		height: 19
		width: 13.3
		z index: 1
		render style: image
		choice images:
			tombstone: tombstone.png
	card symbol 2:
		left: {if card.card_symbol_2=="none" then 278 else 284}
		top: 26
		height: 19
		width: 13.3
		z index: 1
		render style: image
		choice images:
			tombstone: tombstone.png
	############################# Image
	image:
		left: 45
		top: 53
		width: 211
		height:	154
		z index: 1
		default: {default_image(card.card_color)}
	image 2:
		left: 286
		top: 53
		width: 211
		height:	154
		z index: 1
		default: {default_image(card.card_color_2)}
	mainframe image:
		left: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).0 else "0"}
		top: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).1 else "0"}
		width: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).2 else "0"}
		height: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).3 else "0"}
		z index: 8
	############################# Card type
	indicator:
		left: 44
		top: 214.5
		width: 12
		height: 12
		z index: 2
		render style: image
		visible: { has_identity() }
		image: { card_identity() }
	indicator 2:
		left: 282
		top: 214.5
		width: 12
		height: 12
		z index: 2
		render style: image
		visible: { has_identity2() }
		image: { card_identity() }
	type:
		left: { if has_identity() then "60" else "47" }
		top: 211
		width: { (if has_identity() then "204" else "217") - max(16,card_style.rarity.content_width) }
		height: 15
		alignment: top shrink-overflow
		z index: 1
		padding top: 0
		font:
			name: Beleren Bold
			size: 10
			color: black
			separator color: red
	type 2:
		left: { if has_identity2() then "301" else "288" }
		top: 211
		width: { (if has_identity2() then "204" else "217") - max(16,card_style.rarity.content_width) }
		height: 15
		alignment: top shrink-overflow
		z index: 1
		padding top: 0
		font:
			name: Beleren Bold
			size: 10
			color: black
			separator color: red
	rarity:
		right: 259
		top: 212
		width: 31
		height: 14
		z index: 2
		render style: image
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	rarity 2:
		right: 500
		top: 212
		width: 31
		height: 14
		z index: 2
		render style: image
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	text:
		left: 45
		top: 234
		width: 211
		height: { if use_fuse() then 100 else 120 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { left_font_size() }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { left_font_size() }
		alignment:
			script:
				if (styling.center_text_1 == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text_1 == "always"
				then "middle center"
				else "middle left"
		z index: 2
		padding left:   6
		padding right:  4
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
		line height hard max: 1.3
		line height line max: 1.6
	text 2:
		left: 286
		top: 234
		width: 211
		height: { if use_fuse() then 100 else 120 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { right_font_size() }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { right_font_size() }
		alignment:
			script:
				if (styling.center_text_2 == "short text only" and
				   not contains(match:"\n", card.rule_text_2) and
				   card.flavor_text_2 == "<i-flavor></i-flavor>" and
				   card_style.text_2.content_lines <= 2) or
				   styling.center_text_2 == "always"
				then "middle center"
				else "middle left"
		z index: 2
		padding left:   6
		padding right:  4
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
		line height hard max: 1.3
		line height line max: 1.6
	rule text 3:
		left: 40
		top : 338
		width: 464
		height: 19
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: 12
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 12
		alignment: "middle center"
		z index: 3
		padding left:   2
		padding right:  2
		line height hard: 1.2
		line height line: 1.5
		line height soft: 0.9
	watermark:
		left: 40
		top: { if use_fuse() then 235 else 238}
		width: 222
		height: { if use_fuse() then 85 else 103 }
		z index: 1
		render style: image
		popup style: in place
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks
	watermark 2:
		left: 274
		top: { if use_fuse() then 235 else 238}
		width: 232
		height: { if use_fuse() then 85 else 103 }
		z index: 1
		render style: image
		popup style: in place
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks_back
	############################# Card sorting / numbering
	set code:
		left: 22
		top: 24
		width: 26
		height: 7
		z index: 1
		angle: 270
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	############################# Copyright stuff
	illustrator:
		left: 22
		top: { 44 + card_style.set_code.content_width }
		width: 140
		height: 7
		z index: 1
		angle: 270
		font:
			name: Beleren Small Caps Bold
			size: 7.5
			color: white
	illustrator 2:
		left: 22
		top: { 78 + card_style.set_code.content_width + card_style.illustrator.content_width }
		width: 140
		height: 7
		z index: 1
		angle: 270
		font:
			name: Beleren Small Caps Bold
			size: 7.5
			color: white
		visible: { contains(styling.other_options, match:"two illustrators") }
	copyright:
		left: 32
		top: 214
		width: {if set.automatic_copyright then 0 else 140}
		height: 7
		z index: 2
		angle: 270
		alignment: middle right shrink-overflow
		font:
			name: Matrix
			size: 7.25
			color: white
			weight: bold
############################################################## Extra card fields
extra card field:
	type: text
	name: card code
	save value: false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount then
			forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else
			combined_editor(field1: card.custom_card_number, separator: " " + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type: text
	name: card code 2
	save value: false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount then
			forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else
			combined_editor(field1: card.custom_card_number, separator: " " + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type: choice
	name: artist arrow
	editable: false
	save value: false
	choice: white
extra card field:
	type: choice
	name: artist arrow 2
	editable: false
	save value: false
	choice: white
extra card field:
	type: choice
	name: pt box
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 2
	script: card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: fuse_bridge
	script: "true"
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: stamp
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: foil stamp
	choice: stamp
	save value: false
	editable: false
extra card field:
	type: choice
	name: foil layer
	choice: foil
	save value: false
	editable: false
extra card field:
	type: choice
	name: fusebox 1
	script: card.card_color
	choice: fusebox
	editable: false
	save value: false
extra card field:
	type: choice
	name: fusebox 2
	script: card.card_color_2
	choice: fusebox
	editable: false
	save value: false
extra card field:
	type: text
	name: auto copyright
	script: set.copyright
	save value: false
	editable: false
	show statistics: false
extra card field:
	type: text
	name: promo label
	save value: true
	description: The golden promo label.
extra card field:
	type: text
	name: promo label 2
	save value: true
	description: The second golden promo label.
extra card field:
	type: choice
	name: flavor bar
	choice: bar
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: flavor bar 2
	choice: bar
	editable: false
	save value: false
	show statistics: false

extra card style:
	card code:
		left: 32
		top: 24
		width: 79
		height: 7
		z index: 1
		angle: 270
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	artist arrow:
		left: 19
		top: { 28 + card_style.set_code.content_width }
		width: 12
		height: 7
		z index: 1
		angle: 270
		render style: image
		image: artist_arrow.png
	artist arrow 2:
		left: 19
		top: { 60 + card_style.set_code.content_width + card_style.illustrator.content_width }
		width: 12
		height: 7
		z index: 1
		angle: 270
		render style: image
		image: artist_arrow.png
		visible: { contains(styling.other_options, match:"two illustrators") }
	fuse_bridge:
		left: 265
		top : 335
		width: 13
		height: 24
		z index: 1
		render style: image
		image: { bridge_colored() }
		visible: { use_fuse() }
	stamp:
		left: 40
		top: 164
		width: 46
		height: 26
		angle: 270
		z index: 2
		visible: { is_rare() and styling.holofoil_stamped_rares }
		render style: image
		image: { "foil_stamp.png" }
	foil layer:
		left: 0
		top : 0
		width: 523
		height: 375
		z index: 3
		render style: image
		image: {if styling.overlay == "" then nil else styling.overlay + "/overlay.png"}
		mask: { if is_rare() then "foil_mask_rare.png" else "foil_mask.png" }
	fusebox 1:
		left:	31
		top:	14
		width:	241
		height:	345
		z index: 0
		render style: image
		image: { card_background() }
		mask: fusemask.png
		visible: { use_fuse() and not styling.use_fuse_arrows }
	fusebox 2:
		left:	272
		top:	14
		width:	241
		height:	345
		z index: 0
		render style: image
		image: { card_background_2() }
		mask: fusemask.png
		visible: { use_fuse() and not styling.use_fuse_arrows }
	auto copyright:
		left: 32
		top: 214
		width: {if set.automatic_copyright then 140 else 0}
		height: 7
		z index: 3
		angle: 270
		alignment: middle right shrink-overflow
		font:
			name: Matrix
			size: 7.25
			color: white
			weight: bold
	promo label:
		left: 25
		top: 190
		width: {if contains(styling.other_options, match:"prerelease stamp") then 214 else 0}
		height: 20
		alignment: middle right
		z index: 4
		font:
			name: ModMatrix
			size: 12
			color: rgb(223,169,41)
	promo label 2:
		left: 278
		top: 190
		width: {if contains(styling.other_options, match:"prerelease stamp") then 214 else 0}
		height: 20
		alignment: middle right
		z index: 4
		font:
			name: ModMatrix
			size: 12
			color: rgb(223,169,41)
	flavor bar:
		left: 25
		top: { bar_equation() +1 }
		width: 250
		height: 1
		z index: 1
		render style: image
		image: bar.png
		visible: { card.rule_text != "" and remove_tags(card.flavor_text) != "" and set.use_flavor_bar }
	flavor bar 2:
		left: 265
		top: { bar_equation2() +1 }
		width: 250
		height: 1
		z index: 1
		render style: image
		image: bar.png
		visible: { card.rule_text_2 != "" and remove_tags(card.flavor_text_2) != "" and set.use_flavor_bar }
