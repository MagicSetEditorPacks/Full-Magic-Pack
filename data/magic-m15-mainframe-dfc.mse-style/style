mse version: 2.0.0
game: magic
short name: Mainframe DFC
full name: M15 DFCs
installer group: magic/m15 style/double-faced cards
icon: card-sample.png
position hint: 005

version: 2024-01-05
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2017-05-05
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-pride.mse-include
	version: 2021-05-26

card width: 752
card height: 523
card dpi: 150
############################################################## Extra scripts
init script:
	# Load scripts for image box
	include file: /magic-default-image.mse-include/scripts
	include file: /magic-pride.mse-include/scripts
	# Should hybrids have a grey name?
	mask_hybrid_with_land := { styling.grey_hybrid_name }
	d20_filter := replace@(match:"^(|[Ee]lse ?|[Oo]ther ?|((</sym>)?[-0-9 ,+>\<](<sym>)?)+)[|]", replace:"<b>\\1</b>|")
	text_filter := text_filter + d20_filter + {apply_margins(input, name:margin_code)} + {add_spacers(input, name:margin_code)} + {if is_modal(input) then bump_text(softline_ripper(input)) else input}

	####### Create images

	template_prefix := [card: "normal/" card2: "normal/" card3: "planeswalker/" card4: "planeswalker/" card5: "planeswalker/" card6: "planeswalker/" arrow: "arrows/", slide: "masks/", slide2: "masks/", slide5: "masks/", slide3: "mask_back/", slide4: "mask_back/", slide6: "mask_back/", nyx: "nyx/" miracle: "miracles/" miracle2: "miracles/" legend: "legend/" legend2: "legend/" curtain: "curtains/" map: "maps/" mappt: "maps/" pt: "normal/" pt2: "normal/" saga:"saga/" stamp2: "normal/" stamp3: "planeswalker/" stamp: "" identity: "/magic-identity-new.mse-include/" identity2: "/magic-identity-new.mse-include/" snow:"snow/" snowtexture:"snow/" alias:"" alias2:"" icon:"icons/" icon2:"icons/" flag:"flags/" flag2:"flags/" mark:"bookmarks/" unnotch:"unnotched/"]
	template_suffix := [card: "card.jpg" card2: "card2.jpg" card3: "card.png" card4: "card2.png" card5: "card3.png" card6: "card4.png" arrow: "arrow.png", slide: "slide.png", slide2: "slide2.png", slide5: "slide3.png", slide3: "slide.png", slide4: "slide2.png", slide6: "slide3.png", nyx: "nyx.png" miracle: "miracle.png" miracle2: "miracle2.png" legend: "crown.png" legend2: "crown.png" curtain: "card.png" map: "card.png" mappt: "pt.png" saga:"card.jpg", stamp: "stamp.jpg" stamp2: "stamp.jpg" stamp3: "stamp.png" pt: "pt.png" pt2: "pt2.png" identity: "identity.png" identity2: "identity.png" snow:"card.jpg" snowtexture:"snow.png" alias:"alias.png" alias2:"alias.png" icon:"arrow.png" icon2:"arrow2.png" flag:"flag.png" flag2:"flag2.png" mark:"mark.png" unnotch:"card.jpg"]
	template      := { switch_lead(type) + template_prefix[type] + input + switch_follow(type) + template_suffix[type] }
	land_template := { switch_lead(type) + template_prefix[type] + (if input == "a" then "c" else input) + (if landless(type) then "" else "l") + switch_follow(type) + template_suffix[type] }
	landless := {if input == "arrow" or input == "nyx" or input == "comcrown" or input == "cons" or input == "icon" or input == "crown" or input == "nyxcrown" or input == "card3" or input == "card4" or input == "card5" or input == "card6" or input == "stamp3" or input == "flag" or input == "flag2" or input == "alias" or input == "alias2" or input == "icon" or input == "icon2" then true else false}
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	####### Control weird images
	switch_lead := {
		if (input == "legend" or input == "legend2") and (styling.legend_crown == "custom" and styling.custom_crown_location != "")
			then "/magic-mainframe-extras.mse-include/" + styling.custom_crown_location
		else if input == "alias"
			then (if mainframe_walker() then "alias/walker/" else "alias/normal/")
		else if input == "alias2"
			then (if mainframe_walkerb() then "alias/walker/" else "alias/normal/")
		else if input == "miracle" and is_snow()
			then "snow/"
		else if input == "miracle2" and back_snow()
			then "snow/"
		else ""
	}
	switch_follow := {
		if (input == "legend" or input == "legend2") then (
		  if is_full()
			  then "bl"
			else if styling.legend_crown == "nyx" or (check_nyx(input) and chosen(styling.other_options, choice:"auto nyx crowns"))
				then "nyx"
			else if styling.legend_crown == "companion"
				then "com"
			else ""
		)
		else ""
	}
	check_nyx := {
		if input == "legend" and is_nyx()
			then true
		else if input == "legend2" and back_nyx()
			then true
		else false
	}
	loyalty_image_name := {
		if      contains(input, match: "+") then "loyaltyup.png"
		else if contains(input, match: "-") then "loyaltydown.png"
		else                                     "loyaltynaught.png"
	}

	# The normal backface
	card_background2 := { color_background(type:"card2", base_hybrid:card_hybrid) }
	# The planeswalker front face
	card_background3 := { color_background(type:"card3", base_hybrid:card_hybrid) }
	# The planeswalker backface
	card_background4 := { color_background(type:"card4", base_hybrid:card_hybrid) }
	# The 4walker front face
	card_background5 := { color_background(type:"card5", base_hybrid:card_hybrid) }
	# The 4walker backface
	card_background6 := { color_background(type:"card6", base_hybrid:card_hybrid) }
	# The nyx frontface
	nyx_background := { color_background(type:"nyx", base_hybrid:card_hybrid) }
	# The miracle frontface
	miracle_background := { color_background(type:"miracle", base_hybrid:card_hybrid) }
	# The miracle backface
	miracle_background2 := { color_background(type:"miracle2", base_hybrid:card_hybrid) }
	# The legend frontface
	legend_background := { color_background(type:"legend", base_hybrid:card_hybrid) }
	# The legend backface
	legend_background2 := { color_background(type:"legend2", base_hybrid:card_hybrid) }
	# The front map face
	map_background := { color_background(type:"map", base_hybrid:card_hybrid) }

	saga_background := { color_background(type:"saga", base_hybrid:card_hybrid) }
	unnotched_background := { color_background(type:"unnotch", base_hybrid:card_hybrid) }
	bookmark_background := { color_background(type:"mark", base_hybrid:card_hybrid) }
	snow_background := { color_background(type:"snow", base_hybrid:card_hybrid) }
	snow_texture := { color_background(type:"snowtexture", base_hybrid:card_hybrid) }
	curtain_background := { color_background(type:"curtain", base_hybrid: card_hybrid)}
	arrow_background := { color_background(type:"arrow",     base_hybrid:pt_hybrid) }
	alias_bar := { color_background(type:"alias", base_hybrid:card_hybrid) }
	alias_bar2 := { color_background(type:"alias2", base_hybrid:card_hybrid) }

	# pt scripts
	card_ptbox2 := { color_background(type:"pt2",       base_hybrid:pt_hybrid) }
	card_mapbox := { color_background(type:"mappt",       base_hybrid:pt_hybrid) }
	walker_stamp := { color_background(type:"stamp3",       base_hybrid:card_hybrid) }
	# modal dfc flag scripts
	front_flag_image := { color_background(type:"flag", base_hybrid:card_hybrid) }
	back_flag_image := { color_background(type:"flag2", base_hybrid:card_hybrid) }
	front_arrow_image := { color_background(type:"icon", base_hybrid:flip_pt_hybrid2) }
	back_arrow_image := { color_background(type:"icon2", base_hybrid:flip_pt_hybrid2) }

	# Use the normal tap symbol
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}

	# Use guild mana symbols?
	guild_mana := { styling.use_guild_mana_symbols }


	# Loyalty cost arrows
	loyalty_image := {
		if      contains(input, match: "+") then "loyalty up"
		else if contains(input, match: "-") then "loyalty down"
		else                                     "loyalty naught"
	}

	####### Shape things
	card_shape := {if contains(styling.dfc_type, match: "modal") then "modal double faced" else "transform double faced"}
	a_saga := {is_saga() or is_class()}
	b_saga := {back_saga() or back_class()}
	saga_reminder := { if styling.alternate_saga_reminder != "" then styling.alternate_saga_reminder else if is_class() then "Gain the next level as a sorcery to add its ability." else "As this Saga enters and after your draw step, add a lore counter. Sacrifice after III." }
	saga_reminderb := { if styling.alternate_saga_reminder != "" then styling.alternate_saga_reminder else if back_class() then "Gain the next level as a sorcery to add its ability." else "As this Saga enters and after your draw step, add a lore counter. Sacrifice after III." }
	mainframe_walker := {contains(styling.front_style, match:"planeswalker")}
	mainframe_walkerb := {contains(styling.back_style, match:"planeswalker")}

	####### Promo stuff
	is_promo := { chosen(styling.other_options, choice:"promo") }
	is_full := { chosen(styling.other_options, choice:"mythic edition") and not is_map() and not back_map() and not front_clear() and not back_clear() }
	is_unsorted := {chosen(styling.other_options, choice:"remove from autocount")}
	comma_count := filter_text@(match:",")
	paragraph_count :=
		replace@(match:"<soft-line>\n", replace:"")+
		filter_text@(match:"\n")

	######## General Stuff
	is_stamped := { is_rare() and chosen(styling.other_options, choice:"use holofoil stamps") }
	is_normal_size := { not chosen(styling.other_options, choice:"wider planeswalker images") }
	lv_chop := { pull_comma_array(input, cell:cell, end:0, default:0)}
	loyal_move := { pull_comma_array(input, cell:cell, end:0, default:0)}
	use_evobar := {chosen(styling.other_options, choice: "pokemon evobar") and not chosen(styling.other_options, choice:"godzilla style alias")}
	opacity := {pull_comma_array(styling.opacity, cell:input, end:false, default:50)}
	is_pinned := {chosen(styling.other_options, choice:"pride pinlines")}

	####### Front Face Variables
	is_normal := { not contains(styling.front_style, match:"planeswalker") }
	front_clear := {chosen(styling.other_options, choice:"clear front")}
	has_identity := { chosen(styling.other_options, choice:"front color indicator")}
	is_miracle := {styling.front_style == "miracle"}
	is_class := {styling.front_style == "class"}
	is_nyx := {styling.front_style == "nyx" or chosen(styling.other_options, choice:"nyx front")}
	is_vehicle := {styling.front_style == "vehicle" or chosen(styling.other_options, choice:"vehicle front") or (chosen(styling.other_options, choice:"automate type frames") and lang_setting("is_vehicle")(card.sub_type))}
	is_map := {styling.front_style == "map"}
	is_snow := {styling.front_style == "snow" or chosen(styling.other_options, choice:"snow front") or (chosen(styling.other_options, choice:"automate type frames") and lang_setting("is_snow")(card.super_type))}
	is_saga := {two_boxes() or three_boxes() or four_boxes()}
	is_legend := {is_normal() and not is_map() and (chosen(styling.other_options, choice:"legendary front") or (lang_setting("is_legendary")(card.super_type) and set.auto_legends)) }
	is_curtains := {contains(card.notes, match:"!curtain")}
	is_mutate := {chosen(styling.other_options, choice:"front mutate") and is_normal() and not is_full() and not is_saga() and not is_map() and not front_clear()}
	is_leveler := {styling.front_style == "leveler"}
	poke_walker := {mainframe_walker() and not is_full() and use_evobar()}
	is_skinned := {not is_saga() and chosen(styling.other_options, choice:"godzilla style alias")}
	use_vorthos := {chosen(styling.other_options, choice:"vorthos box")}

	# Back Face
	back_normal := { not contains(styling.back_style, match:"planeswalker") }
	has_identity2 := { chosen(styling.other_options, choice:"back color indicator") and not contains(card.card_color_2, match:"colorless")}
	back_clear := {chosen(styling.other_options, choice:"clear back")}
	back_miracle := {styling.back_style == "miracle"}
	back_class := {styling.back_style == "class"}
	back_nyx := {styling.back_style == "nyx" or chosen(styling.other_options, choice:"nyx back")}
	back_vehicle := {styling.back_style == "vehicle" or chosen(styling.other_options, choice:"vehicle back") or (chosen(styling.other_options, choice:"automate type frames") and lang_setting("is_vehicle")(card.sub_type_2))}
	back_map := {styling.back_style == "map"}
	back_snow := {styling.back_style == "snow" or chosen(styling.other_options, choice:"snow back") or (chosen(styling.other_options, choice:"automate type frames") and lang_setting("is_snow")(card.super_type_2))}
	back_saga := {back_two_boxes() or back_three_boxes() or back_four_boxes()}
	back_legend := {back_normal() and not back_map() and (chosen(styling.other_options, choice: "legendary back") or (set.auto_legends and lang_setting("is_legendary")(card.super_type_2)))}
	back_mutate := {chosen(styling.other_options, choice:"back mutate") and back_normal() and not is_full() and not back_saga() and not back_map() and not back_clear()}
	back_poke_walker := {mainframe_walkerb() and not is_full() and use_evobar()}
	back_leveler := {styling.back_style == "leveler"}
	back_skinned := {not back_saga() and chosen(styling.other_options, choice:"godzilla style alias")}


	top_of_textbox := {(if is_class() then 60 else if mainframe_walker() then (if has_four_abilities() then 292+(if front_clear() then 5 else 0) else 329) else if is_map() then 340 else if is_mutate() then 395 else 327)-lv_chop(styling.level_1_chop, cell:0)}
	bottom_of_textbox := {(if is_class() then 437 else if mainframe_walker() then 477-(if is_modal_dfc() then 5 else if is_stamped() then 2 else 0) else if is_map() then 475 else 481)-lv_chop(styling.level_1_chop, cell:1)}

	top_of_textbox2 := {(if back_class() then 60 else if mainframe_walkerb() then (if back_four_abilities() then 292+(if back_clear() then 5 else 0) else 329) else if back_map() then 340 else if back_mutate() then 394 else 327)-lv_chop(styling.level_5_chop, cell:0)}
	bottom_of_textbox2 := {(if back_class() then 437 else if mainframe_walkerb() then 477-(if is_modal_dfc() then 5 else 0) else if back_map() then 475 else 481)-lv_chop(styling.level_5_chop, cell:1)}

	mask_script := { if contains(styling.custom_mask, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_mask
		else if a_saga() then ""
		else if is_full() and is_normal() and not is_saga() and not is_map() then "borderless_mask" + (if is_stamped() then "_rare" else "") + (if not is_modal_dfc() then "_transform" else "") + ".png"
		else if front_clear() and is_normal() then "imagemask_clear_normal.png"
		else if front_clear() then "imagemask_clear.png"
		else if is_mutate() then "mutate_mask.png"
		else if not mainframe_walker() then ""
		else "planeswalker/guidelines/" + walker_mask_front()
	}
	back_mask_script := { if contains(styling.custom_mask_2, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_mask
		else if b_saga() then ""
		else if is_full() and back_normal() and not back_saga() and not back_map() then "borderless_mask" + (if not is_modal_dfc() then "_transform_back" else "") + ".png"
		else if back_clear() and back_normal() then "imagemask_clear_normal.png"
		else if back_clear() then "imagemask_clear.png"
		else if back_mutate() then "mutate_mask.png"
		else if not mainframe_walkerb() then ""
		else "planeswalker/guidelines/" + walker_mask_back()
	}

	####### Planeswalker stuff
	text_size := { 14 -(if styling.front_font_cap == "" then 0 else to_number(styling.front_font_cap)) }
	text_size2 := { 14 -(if styling.back_font_cap == "" then 0 else to_number(styling.back_font_cap)) }
	stripe01 := {if length(card_style.text.layout.separators) or else 0 > 0 then card_style.text.top + card_style.text.layout.separators[0] -4 else 0}
	stripe12 := {if length(card_style.text.layout.separators) or else 0 > 1 then card_style.text.top + card_style.text.layout.separators[1] -4 else 0}
	stripe23 := {if length(card_style.text.layout.separators) or else 0 > 2 then card_style.text.top + card_style.text.layout.separators[2] -4 else 0}
	stripe34 := {if length(card_style.text.layout.separators) or else 0 > 3 then card_style.text.top + card_style.text.layout.separators[3] -4 else 0}
	stripe45 := {if length(card_style.text.layout.separators) or else 0 > 4 then card_style.text.top + card_style.text.layout.separators[4] -4 else 0}
	stripe01b := {if length(card_style.text_2.layout.separators) or else 0 > 0 then card_style.text_2.top + card_style.text_2.layout.separators[0] -4 else 0}
	stripe12b := {if length(card_style.text_2.layout.separators) or else 0 > 1 then card_style.text_2.top + card_style.text_2.layout.separators[1] -4 else 0}
	stripe23b := {if length(card_style.text_2.layout.separators) or else 0 > 2 then card_style.text_2.top + card_style.text_2.layout.separators[2] -4 else 0}
	stripe34b := {if length(card_style.text_2.layout.separators) or else 0 > 3 then card_style.text_2.top + card_style.text_2.layout.separators[3] -4 else 0}
	stripe45b := {if length(card_style.text_2.layout.separators) or else 0 > 4 then card_style.text_2.top + card_style.text_2.layout.separators[4] -4 else 0}

	abil_center := { if card_style.text.layout.blocks[input].bottom or else 0 > 0 then
			card_style.text.top + card_style.text.layout.blocks[input].middle + overlap_check(input)
		else -30
	}
	overlap_check := {
		if input == 0
			then 0
		else if card_style.text.layout.blocks[input].middle == card_style.text.layout.blocks[input-1].middle
			then 40*(input-1)
		else 0
	}
	max_level_function := [
		"auto": {
			if card.level_4_text != "" and card.level_4_text != "​" then 4
			else if card.level_3_text != "" and card.level_3_text != "​" then 3
			else 2
		},
		"one": {1},
		"two": {2},
		"three": {3},
		"four": {4},
		"none": {0}
	]
	max_level := {max_level_function[force_level()]()}
	mainframe_walker_text_script := {
		if max_level() == 1 or (max_level() == 2 and card.level_2_text == "") or force_level() == "two" then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text)
		else if max_level() == 2 or force_level() == "three" then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
		else if max_level() >= 3 or force_level() == "four" then
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text, separator3: "<line>\n</line>", field4: card.level_4_text)
		else
			combined_editor(field1: card.level_1_text, separator1: "<line>\n</line>", field2: card.level_2_text, separator2: "<line>\n</line>", field3: card.level_3_text)
	}
	loyal_move := {
		if input == 2 and (card.level_2_text == "" or card.level_2_text == "​") then -15
		else if input == 3 and (card.level_3_text == "" or card.level_3_text == "​") then -5
		else if input == 6 and (card.level_6_text == "" or card.level_6_text == "​") then -15
		else if input == 7 and (card.level_7_text == "" or card.level_7_text == "​") then -5
		else if input > 3 then pull_comma_array(styling.move_back_loyalty_costs, cell:input, end:0, default:0)
		else pull_comma_array(styling.move_loyalty_costs, cell:input, end:0, default:0)
	}
	loyal_moveb := {loyal_move(input+4)}
	abil_centerb := { if card_style.text_2.layout.blocks[input].bottom or else 0 > 0 then
			card_style.text_2.top + card_style.text_2.layout.blocks[input].middle + overlap_checkb(input)
		else -30
	}
	overlap_checkb := {
		if input == 0
			then 0
		else if card_style.text_2.layout.blocks[input].middle == card_style.text_2.layout.blocks[input-1].middle
			then 40*(input-1)
		else 0
	}
	max_level_functionb := [
		"auto": {
			if card.level_8_text != "" and card.level_8_text != "​" then 4
			else if card.level_7_text != "" and card.level_7_text != "​" then 3
			else 2
		},
		"one": {1},
		"two": {2},
		"three": {3},
		"four": {4},
		"none": {0}
	]
	max_levelb := {max_level_functionb[force_levelb()]()}
	mainframe_walker_text_scriptb := {
		if max_levelb() == 1 or (max_levelb() == 2 and card.level_6_text == "") or force_levelb() == "two" then
			combined_editor(field1: card.level_5_text, separator1: "<line>\n</line>", field2: card.level_6_text)
		else if max_levelb() == 2 or force_levelb() == "three" then
			combined_editor(field1: card.level_5_text, separator1: "<line>\n</line>", field2: card.level_6_text, separator2: "<line>\n</line>", field3: card.level_7_text)
		else if max_levelb() >= 3 or force_levelb() == "four" then
			combined_editor(field1: card.level_5_text, separator1: "<line>\n</line>", field2: card.level_6_text, separator2: "<line>\n</line>", field3: card.level_7_text, separator3: "<line>\n</line>", field4: card.level_8_text)
		else
			combined_editor(field1: card.level_5_text, separator1: "<line>\n</line>", field2: card.level_6_text, separator2: "<line>\n</line>", field3: card.level_7_text)
	}
	margin_left := {
		if not (mainframe_walker() or mainframe_walkerb()) then 0
		else if input == "lv1" then (if card.loyalty_cost_1 == "" and unindent() then 0 else 130)
		else if input == "lv2" then (if card.loyalty_cost_2 == "" and unindent() then 0 else 130)
		else if input == "lv3" then (if card.loyalty_cost_3 == "" and unindent() then 0 else 130)
		else if input == "lv4" then (if card.loyalty_cost_4 == "" and unindent() then 0 else 130)
		else if not mainframe_walkerb() then 0
		else if input == "lv5" then (if card.loyalty_cost_5 == "" and unindent() then 0 else 130)
		else if input == "lv6" then (if card.loyalty_cost_6 == "" and unindent() then 0 else 130)
		else if input == "lv7" then (if card.loyalty_cost_7 == "" and unindent() then 0 else 130)
		else if input == "lv8" then (if card.loyalty_cost_8 == "" and unindent() then 0 else 130)
		else 0
	}
	margin_top := {
		if is_class() and (input == "lv2" or (input == "lv3" and card.level_3_text != "​") or (input == "lv4" and card.level_4_text != "")) and (input == "lv1" or input == "lv2" or input == "lv3" or input == "lv4") then
			30
		else if input == "lv1" or input == "lv2" or input == "lv3" or input == "lv4" then
			lv_chop(styling.level_1_chop, cell:3)
		else if back_class() and (input == "lv6" or (input == "lv7" and card.level_7_text != "​") or (input == "lv8" and card.level_8_text != "")) and (input == "lv5" or input == "lv6" or input == "lv7" or input == "lv8") then
			30
		else if input == "lv5" or input == "lv6" or input == "lv7" or input == "lv8" then
			 lv_chop(styling.level_5_chop, cell:3)
		else 0
	}
	add_spacers := { if input == "" and inner_level(name) then "​" else input}
	inner_level := {
		if input == "lv4" and max_level() > 4 then true
		else if input == "lv3" and (is_class() or max_level() > 3) then true
		else if input == "lv2" and (is_class() or max_level() > 2) then true
		else if input == "lv1" and (is_class() or max_level() > 1) then true
		else if input == "lv8" and max_level() > 8 then true
		else if input == "lv7" and (back_class() or max_level() > 7) then true
		else if input == "lv6" and (back_class() or max_level() > 6) then true
		else if input == "lv5" and (back_class() or max_level() > 5) then true
		else false
	}
	force_tall := { contains(styling.other_options, match:"force fourwalker front")}
	force_tallb := { contains(styling.other_options, match:"force fourwalker back")}
	force_level := {
		if styling.front_style == "1 ability planeswalker" then "one"
		else if styling.front_style == "2 ability planeswalker" then "two"
		else if styling.front_style == "3 ability planeswalker" then "three"
		else if styling.front_style == "4 ability planeswalker" then "four"
		else if mainframe_walker() then "auto"
		else "none"
	}
	force_levelb := {
		if styling.back_style == "1 ability planeswalker" then "one"
		else if styling.back_style == "2 ability planeswalker" then "two"
		else if styling.back_style == "3 ability planeswalker" then "three"
		else if styling.back_style == "4 ability planeswalker" then "four"
		else if mainframe_walkerb() then "auto"
		else "none"
	}
	has_four_abilities := { max_level() > 3 or force_tall()}
	has_two_abilities := { max_level() < 3 and max_level() > 0}
	back_four_abilities := { max_levelb() > 3 or force_tallb()}
	back_two_abilities := { max_levelb() < 3 and max_levelb() > 0}
	walker_mask_front := {
		(if front_clear() then "clear_" else if is_normal_size() or is_full() then "" else "wide_")
		+ (if is_full() then ("mythic_mask" + (if max_level() > 3 or force_tall() then "_four" else "") + (if is_stamped() then "_rare" else "")))
		+ (if not is_full() then ((if max_level() > 3 or force_tall() then "four_" else "") + "frame_mask") else "")
		+ ".png"
	}
	walker_mask_back := {
		(if back_clear() then "clear_" else if is_normal_size() or is_full() then "" else "wide_")
		+ (if is_full() then ("mythic_mask" + (if max_levelb() > 3 or force_tallb() then "_four" else "") + "_back"))
		+ (if not is_full() then ((if max_levelb() > 3 or force_tallb() then "four_" else "") + "frame_mask") else "")
		+ ".png"
	}


	##### leveler stuff
	box_leveler := {styling.level_containers == "pt boxes"}
	loy_leveler := {styling.level_containers == "loyalty boxes"}
	aug_leveler := {box_leveler() and center_label(input)}
	level_label := {if styling.level_label == "" then "level" else pull_comma_array(styling.level_label, end:false, cell:input, default:styling.level_label)}
	center_label := {loy_leveler() or level_label(input) == " "}
	lv_1_height := {lv_2_coordinate()}
	lv_2_coordinate := {max(min(52 + to_number(pull_comma_array(styling.stripe_coordinate, cell:0)),152), 0)}
	lv_3_coordinate := {max(min(101 + to_number(pull_comma_array(styling.stripe_coordinate, cell:1)),152), lv_2_coordinate())}
	lv_4_coordinate := {max(min(152 + to_number(pull_comma_array(styling.stripe_coordinate, cell:2)),152), lv_3_coordinate())}
	lv_2_height := {lv_3_coordinate() - lv_2_coordinate()}
	lv_3_height := {lv_4_coordinate()-lv_3_coordinate()}
	lv_4_height := {152-lv_4_coordinate()}
	l1_center := {327 + 0.5*lv_1_height()}
	l2_center := {327 + lv_2_coordinate() + 0.5*lv_2_height()}
	l3_center := {327 + lv_3_coordinate() + 0.5*lv_3_height()}
	l4_center := {327 + lv_4_coordinate() + 0.5*lv_4_height()}
	mask_height := {if input == "one" then lv_1_height() else if input == "two" then lv_2_height() else lv_3_height()}
	lone_pt := {chosen(styling.other_options, choice:"regular pt on levelers")}
	lv_2_ptbox := { if is_vehicle() then "vpt.png" else if front_clear() then "xpt.png" else leveler_ptbox2() }
	lv_3_ptbox := { if is_vehicle() then "vpt.png" else if front_clear() then "xpt.png" else leveler_ptbox3() }
	arrow_left := {if box_leveler() then -3 else if loy_leveler() then 10 else 18}
	arrow_width := {if box_leveler() then 84 else if loy_leveler() then 42 else 56}
	arrow_height := {if aug_leveler(input) then 42 else if box_leveler() then 50 else if loy_leveler() then 40 else 40}

	box_leveler2 := {styling.level_containers_2 == "pt boxes"}
	loy_leveler2 := {styling.level_containers_2 == "loyalty boxes"}
	aug_leveler2 := {box_leveler2() and center_label2(input)}
	center_label2 := {loy_leveler2() or level_label(input+3) == " "}
	lv_5_height := {lv_6_coordinate()}
	lv_6_coordinate := {max(min(52 + to_number(pull_comma_array(styling.back_stripe_coordinate, cell:0)),152), 0)}
	lv_7_coordinate := {max(min(101 + to_number(pull_comma_array(styling.back_stripe_coordinate, cell:1)),152), lv_6_coordinate())}
	lv_8_coordinate := {max(min(152 + to_number(pull_comma_array(styling.back_stripe_coordinate, cell:2),152)), lv_7_coordinate())}
	lv_6_height := {lv_7_coordinate() - lv_6_coordinate()}
	lv_7_height := {lv_8_coordinate()-lv_7_coordinate()}
	lv_8_height := {152-lv_8_coordinate()}
	l5_center := {327 + 0.5*lv_5_height()}
	l6_center := {327 + lv_6_coordinate() + 0.5*lv_6_height()}
	l7_center := {327 + lv_7_coordinate() + 0.5*lv_7_height()}
	l8_center := {327 + lv_8_coordinate() + 0.5*lv_8_height()}
	mask_height := {if input == "one" then lv_5_height() else if input == "two" then lv_6_height() else lv_7_height()}
	lv_6_ptbox := { if back_vehicle() then "vpt.png" else if back_clear() then "xpt.png" else leveler_ptbox2() }
	lv_7_ptbox := { if back_vehicle() then "vpt.png" else if back_clear() then "xpt.png" else leveler_ptbox3() }
	arrow_left2 := {377 + if box_leveler2() then -3 else if loy_leveler2() then 10 else 18}
	arrow_width2 := {if box_leveler2() then 84 else if loy_leveler2() then 42 else 56}
	arrow_height2 := {if aug_leveler2(input) then 42 else if box_leveler2() then 50 else if loy_leveler2() then 40 else 40}

	arrow_offset := {
		to_number(pull_comma_array(styling.move_loyalty_costs, cell:input, end: 0))
		+ (if box_leveler() then -5 else 0)
		+ (if aug_leveler(input) then 4 else 0)
	}
	arrow_offset2 := {
		to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:input, end: 0))
		+ (if box_leveler2() then -5 else 0)
		+ (if aug_leveler2(input) then 4 else 0)
	}

	##### saga stuff
	split_12 := {to_number(pull_comma_array(styling.stripe_coordinate, cell:0, end:true, default:(if two_boxes() then 296 else if four_boxes() then 225 else 249)))}
	split_23 := {to_number(pull_comma_array(styling.stripe_coordinate, cell:1, end:true, default:(if two_boxes() then 437 else if four_boxes() then 296 else 343)))}
	split_34 := {to_number(pull_comma_array(styling.stripe_coordinate, cell:2, end:true, default:(if three_boxes() then 437 else if four_boxes() then 367 else 600)))}
	split_12b := {to_number(pull_comma_array(styling.back_stripe_coordinate, cell:0, end:true, default:(if back_two_boxes() then 296 else if back_four_boxes() then 225 else 249)))}
	split_23b := {to_number(pull_comma_array(styling.back_stripe_coordinate, cell:1, end:true, default:(if back_two_boxes() then 437 else if back_four_boxes() then 296 else 343)))}
	split_34b := {to_number(pull_comma_array(styling.back_stripe_coordinate, cell:2, end:true, default:(if back_three_boxes() then 437 else if back_four_boxes() then 367 else 600)))}

	coords_map := [
		1: {[card_style.level_1_text.top, card_style.level_1_text.bottom-card_style.level_1_text.top]},
		2: {[card_style.level_2_text.top, card_style.level_2_text.bottom-card_style.level_2_text.top]},
		3: {[card_style.level_3_text.top, card_style.level_3_text.bottom-card_style.level_3_text.top]},
		4: {[card_style.level_4_text.top, card_style.level_4_text.bottom-card_style.level_4_text.top]},
		5: {[card_style.level_5_text.top, card_style.level_5_text.bottom-card_style.level_5_text.top]}
		6: {[card_style.level_6_text.top, card_style.level_6_text.bottom-card_style.level_6_text.top]}
		7: {[card_style.level_7_text.top, card_style.level_7_text.bottom-card_style.level_7_text.top]}
		8: {[card_style.level_8_text.top, card_style.level_8_text.bottom-card_style.level_8_text.top]}
	]
	auto_snap := {
		snap_array := split_text(replace(line, match:",[^,]+$", replace:","), match:",")
		abil := to_number(pull_comma_array(line, cell:input-1, end:true))											###textbox to snap to
		if abil == 0 then 600 else snap_calc(input, snap_array:snap_array, abil:abil, bump:bump)
	}@(bump:0)
	snap_calc := {
		out := 0
		abil_array := saga_lore_count(snap_array)																	###chapters in each box
		ch_count := abil_array[abil-1]																				###chapters in this box
		self_index := saga_ch_placement(snap_array)[input-1]														###input's index
		box_deets := coords_map[abil+bump]()																		###[top, height]
		remain := box_deets[1] - 30*ch_count																		###remaining space after chapter hexes
		excess := remain - 10*(ch_count-1)																			###remaining after 10px gaps
		if excess >= 0 then out := box_deets[0] + excess/2 + 40*(self_index-1)										###top + buffer*index + hex*index-1
		else (																										###may not be enough room to ten-gap the middle
			inner_gap := 10
			squeeze := 0
			outer_gap := (remain - inner_gap * (ch_count-1))/2
			if outer_gap < -6 then (
				squeeze := 2*(outer_gap+6)/(ch_count-1);
				outer_gap := -6
			)
			inner_gap := inner_gap + squeeze
			out := box_deets[0] + outer_gap + (self_index-1)*(30+inner_gap)
		)
		out
	}
	chapter0 := { if styling.reminder_coordinate != "" then max(60,min(to_number(styling.reminder_coordinate),438)) else 155}
	chapter1 := { if length(comma_count(styling.snap_chapter_to_box)) > 0 then auto_snap(1, line:styling.snap_chapter_to_box) else to_number(pull_comma_array(styling.move_loyalty_costs, cell:0, end:true, default:(if two_boxes() then 183 else 185))) }
	chapter2 := { if length(comma_count(styling.snap_chapter_to_box)) > 1 then auto_snap(2, line:styling.snap_chapter_to_box) else to_number(pull_comma_array(styling.move_loyalty_costs, cell:1, end:true, default:(if two_boxes() then 223 else 279))) }
	chapter3 := { if length(comma_count(styling.snap_chapter_to_box)) > 2 then auto_snap(3, line:styling.snap_chapter_to_box) else to_number(pull_comma_array(styling.move_loyalty_costs, cell:2, end:true, default:(if two_boxes() then 329 else 373))) }
	chapter4 := { if length(comma_count(styling.snap_chapter_to_box)) > 3 then auto_snap(4, line:styling.snap_chapter_to_box) else to_number(pull_comma_array(styling.move_loyalty_costs, cell:3, end:true, default:600)) }
	chapter5 := { if length(comma_count(styling.snap_chapter_to_box)) > 4 then auto_snap(5, line:styling.snap_chapter_to_box) else to_number(pull_comma_array(styling.move_loyalty_costs, cell:4, end:true, default:600)) }
	chapter6 := { if length(comma_count(styling.snap_chapter_to_box)) > 5 then auto_snap(6, line:styling.snap_chapter_to_box) else to_number(pull_comma_array(styling.move_loyalty_costs, cell:5, end:true, default:600)) }

	chapter1b := { if length(comma_count(styling.snap_chapter_to_back_box)) > 0 then auto_snap(1, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:0, end:true, default:(if back_two_boxes() then 183 else 185))) }
	chapter2b := { if length(comma_count(styling.snap_chapter_to_back_box)) > 1 then auto_snap(2, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:1, end:true, default:(if back_two_boxes() then 223 else 279))) }
	chapter3b := { if length(comma_count(styling.snap_chapter_to_back_box)) > 2 then auto_snap(3, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:2, end:true, default:(if back_two_boxes() then 329 else 373))) }
	chapter4b := { if length(comma_count(styling.snap_chapter_to_back_box)) > 3 then auto_snap(4, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:3, end:true, default:600)) }
	chapter5b := { if length(comma_count(styling.snap_chapter_to_back_box)) > 4 then auto_snap(5, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:4, end:true, default:600)) }
	chapter6b := { if length(comma_count(styling.snap_chapter_to_back_box)) > 5 then auto_snap(6, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.move_back_loyalty_costs, cell:5, end:true, default:600)) }

	chapter_custom := { if to_number(pull_comma_array(styling.snap_chapter_to_box, cell:6, end:true)) > 0 then auto_snap(7, line:styling.snap_chapter_to_box, bump:0) else to_number(pull_comma_array(styling.custom_chapter_coordinate, cell:0, end:false, default:600)) }
	chapter_customb := { if to_number(pull_comma_array(styling.snap_chapter_to_back_box, cell:6, end:true)) > 0 then auto_snap(7, line:styling.snap_chapter_to_back_box, bump:4) else to_number(pull_comma_array(styling.custom_chapter_coordinate, cell:0, end:false, default:600)) }
	custom_chapter_node := {if contains(styling.custom_chapter_location, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_chapter_location else "saga/chapter6.png"}
	custom_name := {if styling.custom_chapter_name == "" then "C" else styling.custom_chapter_name}

	two_boxes := {styling.front_style == "2 box saga"}
	three_boxes := {styling.front_style == "3 box saga"}
	four_boxes := {styling.front_style == "4 box saga"}
	back_two_boxes := {styling.back_style == "2 box saga"}
	back_three_boxes := {styling.back_style == "3 box saga"}
	back_four_boxes := {styling.back_style == "4 box saga"}
	alt_loc := { if styling.replacement_chapter_location != "" then styling.replacement_chapter_location else "no"}
	alt_chapters := { (if match(styling.replacement_chapter_location, match:"/$") then "/magic-mainframe-extras.mse-include/" + styling.replacement_chapter_location else "saga/") + "chapter" + input + ".png"}

	build_array := {
		if input > 523 or input < 0 then 0
		else if four_boxes() and input +17 >= (if split_34() != "" then split_34() else 600) then 4
		else if (four_boxes() or three_boxes()) and input +17 >= (if split_23() != "" then split_23() else 343) then 3
		else if input +17 >= (if split_12() != "" then split_12() else 249) then 2
		else if input +17 <= (if split_12() != "" then split_12() else 249) then 1
		else 0
	}
	alt_leaders := {
		alt := ["I,","II,","III,""IV,","V,","VI,"]
		if match(card.notes, match:"!altleader [^,]+,") then
			alt := break_text(split_text(card.notes, match:"!altleader ").1, match:"[^,]+,")
		alt
	}
	level_leader := {
		alt := alt_leaders()
		(if build_array((if chapter1() != "" then chapter1() else 185)) == input then alt.0 + " " else "")
		+(if build_array((if chapter2() != "" then chapter2() else 279)) == input then alt.1 + " " else "")
		+(if build_array((if chapter3() != "" then chapter3() else 373)) == input then alt.2 + " " else "")
		+(if build_array((if chapter4() != "" then chapter4() else 600)) == input then alt.3 + " " else "")
		+(if build_array((if chapter5() != "" then chapter5() else 600)) == input then alt.4 + " " else "")
		+(if build_array((if chapter6() != "" then chapter6() else 600)) == input then alt.5 + " " else "")
		+(if build_array((if chapter_custom() != "" then chapter_custom() else 600)) == input then custom_name() + ", " else "")
	}
	build_array2 := {
		if input > 523 or input < 0 then 0
		else if back_four_boxes() and input +17 >= (if split_34b() != "" then split_34b() else 600) then 4
		else if (back_four_boxes() or back_three_boxes()) and input +17 >= (if split_23b() != "" then split_23b() else 343) then 3
		else if input +17 >= (if split_12b() != "" then split_12b() else 249) then 2
		else if input +17 <= (if split_12b() != "" then split_12b() else 249) then 1
		else 0
	}
	level_leader2 := {
		alt := alt_leaders()
		(if build_array((if chapter1b() != "" then chapter1b() else 185)) == input then alt.0 + " " else "")
		+(if build_array((if chapter2b() != "" then chapter2b() else 279)) == input then alt.1 + " " else "")
		+(if build_array((if chapter3b() != "" then chapter3b() else 373)) == input then alt.2 + " " else "")
		+(if build_array((if chapter4b() != "" then chapter4b() else 600)) == input then alt.3 + " " else "")
		+(if build_array((if chapter5b() != "" then chapter5b() else 600)) == input then alt.4 + " " else "")
		+(if build_array((if chapter6b() != "" then chapter6b() else 600)) == input then alt.5 + " " else "")
		+(if build_array((if chapter_customb() != "" then chapter_customb() else 600)) == input then custom_name() + ", " else "")
	}
	end_leader := replace@(match:", $", replace:" — ")

	##### d20 stuff
	is_d20 := {styling.d20_dividers != "off" and not is_leveler()}
	is_all_break := {contains(styling.d20_dividers, match:"all breaks")}
	d20string := "^(<b>)?(((</sym>)?[-0-9 ,+>\<](<sym>)?)+|[Ee]lse|[Oo]ther) ?(</b>)?[|]"
	d20_array :=
		filter_text@(match:"(\n|"+d20string+")")
		+split_text@(match:d20string)
	number_of_rolls := {if is_all_break() then 1+length(filter_text(card.rule_text, match:"\n"))-rolls_start(card.text) else length(d20_array(input))-1}
	rolls_start := {
		if styling.d20_dividers == "all breaks +3" then 4
		else if styling.d20_dividers == "all breaks +2" then 3
		else if styling.d20_dividers == "all breaks +1" then 2
		else if styling.d20_dividers == "all breaks" then 0
		else if is_d20() then length(d20_array(input).0)
		else 0
	}
	top_of_para := {
		input := input + no_roll(card.text)
		if card_style.text.layout.paragraphs[input].top or else 0 > 0 then
			card_style.text.top + card_style.text.layout.paragraphs[input].top - 0.5*(card_style.text.layout.paragraphs[input].top-card_style.text.layout.paragraphs[input-1].bottom)
		else 0
	}
	height_of_para := {
		input := input + no_roll(card.text)
		if card_style.text.layout.paragraphs[input].bottom or else 0 > 0 then
			card_style.text.layout.paragraphs[input].bottom + 1.3*(card_style.text.layout.paragraphs[input].top-card_style.text.layout.paragraphs[input-1].bottom) - card_style.text.layout.paragraphs[input].top
		else 0
	}
	no_roll := {if styling.d20_dividers == "all breaks" then 1 else if rolls_start(input) == 0 then 1 else 0}

	back_d20 := {styling.d20_dividers_back != "off" and not back_leveler()}
	back_all_break := {contains(styling.d20_dividers_back, match:"all breaks")}
	number_of_rolls_b := {if back_all_break() then 1+length(filter_text(card.rule_text_2, match:"\n"))-rolls_start_b(card.text) else length(d20_array(input))-1}
	rolls_start_b := {
		if styling.d20_dividers_back == "all breaks +3" then 4
		else if styling.d20_dividers_back == "all breaks +2" then 3
		else if styling.d20_dividers_back == "all breaks +1" then 2
		else if styling.d20_dividers_back == "all breaks" then 0
		else if back_d20() then length(d20_array(input).0)
		else 0
	}
	top_of_para_b := {
		input := input + no_roll_b(card.text_2)
		if card_style.text_2.layout.paragraphs[input].top or else 0 > 0 then
			card_style.text_2.top + card_style.text_2.layout.paragraphs[input].top - 0.5*(card_style.text_2.layout.paragraphs[input].top-card_style.text_2.layout.paragraphs[input-1].bottom)
		else 0
	}
	height_of_para_b := {
		input := input + no_roll_b(card.text_2)
		if card_style.text_2.layout.paragraphs[input].bottom or else 0 > 0 then
			card_style.text_2.layout.paragraphs[input].bottom + 1.3*(card_style.text_2.layout.paragraphs[input].top-card_style.text_2.layout.paragraphs[input-1].bottom) - card_style.text_2.layout.paragraphs[input].top
		else 0
	}
	no_roll_b := {if styling.d20_dividers_back == "all breaks" then 1 else if rolls_start_b(input) == 0 then 1 else 0}

	##### class stuff
	alt_text := {is_class()}
	alt_text_script := {
		combined_editor(field1: card.chapter_text, separator1:"<line>\n</line>", field2: card.level_1_text, separator2: "<line>\n</line>", field3: card.level_2_text, separator3: "<line>\n</line>", field4: card.level_3_text, separator4: "<line>\n</line>", field5: card.level_4_text)
	}
	lev0 := {
		if card_style.text.layout.separator[0] or else 0 > 0 then card_style.text.top+card_style.text.layout.separator[0]-1 else 600
	}
	lev2 := {
		if card_style.text.layout.separator[1] or else 0 > 0 then card_style.text.top+card_style.text.layout.separator[1]-13 else 600
	}
	lev3 := {
		if card_style.text.layout.separator[2] or else 0 > 0 then card_style.text.top+card_style.text.layout.separator[2]-13 else 600
	}
	lev4 := {
		if card_style.text.layout.separator[3] or else 0 > 0 then card_style.text.top+card_style.text.layout.separator[3]-13 else 600
	}
	alt_textb := {back_class()}
	alt_text_scriptb := {
		combined_editor(field1: card.chapter_text_2, separator1:"<line>\n</line>", field2: card.level_5_text, separator2: "<line>\n</line>", field3: card.level_6_text, separator3: "<line>\n</line>", field4: card.level_7_text, separator4: "<line>\n</line>", field5: card.level_8_text)
	}
	lev0b := {
		if card_style.text_2.layout.separator[0] or else 0 > 0 then card_style.text_2.top+card_style.text_2.layout.separator[0]-1 else 600
	}
	lev2b := {
		if card_style.text_2.layout.separator[1] or else 0 > 0 then card_style.text_2.top+card_style.text_2.layout.separator[1]-13 else 600
	}
	lev3b := {
		if card_style.text_2.layout.separator[2] or else 0 > 0 then card_style.text_2.top+card_style.text_2.layout.separator[2]-13 else 600
	}
	lev4b := {
		if card_style.text_2.layout.separator[3] or else 0 > 0 then card_style.text_2.top+card_style.text_2.layout.separator[3]-13 else 600
	}


	##### mainframe stuff
	shrink_type := {if styling.shrink_typeline_text != "" then to_number(styling.shrink_typeline_text) else 0 }
	shrink_name := {if styling.shrink_name_text != "" then to_number(styling.shrink_name_text) else 0 }
	shrink_type2 := {if styling.shrink_back_typeline_text != "" then to_number(styling.shrink_back_typeline_text) else 0 }
	shrink_name2 := {if styling.shrink_back_name_text != "" then to_number(styling.shrink_back_name_text) else 0 }
	is_flagged := {chosen(styling.other_options, choice: "use doublecast flags") }
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png")}
	un_png := replace@(match:".png", replace: "")
	ancestral_mana := { chosen(styling.other_options, choice:"ancestral generic mana")}
	unindent := {chosen(styling.other_options, choice:"unindent nonloyalty abilities")}

	###### future
	is_shifted := {false}
	back_shifted := {false}

	special_text := {
		if contains(styling.front_style, match:"saga") then (
			card.chapter_text
			+(if card.level_1_text != "" then "\n" + end_leader(level_leader(1)) + card.level_1_text else "")
			+(if card.level_2_text != "" then "\n" + end_leader(level_leader(2)) + card.level_2_text else "")
			+(if card.level_3_text != "" then "\n" + end_leader(level_leader(3)) + card.level_3_text else "")
			+(if card.level_4_text != "" then "\n" + end_leader(level_leader(4)) + card.level_4_text else "")
		)
		else if is_class() then (
			card.chapter_text
			+(if card.level_1_text != "" then "\n" + card.level_1_text)
			+(if card.level_2_text != "" then "\n" + card.level_9_text + (if card.level_2 == "" then " Level 2" else " " + card.level_2) + "\n" + card.level_2_text)
			+(if card.level_3_text != "" then "\n" + card.level_10_text + (if card.level_3 == "" then " Level 3" else " " + card.level_3) + "\n" + card.level_3_text)
			+(if card.level_4_text != "" then "\n" + card.level_11_text + (if card.level_4 == "" then " Level 4" else " " + card.level_4) + "\n" + card.level_4_text)
		)
		else if is_leveler() then (
			(if card.level_0 != "" then "[" + level_label(0) + " " + card.level_0 + "] " else "") + card.level_1_text + (if card.pt != "" then " [" + card.pt + "]" else "") + "\n"
			+ (if card.level_1 != "" then "[" + level_label(1) + " " + card.level_1 + "] " else "") + card.level_2_text + (if card.pt_2 != "" then " [" + card.pt_2 + "]" else "") + "\n"
			+ (if card.level_2 != "" then "[" + level_label(2) + " " + card.level_2 + "] " else "") + card.level_3_text + (if card.pt_3 != "" then " [" + card.pt_3 + "]" else "") + (if card.level_4_text != "" then "\n" else "")
			+ (if card.level_3 != "" then "[" + level_label(3) + " " + card.level_3 + "] " else "") + card.level_4_text + (if card.pt_7 != "" then " [" + card.pt_7 + "]" else "")
		)
		else if is_mutate() then card.level_1_text + "\n" + card.text
		else if not contains(styling.front_style, match:"planeswalker") then "" else
			(if card.loyalty_cost_1 != "" then "[" + card.loyalty_cost_1 + "]: " else "") +(if card.level_1_text != "" and card.level_1_text != card.rule_text then card.level_1_text+"\n" else split_text(match:"\n", card.rule_text).0+"\n")
			+ ( if card.loyalty_cost_2 != "" then "[" + card.loyalty_cost_2 + "]" + ": " else "") +(if card.level_2_text != "" then card.level_2_text+"\n" else if contains(paragraph_count(card.rule_text), match:"~") then split_text(match:"\n", card.rule_text).1+"\n" else "")
			+ ( if card.loyalty_cost_3 != "" then "[" + card.loyalty_cost_3 + "]" + ": " else "") +(if card.level_3_text != "" then card.level_3_text else if contains(paragraph_count(card.rule_text), match:"~~") then split_text(match:"\n", card.rule_text).2 else "")
			+ (if has_four_abilities() then "\n" + ( if card.loyalty_cost_4 != "" then "[" + card.loyalty_cost_4 + "]" + ": " else "") +(if card.level_4_text != "" then card.level_4_text else if contains(paragraph_count(card.rule_text), match:"~~~") then split_text(match:"\n", card.rule_text).3 else "") else "")
	}
	special_text2 := {
		if back_saga() then (
			card.chapter_text_2
			+(if card.level_5_text != "" then "\n" + end_leader(level_leader2(1)) + card.level_5_text else "")
			+(if card.level_6_text != "" then "\n" + end_leader(level_leader2(2)) + card.level_6_text else "")
			+(if card.level_7_text != "" then "\n" + end_leader(level_leader2(3)) + card.level_7_text else "")
			+(if card.level_8_text != "" then "\n" + end_leader(level_leader2(4)) + card.level_8_text else "")
		)
		else if back_class() then (
			card.chapter_text_2
			+(if card.level_5_text != "" then "\n" + card.level_5_text)
			+(if card.level_6_text != "" then "\n" + card.level_12_text + (if card.level_6 == "" then " Level 2" else " " + card.level_6) + "\n" + card.level_6_text)
			+(if card.level_7_text != "" then "\n" + card.level_13_text + (if card.level_7 == "" then " Level 3" else " " + card.level_7) + "\n" + card.level_7_text)
			+(if card.level_8_text != "" then "\n" + card.level_14_text + (if card.level_8 == "" then " Level 4" else " " + card.level_8) + "\n" + card.level_8_text)
		)
		else if back_leveler() then (
			(if card.level_5 != "" then "[" + level_label(4) + " " + card.level_5 + "] " else "") + card.level_5_text + (if card.pt_4 != "" then " [" + card.pt_4 + "]" else "") + "\n"
			+ (if card.level_6 != "" then "[" + level_label(5) + " " + card.level_6 + "] " else "") + card.level_6_text + (if card.pt_5 != "" then " [" + card.pt_5 + "]" else "") + "\n"
			+ (if card.level_7 != "" then "[" + level_label(6) + " " + card.level_7 + "] " else "") + card.level_7_text + (if card.pt_6 != "" then " [" + card.pt_6 + "]" else "") + (if card.level_8_text != "" then "\n" else "")
			+ (if card.level_8 != "" then "[" + level_label(7) + " " + card.level_8 + "] " else "") + card.level_8_text + (if card.pt_8 != "" then " [" + card.pt_8 + "]" else "")
		)
		else if back_mutate() then card.level_5_text + "\n" + card.text_2
		else if not contains(styling.back_style, match:"planeswalker") then "" else
			(if card.loyalty_cost_5 != "" then "[" + card.loyalty_cost_5 + "]: " else "") +(if card.level_5_text != "" and card.level_5_text != card.rule_text_2 then card.level_5_text+"\n" else split_text(match:"\n", card.rule_text_2).0+"\n")
			+ ( if card.loyalty_cost_6 != "" then "[" + card.loyalty_cost_6 + "]" + ": " else "") +(if card.level_6_text != "" then card.level_6_text+"\n" else if contains(paragraph_count(card.rule_text_2), match:"~") then split_text(match:"\n", card.rule_text_2).1+"\n" else "")
			+ ( if card.loyalty_cost_7 != "" then "[" + card.loyalty_cost_7 + "]" + ": " else "") +(if card.level_7_text != "" then card.level_7_text else if contains(paragraph_count(card.rule_text_2), match:"~~") then split_text(match:"\n", card.rule_text_2).2 else "")
			+ (if back_four_abilities() then "\n" + ( if card.loyalty_cost_8 != "" then "[" + card.loyalty_cost_8 + "]" + ": " else "") +(if card.level_8_text != "" then card.level_8_text else if contains(paragraph_count(card.rule_text_2), match:"~~~") then split_text(match:"\n", card.rule_text_2).3 else "") else "")
	}
	back_face := replace@(match:"([0-9])a", replace:"\\1b")
	is_bumped := {not mainframe_walker() and (card.loyalty_cost_1 != "" or card.loyalty_cost_2 != "" or card.loyalty_cost_3 != "" or card.loyalty_cost_4 != "")}
	back_bumped := {not mainframe_walkerb() and (card.loyalty_cost_5 != "" or card.loyalty_cost_6 != "" or card.loyalty_cost_7 != "" or card.loyalty_cost_8 != "")}

	is_modal_dfc := {styling.dfc_type != "transforming"}
	auto_flags := {styling.dfc_type == "modal with standard flags"}
	custom_watermark_a := {if styling.card_watermark == "" or not contains(styling.card_watermark, match:".png") then "/magic-watermarks.mse-include/planeswalker.png" else "/magic-watermarks.mse-include/" + styling.card_watermark}
	custom_watermark_b := {if styling.card_watermark_2 == "" or not contains(styling.card_watermark_2, match:".png") then "/magic-watermarks.mse-include/planeswalker.png" else "/magic-watermarks.mse-include/" + styling.card_watermark_2}
	shown_cr := {if set.automatic_copyright then set.copyright != "" else card.copyright != ""}

	# alternate rarity color
	alt_rarity := {styling.alt_rarity_color}

############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)
############################################################## Extra style options
styling field:
	type: text
	name: popout image style
	description: The styling instructions for the popout image field, formatted as "left,top,width,height,". The text MUST end with a comma.
styling field:
	type: choice
	name: dfc type
	choice: transforming
	choice: modal with standard flags
	choice: modal with custom flags
styling field:
	type: choice
	name: front style
	choice: normal
	choice: auto-sizing planeswalker
	choice: 4 ability planeswalker
	choice: 3 ability planeswalker
	choice: 2 ability planeswalker
	choice: 1 ability planeswalker
	choice: 2 box saga
	choice: 3 box saga
	choice: 4 box saga
	choice: class
	choice: leveler
	choice: miracle
	choice: nyx
	choice: vehicle
	choice: snow
	choice: map
	initial: normal
	description: Choose the style for the front face
styling field:
	type: choice
	name: defaults
	choice: Click here for default coordinate information
	choice: 2 ability walker stripes - "48,"
	choice: 3 ability walker stripes - "27,80,"
	choice: 4 ability walker stripes - "21,69,119,"
	choice: 2 box saga stripes - "296,"
	choice: 3 box saga stripes - "249,343,"
	choice: 4 box saga stripes - "225,296,367"
	choice: 2 box saga chapters - "183,223,329,"
	choice: 3 box saga chapters - "185,279,373,"
	choice: saga chapters use the "move loyalty costs" options
	choice: to add chapters 4-6, add their coordinates at the end, ie "183,223,329,369,"
	choice: leveler stripes - "0,0,"
	choice: leveler arrows use the "move loyalty costs" options
	choice: for loyalty costs, saga chapters, leveler arrows and stripes, use -N to move up
styling field:
	type: text
	name: stripe coordinate
	description: Overrides the coordinates for the ability stripes. Defaults are "48," and "27,80," and "21,69,119,". The text MUST end with a ,
styling field:
	type: text
	name: move loyalty costs
	description: Moves loyalty costs up the specified amount. Use negative to move down. Formatted as "1,2,3,4," MUST end with a comma.
styling field:
	type: text
	name: snap chapter to box
	description: Sets the chapter symbols to the given textbox, fo example "1,1,2," for I, II - Ability 1; III - Ability 2
styling field:
	type: text
	name: front font cap
	description: Use to standardize the font size of separated abilities. Default is size 14.
styling field:
	type: text
	name: shrink name text
	description: reduces the name text N points.
styling field:
	type: text
	name: shrink typeline text
	description: reduces the typeline text N points.
styling field:
	type: text
	name: level 1 chop
	description: Changes the start/stop points of the first textbox. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: text
	name: level 2 chop
	description: Changes the start/stop points of the second textbox. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: text
	name: level 3 chop
	description: Changes the start/stop points of the third textbox. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: text
	name: level 4 chop
	description: Changes the start/stop points of the fourth textbox. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: choice
	name: d20 dividers
	choice: d20 mode
	choice: off
	choice: all breaks
	choice: all breaks +1
	choice: all breaks +2
	choice: all breaks +3
	description: Do dice levels normally, off, on all linebreaks, on all but the first linebreak, etc.
styling field:
	type: choice
	name: back style
	choice: normal
	choice: auto-sizing planeswalker
	choice: 4 ability planeswalker
	choice: 3 ability planeswalker
	choice: 2 ability planeswalker
	choice: 1 ability planeswalker
	choice: 2 box saga
	choice: 3 box saga
	choice: 4 box saga
	choice: class
	choice: leveler
	choice: miracle
	choice: nyx
	choice: vehicle
	choice: snow
	choice: map
	initial: normal
	description: Choose the style for the back face
styling field:
	type: text
	name: back stripe coordinate
	description: Overrides the coordinates for the backface ability stripes. Defaults are "48," and "27,80," and "21,69,119,". The text MUST end with a ,
styling field:
	type: text
	name: move back loyalty costs
	description: Moves loyalty costs of the back face up the specified amount. Use negative to move down. Formatted as "1,2,3,4," MUST end with a comma.
styling field:
	type: text
	name: snap chapter to back box
	description: Sets the chapter symbols to the given textbox, fo example "1,1,2," for I, II - Ability 1; III - Ability 2
styling field:
	type: text
	name: back font cap
	description: Use to standardize the font size of separated abilities of the back face. Default is size 14.
styling field:
	type: text
	name: shrink back name text
	description: reduces the name text N points.
styling field:
	type: text
	name: shrink back typeline text
	description: reduces the typeline text N points.
styling field:
	type: text
	name: level 5 chop
	description: Changes the start/stop points of the first textbox of the back face. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: text
	name: level 6 chop
	description: Changes the start/stop points of the second textbox of the back face. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: text
	name: level 7 chop
	description: Changes the start/stop points of the third textbox of the back face. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: text
	name: level 8 chop
	description: Changes the start/stop points of the fourth textbox of the back face. Use negative to move down. Formatted as "1,2," MUST end with a comma.
styling field:
	type: choice
	name: d20 dividers back
	choice: d20 mode
	choice: off
	choice: all breaks
	choice: all breaks +1
	choice: all breaks +2
	choice: all breaks +3
	description: Do dice levels normally, off, on all linebreaks, on all but the first linebreak, etc.
styling field:
	type: text
	name: opacity
	description: set opacity for planeswalkers, from 0 to 255. Formatted as Front,Back,
styling field:
	type: text
	name: custom mask
	description: Uses a custom mask from data/magic-mainframe-extras.mse-include
styling field:
	type: text
	name: custom mask 2
	description: Uses a custom mask from data/magic-mainframe-extras.mse-include
styling field:
	type: text
	name: custom symbol one
	description: Uses a custom DFC symbol from data/magic-mainframe-extras.mse-include
styling field:
	type: text
	name: custom symbol two
	description: Uses a custom DFC symbol from data/magic-mainframe-extras.mse-include
styling field:
	type: multiple choice
	name: other options
	description: Additional options
	choice: normal back face
	choice: vorthos box
	choice: pride pinlines
	choice: promo
	choice: mythic edition
	choice: prerelease stamps
	choice: remove from autocount
	choice: use hovering pt
	choice: use hovering loyalty
	choice: use holofoil stamps
	choice: center front
	choice: center back
	choice: center first name
	choice: center second name
	choice: right align
	choice: clear front
	choice: clear back
	choice: nyx front
	choice: nyx back
	choice: vehicle front
	choice: vehicle back
	choice: snow front
	choice: snow back
	choice: legendary front
	choice: legendary back
	choice: meld back
	choice: front color indicator
	choice: back color indicator
	choice: front mutate
	choice: back mutate
	choice: wider planeswalker images
	choice: force fourwalker front
	choice: force fourwalker back
	choice: regular pt on levelers
	choice: ancestral generic mana
	choice: unindent nonloyalty abilities
	choice: auto nyx crowns
	choice: godzilla style alias
	choice: pokemon evobar
	choice: automate type frames
	initial: use hovering pt, use holofoil stamps, back color indicator, unindent nonloyalty abilities, auto nyx crowns, automate type frames
styling field:
	type: text
	name: alternate saga reminder
	description: Change the reminder text that is generated for new cards
styling field:
	type: choice
	name: legend crown
	choice: standard
	choice: nyx
	choice: companion
	choice: custom
	description: The type of legend crown to use for this card.
styling field:
	type: text
	name: custom crown location
	description: location of custom legend crown images in magic-mainframe-extras
styling field:
	type: text
	name: custom chapter location
	description: The location of the custom chapter symbol inside magic-mainframe-extras
styling field:
	type: text
	name: custom chapter coordinate
	description: Set the custom symbol at the given heights, formatted as Front,Back,
styling field:
	type: text
	name: custom chapter name
	description: Set how this symbol will be called in text exports (ie I, II...). Default is C.
styling field:
	type: text
	name: replacement chapter location
	description: location of replacement chapter symbols in magic-mainframe-extras, formatted as "folder/"
styling field:
	type: text
	name: level label
	description: Change the level label. default is "LEVEL". Secondary lables can be added after a comma, "1,2,3,4,5,6,"
styling field:
	type: choice
	name: level containers
	choice: arrows
	choice: pt boxes
	choice: loyalty boxes
styling field:
	type: choice
	name: level containers 2
	choice: arrows
	choice: pt boxes
	choice: loyalty boxes
styling field:
	type: text
	name: card watermark
	description: Filename in magic-watermarks to use for standalone card watermark
styling field:
	type: text
	name: card watermark 2
	description: Filename in magic-watermarks to use for standalone card watermark
styling field:
	type: text
	name: alt rarity color
	description: Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:...:X:" 1 and 2 are fill color, 3 and 4 border color, X is border thickness. For example, rare is 214,196,94:95,84,40:0,0,0:0,0,0:0.07
styling field:
	type: boolean
	name: grey hybrid name
	description: Use a grey background for the name and type line on hybrid cards. This is done on real cards.
styling field:
	type: boolean
	name: use guild mana symbols
	description: Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial: no
styling field:
	type: package choice
	name: text box mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-small.mse-symbol-font
styling field:
	type: package choice
	name: level mana symbols
	match: magic-mana-*.mse-symbol-font
	initial: magic-mana-large.mse-symbol-font
styling field:
	type: choice
	name: tap symbol
	description: What tap and untap symbols should be used on cards?
	initial: modern
	choice: modern
	choice: old
	choice: diagonal T
styling field:
	type: boolean
	name: inverted common symbol
	description: Should the common rarity symbol be inverted, like in Coldsnap?
	initial: no
styling field:
	type: package choice
	name: overlay
	description: Should there be an overlay applied, such as foil?
	match: magic-overlay-*.mse-include
	required: false
styling style:
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }
	other options:
		render style: checklist
		direction: vertical
############################################################## Card fields
card style:
	############################# Background stuff
	border color:
		left: 0
		top : 0
		width:	{ if is_full() then 0 else 752}
		height:	{if is_full() then 0 else 523}
		radius: 18
		left width:   17
		right width:  17
		top width:    17
		bottom width: 18
		z index: 4
		mask: {"border_mask_" + (if is_legend() then "l" else "n") + (if back_legend() then "l" else "n") + (if card.border_color == rgb(200,200,200) then "_silver") + ".png"}
	card color:
		left:	0
		top:	0
		width:	375
		height:	523
		z index: 0
		render style: image
		popup style: in place
		image: { if front_clear() or is_map() or mainframe_walker() then "" else if is_saga() or is_class() then saga_background() else if is_modal_dfc() then unnotched_background() else card_background() }
	card color 2:
		left:	377
		top:	0
		width:	375
		height:	523
		z index: 0
		render style: image
		popup style: in place
		image: { if back_clear() or back_map() or mainframe_walkerb() then "" else if back_saga() or back_class() then saga_background() else if chosen(styling.other_options, choice:"normal back face") then unnotched_background() else card_background2() }
	############################# Name line
	name:
		left: { if is_map() then 65 else if is_normal() then 58 else 62 }
		top: { if is_map() then 27 else if is_normal() then 30 else if front_clear() then 22 else 22 }
		right: { (if is_map() then 344 else 339) - card_style.casting_cost.content_width }
		height: {23 - (0.5 * shrink_name())}
		alignment: { if chosen(styling.other_options, choice:"center first name") then "bottom center" else "bottom shrink-overflow"}
		padding bottom: 0
		z index: 3
		font:
			name: { if is_map() then "Beleren Small Caps" else "Beleren Bold"}
			size: { if is_map() then 14.8 - shrink_name() else 16 - shrink_name() }
			color: black
	name 2:
		left: { if back_map() then 442 else if back_normal() then 435 else 439 }
		top: { (if back_map() then 27 else if back_normal() then 30 else if back_clear() then 22 else 22) - 0.5*shrink_name2() }
		right: { (if back_map() then 719 else 714) - card_style.casting_cost_2.content_width }
		height: {23 - (0.5 * shrink_name2())}
		alignment: { if chosen(styling.other_options, choice:"center second name") then "bottom center" else "bottom shrink-overflow"}
		padding bottom: 0
		z index: 3
		font:
			name: { if back_map() then "Beleren Small Caps" else "Beleren Bold"}
			size: { if back_map() then 14.8 - shrink_name2() else 16 - shrink_name2()}
			color: { if chosen(styling.other_options, choice:"normal back face") or back_map() or back_clear() or back_saga() or back_class() then "black" else "white" }
	casting cost:
		right: 347
		top: { if is_normal() then 29 else 21 }
		width: { max(30, card_style.casting_cost.content_width) + 5 }
		height: 23
		alignment: middle right
		symbol font:
			name: magic-mana-large
			size: 15
			alignment: middle right
		always symbol: true
		z index: 4
		padding top: 0
	casting cost 2:
		right: 722
		top: { if back_normal() then 29 else 21 }
		width: { max(30, card_style.casting_cost_2.content_width) + 5 }
		height: 23
		alignment: middle right
		symbol font:
			name: magic-mana-large
			size: 15
			alignment: middle right
		always symbol: true
		z index: 4
		padding top: 0
	card symbol:
		left: {if card.card_symbol=="none" then 20 else 29}
		top: 23
		height: 18
		width: 14
		z index: 1
		render style: image
		choice images:
			tombstone: tombstone.png
	############################# Image
	image:
		left: { if is_class() then 28 else if is_saga() then 188 else if front_clear() or is_map() or is_full() then 0 else if is_mutate() then 22 else if is_normal() then 29 else if is_normal_size() then 25 else 15 }
		top: { if is_saga() or is_class() then 59 else if is_map() then 57 else if front_clear() or is_full() then 0 else if is_normal() then 59 else if is_normal_size() then 52 else 15 }
		width: { if is_saga() or is_class() then 157 else if front_clear() or is_map() or is_full() then 375 else if is_mutate() then 330 else if is_normal() then 316 else if is_normal_size() then 324 else 345 }
		height:	{ if is_map() then 241 else if is_saga() or is_class() then 379 else if front_clear() or is_full() then 523 else if is_mutate() then 334 else if is_normal() then 231 else if is_normal_size() then 428 else 493 }
		z index: 1
		mask: { mask_script() }
		default: {default_image(card.card_color)}
	image 2:
		left: { if back_class() then 405 else if back_saga() then 565 else if back_clear() or back_map() or is_full() then 377 else if back_mutate() then 399 else if back_normal() then 406 else if is_normal_size() then 402 else 392 }
		top: { if back_saga() or back_class() then 59 else if back_map() then 57 else if back_clear() or is_full() then 0 else if back_normal() then 59 else if is_normal_size() then 52 else 15 }
		width: { if back_saga() or back_class() then 157 else if back_clear() or back_map() or is_full() then 375 else if back_mutate() then 330 else if back_normal() then 316 else if is_normal_size() then 324 else 345 }
		height:	{ if back_saga() or back_class() then 379 else if back_map() then 241 else if back_clear() or is_full() then 523 else if back_mutate() then 334 else if back_normal() then 231 else if is_normal_size() then 428 else 493 }
		z index: 1
		mask: { back_mask_script() }
		default: {default_image(card.card_color_2)}
	mainframe image:
		left: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).0 else "0"}
		top: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).1 else "0"}
		width: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).2 else "0"}
		height: {if comma_count(styling.popout_image_style) == ",,,," then split_text(match:",", styling.popout_image_style).3 else "0"}
		z index: 8
	############################# Card type
	indicator:
		left: { if is_map() then 18 else 31 }
		top: { if is_saga() or is_class() then 449 else if is_map() then 298 else if has_four_abilities() then 265 else 300 }
		width: 17
		height: 17
		z index: 2
		render style: image
		visible: { has_identity()}
		image: { card_identity() }
	indicator 2:
		left: { if back_map() then 395 else 408 }
		top: { if back_saga() or back_class() then 449 else if back_map() then 298 else if back_four_abilities() then 265 else 300 }
		width: 17
		height: 17
		z index: 2
		render style: image
		visible: { has_identity2()}
		image: { card_identity_2() }
	type:
		left: { if is_map() then 85 else if has_identity() then "52" else "32" }
		top: { (if is_map() then 297.5 else if is_saga() or is_class() then 444 else if has_four_abilities() then 261 else 296) + shrink_type() }
		width: { if is_map() then 205 else (if has_identity() then "290" else "310") - rare_width() }
		height: { if is_map() then 18 - shrink_type() else 20 - shrink_type() }
		alignment: { if is_map() then "center top shrink-overflow" else "top shrink-overflow"}
		z index: 2
		padding top: 2
		padding bottom: { if is_map() then 4 else 0}
		padding right: { if is_map() then 2 else 0}
		font:
			name: Beleren Bold
			size: { if is_map() then 12 - shrink_type() else 13 - shrink_type()}
			color: black
			separator color: red
	type 2:
		left: { if back_map() then 462 else if has_identity2() then "429" else "409" }
		top: { (if back_map() then 297.5 else if back_saga() or back_class() then 444 else if back_four_abilities() then 261 else 296) + shrink_type2() }
		width: { if back_map() then 205 else (if has_identity2() then "290" else "310") - rare_width() }
		height: { if back_map() then 18 - shrink_type2() else 20 - shrink_type2()}
		alignment: {if back_map() then "center top shrink-overflow" else "top shrink-overflow"}
		z index: 2
		padding top: 2
		padding bottom: { if back_map() then 4 else 0}
		padding right: { if back_map() then 2 else 0}
		font:
			name: Beleren Bold
			size: { if back_map() then 12 - shrink_type2() else 13 - shrink_type2()}
			color: { if back_clear() or back_map() or back_saga() or back_class() or chosen(styling.other_options, choice:"normal back face") then "black" else "white"}
			separator color: red
	rarity:
		right: { if is_map() then 199 else 344 }
		top: { if is_saga() or is_class() then 445 else if is_map() then 53 else if is_normal() then 297 else if has_four_abilities() then 262 else 297 }
		width: {if set.shorten_types_for_rarity then 44 else 0}
		height: 22
		z index: 3
		render style: image
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	rarity 2:
		right: { if back_map() then 576 else 721}
		top: { if back_saga() or back_class() then 445 else if back_map() then 53 else if back_normal() then 297 else if back_four_abilities() then 262 else 297 }
		width: {if set.shorten_types_for_rarity then 44 else 0}
		height: 22
		z index: 3
		render style: image
		alignment: middle right
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if use_alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if use_alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	text:
		left: { if is_class() then 188 else if is_map() then 40 else if mainframe_walker() then 48 else if is_bumped() then 47 else 29}
		top: { top_of_textbox() }
		width: {if is_class() then 153 else if is_leveler() then 0 else -lv_chop(styling.level_1_chop, cell:2) + if is_saga() then 0 else if is_map() then 287 else if is_normal() then (314 - if is_bumped() then 18) else if mainframe_walker() then 300 else 0}
		bottom: { bottom_of_textbox()}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.front_font_cap != "" then styling.front_font_cap else (if is_mutate() then 12 else 14) }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.front_font_cap != "" then styling.front_font_cap else (if is_mutate() then 12 else 14) }
		alignment:
			script:	if chosen(styling.other_options, choice:"center front") then "middle center" else if chosen(styling.other_options, choice:"right align") then "middle right" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max: 1.6
	text 2:
		left: { if back_class() then 565 else if back_map() then 417 else if mainframe_walkerb() then 425 else if back_bumped() then 425 else 407 }
		top: { top_of_textbox2() }
		width: {if back_class() then 153 else if back_leveler() then 0 else -lv_chop(styling.level_5_chop, cell:2) + if back_saga() then 0 else if back_map() then 287 else if back_normal() then (314 - if is_bumped() then 18) else if mainframe_walkerb() then 300 else 0}
		bottom: { bottom_of_textbox2()}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.back_font_cap != "" then styling.back_font_cap else (if back_mutate() then 12 else 14) }
			scale down to: 6
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.back_font_cap != "" then styling.back_font_cap else (if back_mutate() then 12 else 14) }
		alignment:
			script:	if chosen(styling.other_options, choice:"center back") then "middle center" else if chosen(styling.other_options, choice:"right align") then "middle right" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.rule_text_2) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.rule_text_2) then 1.0 else 1.3 }
		line height line max: 1.6
	chapter text:
		left: 30
		top: 60
		width: {if not is_saga() then 0 else 153}
		height: 96
		z index: 3
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.front_font_cap != "" then styling.front_font_cap else 13 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.front_font_cap != "" then styling.front_font_cap else 13}
		alignment:
			script:	if chosen(styling.other_options, choice:"center front") then "middle center" else "middle left"
		z index: 5
		padding left:   3
		padding right:  1
		line height hard: {if is_modal(card.chapter_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.85
		line height hard max: {if is_modal(card.chapter_text) then 1.0 else 1.3 }
		line height line max: 1.6
		visible: {is_saga()}
		mask: textmask.png
	chapter text 2:
		left: 407
		top: 60
		width: {if not back_saga() then 0 else 153}
		height: 96
		z index: 3
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.back_font_cap != "" then styling.back_font_cap else 13 }
			scale down to: 6
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.back_font_cap != "" then styling.back_font_cap else 13 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center back") then "middle center" else "middle left"
		z index: 5
		padding left:   3
		padding right:  1
		line height hard: {if is_modal(card.chapter_text_2) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.85
		line height hard max: {if is_modal(card.chapter_text_2) then 1.0 else 1.3 }
		line height line max: 1.6
		visible: {back_saga()}
		mask: textmask.png
	watermark:
		left: { if is_class() then 187 else if is_saga() then 45 else if is_map() then 40 else 19}
		top : { if has_four_abilities() then 296 else if is_saga() or is_class() then 60 else 330 }
		width: { if is_class() then 160 else if is_saga() then 133 else if is_map() then 287 else 334}
		height: { if is_class() then 160 else if is_saga() then 378 else if is_map() then 154 else if has_four_abilities() then 185 else 152 }
		z index: 4
		render style: image
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks
	watermark 2:
		left: { if back_class() then 564 else if back_saga() then 422 else if back_map() then 5417 else 396}
		top : { if back_four_abilities() then 296 else if back_saga() or back_class() then 60 else 330 }
		width: { if back_class() then 160 else if back_saga() then 133 else if back_map() then 287 else 334}
		height: { if back_saga() or back_class() then 378 else if back_map() then 154 else if back_four_abilities() then 185 else 152 }
		z index: 4
		render style: image
		alignment: middle center
		include file: /magic-watermarks.mse-include/watermarks_back
	############################# Levels
	level 1 text:
		left: {if is_leveler() then (if card.level_0 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29) else if is_saga() then 45 else if is_mutate() then (if is_bumped() then 47 else 29) else 0}
		top: { if is_leveler() then 327-lv_chop(styling.level_1_chop, cell:0) else if is_saga() then 155-lv_chop(styling.level_1_chop, cell:0) else if is_mutate() then 329 else 0 }
		right: { -lv_chop(styling.level_1_chop, cell:2) + if is_leveler() then (if lone_pt() then 342 else if card.pt != "" then 277 else 342) else if is_saga() then 183 else if is_mutate() then 343 else 0 }
		bottom: { if is_leveler() then (327+lv_1_height()-lv_chop(styling.level_1_chop, cell:1)) else if is_saga() then (if split_12() == "" then 249 else split_12())-lv_chop(styling.level_1_chop, cell:1) else if is_mutate() then 391 else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else if is_mutate() then 12 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else if is_mutate() then 12 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center front") then "middle center" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_1_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_1_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 2 text:
		left: {if is_leveler() then (if card.level_1 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29) else if is_saga() then 45 else 0}
		top: { if is_leveler() then (329 + lv_2_coordinate()-lv_chop(styling.level_2_chop, cell:0)) else if is_saga() then (if split_12() == "" then 249 else split_12())-lv_chop(styling.level_2_chop, cell:0) else 0}
		right: { -lv_chop(styling.level_2_chop, cell:2) + if is_leveler() then (if card.pt_2 != "" then 277 else 342) else if is_saga() then 183 else 0 }
		bottom: { if is_leveler() then card_style.level_2_text.top + lv_2_height()-2-lv_chop(styling.level_2_chop, cell:1) else if not is_saga() then 0 else (if is_saga() then (if split_23() == "" then 343 else split_23()) else 0) - lv_chop(styling.level_2_chop, cell:1) }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center front") then "middle center" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_2_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_2_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 3 text:
		left: {if is_leveler() then (if card.level_2 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29) else if is_saga() then 45 else 0}
		top: {if is_leveler() then (331 + lv_3_coordinate()-lv_chop(styling.level_3_chop, cell:0)) else (if is_saga() then (if split_23() == 0 then 343 else split_23()) else 0) -lv_chop(styling.level_3_chop, cell:0) }
		right: { -lv_chop(styling.level_3_chop, cell:2) + if is_leveler() then (if card.pt_3 != "" then 277 else 342) else if is_saga() then 183 else 0 }
		bottom: { if is_leveler() then (329 + lv_3_coordinate()+lv_3_height()-2-lv_chop(styling.level_3_chop, cell:2)) else if not is_saga() then 0 else if two_boxes() then (if split_23() == "" then 343 else split_23())-lv_chop(styling.level_3_chop, cell:0) else (if is_saga() then (if split_34() == "" then 437 else split_34()) else 0) - lv_chop(styling.level_3_chop, cell:1) }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center front") then "middle center" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_3_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_3_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 4 text:
		left: {if is_leveler() then (if card.level_3 != "" then (if loy_leveler() then 57 else if box_leveler() then 78 else 75) else if is_map() then 40 else 29) else if is_saga() then 45 else 0}
		top: { if is_leveler() then (331 + lv_4_coordinate()-lv_chop(styling.level_4_chop, cell:0)) else if is_saga() then (if split_34() == "" then 437 else split_34())-lv_chop(styling.level_4_chop, cell:0) else 0}
		right: { -lv_chop(styling.level_4_chop, cell:2) + if is_leveler() then (if card.pt_7 != "" then 277 else 342) else if is_saga() then 183 else 0 }
		bottom: { if is_leveler() then (329 + lv_4_coordinate()+lv_4_height()-2-lv_chop(styling.level_4_chop, cell:2)) else if three_boxes() then (if split_34() == "" then 437 else split_34())-lv_chop(styling.level_4_chop, cell:1) else if is_saga() then 437-lv_chop(styling.level_4_chop, cell:1) else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.front_font_cap != "" then styling.front_font_cap else if has_four_abilities() then 13.8 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center front") then "middle center" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_4_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_4_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 5 text:
		left: {if back_leveler() then (377 + if card.level_5 != "" then (if loy_leveler2() then 57 else if box_leveler2() then 78 else 75) else if back_map() then 40 else 29) else if back_saga() then 422 else if back_mutate() then (if back_bumped() then 424 else 406) else 0}
		top: { if back_leveler() then 327-lv_chop(styling.level_5_chop, cell:0) else if back_saga() then 155-lv_chop(styling.level_5_chop, cell:0) else if back_mutate() then 329 else 0 }
		right: { -lv_chop(styling.level_5_chop, cell:2) + if back_leveler() then (if lone_pt() then 719 else if card.pt_4 != "" then 654 else 719) else if back_saga() then 560 else if back_mutate() then 720 else 0 }
		bottom: { if back_leveler() then (327+lv_5_height())-lv_chop(styling.level_5_chop, cell:1) else if back_saga() then (if split_12b() == "" then 249 else split_12b())-lv_chop(styling.level_5_chop, cell:1) else if back_mutate() then 391 else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else if back_mutate() then 12 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else if back_mutate() then 12 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center back") then "middle center" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_5_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_5_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 6 text:
		left: {if back_leveler() then (377 + if card.level_6 != "" then (if loy_leveler2() then 57 else if box_leveler2() then 78 else 75) else if back_map() then 40 else 29) else if back_saga() then 422 else 0}
		top: { if back_leveler() then (327 + lv_6_coordinate())- lv_chop(styling.level_6_chop, cell:0) else if back_saga() then (if split_12b() == "" then 249 else split_12b())- lv_chop(styling.level_6_chop, cell:0) else 0 }
		right: { -lv_chop(styling.level_6_chop, cell:2) + if back_leveler() then (if card.pt_5 != "" then 654 else 719) else if back_saga() then 560 else 0 }
		bottom: { if back_leveler() then card_style.level_6_text.top + lv_6_height() else if back_normal() and not back_saga() then 0 else (if back_saga() then (if split_23b() == "" then 343 else split_23b()) else 0) - lv_chop(styling.level_6_chop, cell:1) }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center back") then "middle center" else "middle left"
		z index: 5
		padding left:   6
		padding right:  4
		line height hard: {if is_modal(card.level_6_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_6_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 7 text:
		left: {if back_leveler() then (377 + if card.level_7 != "" then (if loy_leveler2() then 57 else if box_leveler2() then 78 else 75) else if back_map() then 40 else 29) else if back_saga() then 422 else 0}
		top: { if back_leveler() then (327 + lv_7_coordinate())-lv_chop(styling.level_7_chop, cell:0) else if back_saga() then (if split_23b() == "" then 343 else split_23b())-lv_chop(styling.level_7_chop, cell:0) else 0 }
		right: { -lv_chop(styling.level_7_chop, cell:2) + if back_leveler() then (if card.pt_6 != "" then 654 else 719) else if back_saga() then 560 else 0 }
		bottom: { if back_leveler() then (327 + lv_7_coordinate()+lv_7_height())-lv_chop(styling.level_7_chop, cell:1) else if not back_saga() then 0 else (if back_two_boxes() then (if split_23b() == "" then 343 else split_23b()) else if split_34b() == "" then 437 else split_34b())-lv_chop(styling.level_7_chop, cell:1)}
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center back") then "middle center" else "middle left"
		z index: 5
		padding left:  6
		padding right:  4
		line height hard: {if is_modal(card.level_7_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_7_text) then 1.0 else 1.3 }
		line height line max: 1.6
	level 8 text:
		left: {if back_leveler() then (377 + if card.level_8 != "" then (if loy_leveler2() then 57 else if box_leveler2() then 78 else 75) else if back_map() then 40 else 29) else if back_saga() then 422 else 0}
		top: {if back_leveler() then (327 + lv_8_coordinate())-lv_chop(styling.level_8_chop, cell:0) else if back_saga() then (if split_34b() == "" then 437 else split_34b())-lv_chop(styling.level_8_chop, cell:0) else 0}
		right: { -lv_chop(styling.level_8_chop, cell:2) + if back_leveler() then (if card.pt_8 != "" then 654 else 719) else if back_saga() then 560 else 0 }
		bottom: { if back_leveler() then (327 + lv_8_coordinate()+lv_8_height())-lv_chop(styling.level_8_chop, cell:1) else if back_three_boxes() then (if split_34b() == "" then 437 else split_34b())-lv_chop(styling.level_8_chop, cell:1) else if back_saga() then 437-lv_chop(styling.level_8_chop, cell:1) else 0 }
		font:
			name: MPlantin
			italic name: MPlantin-Italic
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else 14 }
			scale down to: 6
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: { if styling.back_font_cap != "" then styling.back_font_cap else if back_four_abilities() then 13.8 else 14 }
		alignment:
			script:	if chosen(styling.other_options, choice:"center back") then "middle center" else "middle left"
		z index: 5
		padding left: 6
		padding right:  4
		line height hard: {if is_modal(card.level_8_text) then 0.9 else 1.2 }
		line height line: 1.5
		line height soft: 0.9
		line height hard max: {if is_modal(card.level_8_text) then 1.0 else 1.3 }
		line height line max: 1.6
	############################# Levels
	level 0:
		z index: 7
		left: {if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {l1_center() - (if aug_leveler(0) then 4 else 2) - (if center_label(0) then 6 else 0) + arrow_offset(0)}
		width: {if is_leveler() or card.level_0 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		height:	22
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if loy_leveler() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label(0) then 0.5 else 0}
	level 1:
		z index: 7
		left: {if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {l2_center() - (if aug_leveler(1) then 4 else 2) - (if center_label(1) then 6 else 0) + arrow_offset(1)}
		height: 22
		width: {if is_leveler() or card.level_1 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if loy_leveler() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label(0) then 0.5 else 0}
	level 2:
		z index: 7
		left: {if is_class() then 270 else if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {if is_class() then lev2()+4 else l3_center() - (if aug_leveler(2) then 4 else 2) - (if center_label(2) then 6 else 0) + arrow_offset(2)}
		width: {if is_class() and card.level_2_text == "​" then 0 else if is_class() then 70 else if is_leveler() or card.level_2 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		height:	{if is_class() then 20 else 22}
		alignment: {if is_class() then "center right" else "center middle shrink-overflow"}
		font:
			name: {if is_class() then "MPlantin" else "Beleren Bold"}
			size: {if loy_leveler() or is_class() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {if is_class() then 11 else 12 + if center_label(0) then 0.5 else 0}
	level 3:
		z index: 7
		left: {if is_class() then 270 else if box_leveler() then 8 else if loy_leveler() then 14 else 21}
		top: {if is_class() then lev3()+4 else l4_center() - (if aug_leveler(3) then 4 else 2) - (if center_label(3) then 6 else 0) + arrow_offset(3)}
		width: {if is_class() and card.level_3_text == "​" then 0 else if is_class() then 70 else if is_leveler() or card.level_3 != "" then (34 + (if box_leveler() then 30 else 0)) else 0}
		height:	{if is_class() then 20 else 22}
		alignment: {if is_class() then "center right" else "center middle shrink-overflow"}
		font:
			name: {if is_class() then "MPlantin" else "Beleren Bold"}
			size: {if loy_leveler() or is_class() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler() then "white" else "black"}
			shadow color: { if loy_leveler() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {if is_class() then 11 else 12 + if center_label(0) then 0.5 else 0}
	level 4:
		left: 270
		width: {if is_class() and card.level_4_text == "" then 0 else 70}
		top: {lev4()+4}
		height: {if not is_class() then 0 else 20}
		z index: 7
		font:
			name: MPlantin
			size: 11
			weight: bold
		symbol font:
			name: magic-mana-small
			size: 11
		alignment: {if is_class() then "center right" else "center middle shrink-overflow"}
	level 5:
		z index: 7
		left: {377+ if box_leveler2() then 8 else if loy_leveler2() then 14 else 21}
		top: {l5_center() - (if aug_leveler2(0) then 4 else 2) - (if center_label2(0) then 6 else 0) + arrow_offset2(0)}
		width: {if back_leveler() or card.level_5 != "" then (34 + (if box_leveler2() then 30 else 0)) else 0}
		height:	22
		alignment: center middle shrink-overflow
		font:
			name: {if back_class() then "MPlantin" else "Beleren Bold"}
			size: {if loy_leveler() or back_class() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler2() then "white" else "black"}
			shadow color: { if loy_leveler2() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {12 + if center_label2(0) then 0.5 else 0}
	level 6:
		z index: 7
		left: {if back_class() then 647 else 377+ if box_leveler2() then 8 else if loy_leveler2() then 14 else 21}
		top: {if back_class() then lev2b()+4 else l6_center() - (if aug_leveler2(0) then 4 else 2) - (if center_label2(1) then 6 else 0) + arrow_offset2(1)}
		height: 22
		width: {if back_class() and card.level_6_text == "​" then 0 else if back_class() then 70 else if back_leveler() or card.level_6 != "" then (34 + (if box_leveler2() then 30 else 0)) else 0}
		alignment: {if back_class() then "center right" else "center middle shrink-overflow"}
		font:
			name: {if back_class() then "MPlantin" else "Beleren Bold"}
			size: {if loy_leveler() or back_class() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler2() then "white" else "black"}
			shadow color: { if loy_leveler2() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {if back_class() then 11 else 12 + if center_label2(0) then 0.5 else 0}
	level 7:
		z index: 7
		left: {if back_class() then 647 else 377+ if box_leveler2() then 8 else if loy_leveler2() then 14 else 21}
		top: {if back_class() then lev3b()+4 else l7_center() - (if aug_leveler2(0) then 4 else 2) - (if center_label2(2) then 6 else 0) + arrow_offset2(2)}
		width: {if back_class() and card.level_7_text == "​" then 0 else if back_class() then 70 else if back_leveler() or card.level_7 != "" then (34 + (if box_leveler2() then 30 else 0)) else 0}
		height:	22
		alignment: {if back_class() then "center right" else "center middle shrink-overflow"}
		font:
			name: {if back_class() then "MPlantin" else "Beleren Bold"}
			size: {if loy_leveler() or back_class() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler2() then "white" else "black"}
			shadow color: { if loy_leveler2() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {if back_class() then 11 else 12 + if center_label2(0) then 0.5 else 0}
	level 8:
		z index: 7
		left: {if back_class() then 647 else 377+ if box_leveler2() then 8 else if loy_leveler2() then 14 else 21}
		top: {if back_class() then lev4b()+4 else l8_center() - (if aug_leveler2(0) then 4 else 2) - (if center_label2(3) then 6 else 0) + arrow_offset2(3)}
		width: {if back_class() and card.level_8_text == "" then 0 else if back_class() then 70 else if back_leveler() or card.level_8 != "" then (34 + (if box_leveler2() then 30 else 0)) else 0}
		height:	22
		alignment: {if back_class() then "center right" else "center middle shrink-overflow"}
		font:
			name: {if back_class() then "MPlantin" else "Beleren Bold"}
			size: {if loy_leveler() or back_class() then 11 else 12 + if center_label(0) then 2 else 0}
			weight: bold
			color: {if loy_leveler2() then "white" else "black"}
			shadow color: { if loy_leveler2() then rgba(0,0,0,0) else "white"}
			shadow blur: 2
		symbol font:
			name: { styling.level_mana_symbols }
			size: {if back_class() then 11 else 12 + if center_label2(0) then 0.5 else 0}
	############################# Class costs
	level 9 text:
		left: 190
		width: {if not is_class() then 0 else if is_class() and card.level_2_text == "​" then 0 else 80}
		top: {lev2()+4}
		height: 20
		z index: 7
		font:
			name: MPlantin
			size: 12
		symbol font:
			name: magic-mana-small
			size: 12
		alignment: middle left
	level 10 text:
		left: 190
		width: {if not is_class() then 0 else if is_class() and card.level_3_text == "​" then 0 else 80}
		top: {lev3()+4}
		height: 20
		z index: 7
		font:
			name: MPlantin
			size: 12
		symbol font:
			name: magic-mana-small
			size: 12
			alignment: middle left
	level 11 text:
		left: 190
		width: {if not is_class() then 0 else if is_class() and card.level_4_text == "" then 0 else 80}
		top: {lev4()+4}
		height: 20
		z index: 7
		font:
			name: MPlantin
			size: 12
		symbol font:
			name: magic-mana-small
			size: 12
			alignment: middle left
	level 12 text:
		left: 567
		width: {if not back_class() then 0 else if back_class() and card.level_6_text == "​" then 0 else 80}
		top: {lev2b()+4}
		height: 20
		z index: 7
		font:
			name: MPlantin
			size: 12
		symbol font:
			name: magic-mana-small
			size: 12
		alignment: middle left
	level 13 text:
		left: 567
		width: {if not back_class() then 0 else if back_class() and card.level_7_text == "​" then 0 else 80}
		top: {lev3b()+4}
		height: 20
		z index: 7
		font:
			name: MPlantin
			size: 12
		symbol font:
			name: magic-mana-small
			size: 12
			alignment: middle left
	level 14 text:
		left: 567
		width: {if not back_class() then 0 else if back_class() and card.level_8_text == "" then 0 else 80}
		top: {lev4b()+4}
		height: 20
		z index: 7
		font:
			name: MPlantin
			size: 12
		symbol font:
			name: magic-mana-small
			size: 12
			alignment: middle left

	############################# PT
	pt:
		z index: 5
		left: {if is_leveler() and not lone_pt() then 291 else 286}
		top: { if is_leveler() and not lone_pt() then (l1_center() - 14) else if is_map() then 467 else 469}
		width: { if is_normal() or card.pt != "" then 60 else 0}
		height:	28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: { if is_map() then 14 else 16}
			color: {if is_shifted() or is_vehicle() then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 2:
		z index: 5
		left: {if is_leveler() then 291 else 661}
		top: { if is_leveler() then (l2_center() - 12) else if back_map() then 467 else 469}
		width: {if is_leveler() and lone_pt() and card.pt == "" then 0 else if (is_leveler() and not lone_pt()) or back_normal() or card.pt_2 != "" then 60 else 0 }
		height:	28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: { if back_map() then 14 else 16}
			color: {if is_leveler() and is_vehicle() then "white" else if is_leveler() or back_clear() then "black" else "white"}
			separator color: red
			shadow color: {if is_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 3:
		z index: 5
		left: 291
		top: {(l3_center() - 12)}
		width: {if is_leveler() and not lone_pt() or card.pt_3 != "" then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if is_shifted() or is_vehicle() then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 7:
		z index: 5
		left: 291
		top: {(l4_center() - 12)}
		width: {if is_leveler() and not lone_pt() or card.pt_7 != "" then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if is_shifted() or is_vehicle() then "white" else "black"}
			separator color: red
			shadow color: {if is_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 4:
		z index: 5
		left: {377+ if back_leveler() and not lone_pt() then 291 else 286}
		top: { if back_leveler() and not lone_pt() then (l5_center() - 14) else if is_map() then 467 else 469}
		width: {if back_leveler() and not lone_pt() or card.pt_4 != "" or is_leveler() then 60 else 0}
		height:	28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if back_shifted() or back_vehicle() or (is_leveler() and not back_leveler()) then "white" else "black"}
			separator color: red
			shadow color: {if back_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1

	pt 5:
		z index: 5
		left: 668
		top: {(l6_center() - 12)}
		width: {if back_leveler() and not lone_pt() or card.pt_5 != "" then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if back_shifted() or back_vehicle() then "white" else "black"}
			separator color: red
			shadow color: {if back_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1
	pt 6:
		z index: 5
		left: 668
		top: {(l7_center() - 12)}
		width: {if back_leveler() and not lone_pt() or card.pt_6 != "" then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if back_shifted() or back_vehicle() then "white" else "black"}
			separator color: red
			shadow color: {if back_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1

	pt 8:
		z index: 5
		left: 668
		top: {(l8_center() - 12)}
		width: {if back_leveler() and not lone_pt() or card.pt_8 != "" then 60 else 0}
		height: 28
		alignment: center middle shrink-overflow
		font:
			name: Beleren Bold
			size: {if is_map() then 14 else 16}
			color: {if back_shifted() or back_vehicle() then "white" else "black"}
			separator color: red
			shadow color: {if back_shifted() then rgb(0,0,0) else rgba(0,0,0,0)}
			shadow displacement x: -1
			shadow displacement y: 1

	############################# Loyalty
	loyalty:
		z index: 7
		left: 328
		top: 466
		width: { if card.loyalty != "" then 13.16 else if is_normal() then 0 else 13.16 }
		height:	{ if card.loyalty != "" then 34.63 else if is_normal() then 0 else 34.63 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 14
			color: white
	loyalty 2:
		z index: 7
		left: 705
		top: 466
		width: { if card.loyalty_2 != "" then 13.16 else if back_normal() then 0 else 13.16 }
		height:	{ if card.loyalty_2 != "" then 34.63 else if back_normal() then 0 else 34.63 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 14
			color: white
	loyalty cost 1:
		z index: 7
		left: {if is_normal() then 14 else 28}
		top: { abil_center(0) - 17.3 - 2 - loyal_move(0) }
		width: { if not is_normal() or card.loyalty_cost_1 != "" then 18 else 0 }
		height:	{ if not is_normal() or card.loyalty_cost_1 != "" then 35 else 0 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 2:
		z index: 7
		left: {if is_normal() then 14 else 28}
		top: { abil_center(1) - 17.3 - 2 - loyal_move(1) }
		width: { if not is_normal() or card.loyalty_cost_2 != "" then 18 else 0 }
		height:	{ if not is_normal() or card.loyalty_cost_2 != "" then 35 else 0 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 3:
		z index: 7
		left: {if is_normal() then 14 else 28}
		top: { abil_center(2) - 17.3 - 2 - loyal_move(2) }
		width: { if card.loyalty_cost_3 != "" then 18 else if has_two_abilities() or is_normal() then 0 else 13.16 }
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 4:
		z index: 7
		left: {if is_normal() then 14 else 28}
		top: { abil_center(3) - 17.3 - 2 - loyal_move(3) }
		width: { if has_four_abilities() or card.loyalty_cost_4 != "" then 18 else 0 }
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 5:
		z index: 7
		left: {if back_normal() then 391 else 405}
		top: { abil_centerb(0) - 17.3 - 2 - loyal_moveb(0) }
		width: { if not back_normal() or card.loyalty_cost_5 != "" then 18 else 0 }
		height:	{ if not back_normal() or card.loyalty_cost_5 != "" then 35 else 0 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 6:
		z index: 7
		left: {if back_normal() then 391 else 405}
		top: { abil_centerb(1) - 17.3 - 2 - loyal_moveb(1) }
		width: { if not back_normal() or card.loyalty_cost_6 != "" then 18 else 0 }
		height:	{ if not back_normal() or card.loyalty_cost_6 != "" then 35 else 0 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 7:
		z index: 7
		left: {if back_normal() then 391 else 405}
		top: { abil_centerb(2) - 17.3 - 2 - loyal_moveb(2) }
		width: { if card.loyalty_cost_6 != "" then 18 else if back_two_abilities() or back_normal() then 0 else 13.16}
		height:	35
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	loyalty cost 8:
		z index: 7
		left: {if back_normal() then 391 else 405}
		top: { abil_centerb(3) - 17.3 - 2 - loyal_moveb(3) }
		width: { if back_four_abilities() or card.loyalty_cost_8 != "" then 18 else 0 }
		height:	{ if back_four_abilities() or card.loyalty_cost_8 != "" then 35 else 0 }
		alignment: center middle
		font:
			name: Beleren Bold
			size: 11
			color: white
	############################# Card sorting / numbering
	set code:
		left: 24
		top: 498
		width: 40
		height: 10
		z index: 6
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	set code 2:
		left: 399
		top: 498
		width: 40
		height: 10
		z index: 6
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	############################# Copyright stuff
	illustrator:
		left: { 44 + card_style.set_code.content_width }
		top: 497.5
		width: 200
		height: 10
		z index: 2
		font:
			name: Beleren Small Caps Bold
			size: 7.25
			color: white
	copyright:
		right: 350
		top: { if is_leveler() and not lone_pt() then 488 else if is_normal() and card.pt != "" or card.loyalty != "" then (if is_map() then 504 else 500) else if is_normal() then 488 else 498 }
		width: {if set.automatic_copyright then 0 else 140}
		height: 10
		z index: 6
		alignment: middle right shrink-overflow
		font:
			name: MPlantin
			size: 6.5
			color: white
			weight: bold
	illustrator 2:
		left: { 419 + card_style.set_code.content_width }
		top: 497.5
		width: 200
		height: 10
		z index: 2
		font:
			name: Beleren Small Caps Bold
			size: 7.25
			color: white
	copyright 2:
		right: 728
		top: { if back_leveler() then (if lone_pt() then (if card.pt_4 != "" then 500 else 488) else 488) else if is_leveler() then (if card.pt_4 != "" then 500 else 488) else if (back_normal() and card.pt_2 != "") or card.loyalty_2 != "" then (if back_map() then 504 else 500) else if back_normal() then 488 else 498 }
		width: {if set.automatic_copyright then 0 else 140}
		height: 10
		z index: 6
		alignment: middle right shrink-overflow
		font:
			name: MPlantin
			size: 6.5
			color: white
			weight: bold
############################## Alias
	alias:
		left: {if is_saga() then 188 else if is_skinned() then 45 else if poke_walker() then 36 else if is_map() then 17 else 33}
		top: {if mainframe_walker() then 47 else if is_map() then 58 else 53}
		width: {if is_skinned() then 285 else if use_evobar() then max(100, card_style.alias.content_width) else 0}
		height: 20
		alignment: { (if is_skinned() then "center") + "bottom shrink-overflow"}
		padding bottom: 0
		z index: 3
		font:
			name: {if use_evobar() then "Matrix" else "MPlantin-Italic"}
			size: {if use_evobar() then 10 else 9}
			style: {if use_evobar() then "italic" else "bold"}
			weight: {if use_evobar() then "italic" else "bold"}
			color: {if use_evobar() then "black" else "white"}
	alias 2:
		left: { if back_saga() then 565 else if back_skinned() then 422 else if back_poke_walker() then 413 else if back_map() then 394 else 410}
		top: {if mainframe_walkerb() then 47 else if back_map() then 58 else 53}
		width: {if back_skinned() then 285 else if use_evobar() then max(100, card_style.alias_2.content_width) else 0}
		height: 20
		alignment: { (if back_skinned() then "center") + "bottom shrink-overflow"}
		padding bottom: 0
		z index: 3
		font:
			name: {if use_evobar() then "Matrix" else "MPlantin-Italic"}
			size: {if use_evobar() then 10 else 9}
			style: {if use_evobar() then "italic" else "bold"}
			weight: {if use_evobar() then "italic" else "bold"}
			color: {if use_evobar() then "black" else "white"}

############################################################## Extra card fields
extra card field:
	type: text
	name: card code
	save value: false
	script:
		if set.automatic_card_numbers and not is_unsorted() then
			forward_editor(prefix: card_number_m15() + "a/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else
			combined_editor(field1: card.custom_card_number, separator: " " + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type: text
	name: card code 2
	save value: false
	script:
		if set.automatic_card_numbers and not is_unsorted() then
			forward_editor(prefix: card_number_m15() + "b/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text_2)
		else
			back_face(card.custom_card_number) + " " + rarity_code() + " " + card.card_code_text_2
extra card field:
	type: color
	name: opac filter
	script: rgb(opacity(0), opacity(0), opacity(0))
	save value: false
extra card field:
	type: color
	name: opac filter 2
	script: rgb(opacity(1), opacity(1), opacity(1))
	save value: false
extra card field:
	type: choice
	name: artist arrow
	editable: false
	save value: false
	choice: white
extra card field:
	type: choice
	name: artist arrow 2
	editable: false
	save value: false
	choice: white
extra card field:
	type: choice
	name: loyalty box
	editable: false
	choice: loyalty
	save value: false
extra card field:
	type: choice
	name: loyalty box 2
	editable: false
	choice: loyalty
	save value: false
extra card field:
	type: choice
	name: stamp
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: foil stamp
	choice: stamp
	save value: false
	editable: false
extra card field:
	type: choice
	name: foil layer
	choice: foil
	save value: false
	editable: false
extra card field:
	type: choice
	name: foil layer 2
	choice: foil
	save value: false
	editable: false
extra card field:
	type: choice
	name: loyalty cost box 1
	editable: false
	script: loyalty_image(card.loyalty_cost_1)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 2
	editable: false
	script: loyalty_image(card.loyalty_cost_2)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 3
	editable: false
	script: loyalty_image(card.loyalty_cost_3)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 4
	editable: false
	script: loyalty_image(card.loyalty_cost_4)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 5
	editable: false
	script: loyalty_image(card.loyalty_cost_5)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 6
	editable: false
	script: loyalty_image(card.loyalty_cost_6)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 7
	editable: false
	script: loyalty_image(card.loyalty_cost_7)
	save value: false
extra card field:
	type: choice
	name: loyalty cost box 8
	editable: false
	script: loyalty_image(card.loyalty_cost_8)
	save value: false
extra card field:
	type: text
	name: colon 1
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 2
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 3
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 4
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 5
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 6
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 7
	editable: false
	script: ":"
	save value: false
extra card field:
	type: text
	name: colon 8
	editable: false
	script: ":"
	save value: false
extra card field:
	type: choice
	name: top stripe
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: bot stripe
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: fourth stripe
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: color
	name: top color
	script: if front_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: color
	name: bottom color
	script: if front_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color
	script: if front_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color 2
	script: if front_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: choice
	name: top stripe back
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: bot stripe back
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: choice
	name: fourth stripe back
	editable: false
	save value: false
	choice: stripe
extra card field:
	type: color
	name: top color back
	script: if back_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: color
	name: bottom color back
	script: if back_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color back
	script: if back_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: color
	name: stripe color 2 back
	script: if front_clear() then rgb(230,230,230) else rgb(200,200,200)
	editable: false
	save value: false
extra card field:
	type: text
	name: auto copyright
	script: set.copyright
	save value: false
	editable: false
	show statistics: false
extra card field:
	type: text
	name: auto copyright 2
	script: set.copyright
	save value: false
	editable: false
	show statistics: false
extra card field:
	type: text
	name: pt 2 copy
	script: if chosen(styling.other_options, choice:"use hovering loyalty") and card.pt_2 == "" then card.loyalty_2 else card.pt_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 2
	script: if is_leveler() then card.card_color else card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 3
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 4
	script: card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 5
	script: card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 6
	script: card.card_color_2
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 7
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: pt box 8
	script: card.card_color
	editable: false
	save value: false
extra card field:
	type: choice
	name: corner
	choice: none
	choice: day
	choice: night
	choice: moon
	choice: eldrazi
	choice: compass
	choice: closed fan
	choice: open fan
	choice: triangle up
	choice: triangle down
	choice: specialize arrows
	choice: artifact
	choice: creature
	choice: enchantment
	choice: instant
	choice: land
	choice: multitype
	choice: sorcery
	choice: planeswalker
	choice: structure
	choice: aetherprint
	choice: modal
	choice:
		name: sparker colors
		choice: white
		choice: blue
		choice: black
		choice: red
		choice: green
		choice: multicolor
		choice: colorless
	choice: custom one
	choice: custom two
	default: "day"
	script: if is_modal_dfc() then "modal" else if value == "modal" then "day" else if value == "specialize triangle" then "triangle up" else value
	save value: true
	editable: true
extra card field:
	type: choice
	name: corner 2
	choice: none
	choice: day
	choice: night
	choice: moon
	choice: eldrazi
	choice: compass
	choice: closed fan
	choice: open fan
	choice: triangle up
	choice: triangle down
	choice: specialize arrows
	choice: artifact
	choice: creature
	choice: enchantment
	choice: instant
	choice: land
	choice: multitype
	choice: sorcery
	choice: planeswalker
	choice: structure
	choice: aetherprint
	choice: modal
	choice:
		name: sparker colors
		choice: white
		choice: blue
		choice: black
		choice: red
		choice: green
		choice: multicolor
		choice: colorless
	choice: custom one
	choice: custom two
	script: if is_modal_dfc() then "modal" else if value == "modal" then "night" else if value == "specialize triangle" then "triangle down" else value
	default: "night"
	save value: true
	editable: true
extra card field:
	type: choice
	name: floating frame
	choice: map
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: floating frame 2
	choice: map
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: snow overlay
	choice: snow
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: vehicle overlay
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: nyx overlay
	choice: nyx
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: miracle overlay
	choice: miracle
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: bookmark
	choice: mark
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: stripe
	choice: mark
	save value: false
	editable: false
extra card field:
	type: choice
	name: stripe 2
	choice: mark
	save value: false
	editable: false
extra card field:
	type: choice
	name: curtain
	choice: curtain
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: legend overlay
	choice: crown
	save value: false
	editable: false
	script: card.card_color
extra card field:
	type: choice
	name: snow overlay 2
	choice: snow
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: vehicle overlay 2
	choice: car door
	save value: false
	editable: false
extra card field:
	type: choice
	name: nyx overlay 2
	choice: nyx
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: miracle overlay 2
	choice: miracle
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: bookmark 2
	choice: bookmark
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: class paper
	choice: bookmark
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: class paper 2
	choice: bookmark
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: curtain 2
	choice: curtain
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	name: legend overlay 2
	choice: crown
	save value: false
	editable: false
	script: card.card_color_2
extra card field:
	type: choice
	choice: bar
	name: meld bar
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: flavor bar
	choice: bar
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: flavor bar 2
	choice: bar
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: text
	name: promo label
	save value: true
	description: The golden promo label.
extra card field:
	type: text
	name: promo label 2
	save value: true
	description: The second golden promo label.
extra card field:
	type: text
	name: filler text
	editable: true
	save value: true
	show statistics: false
	multi line: true
	script:
		forward_editor(field: card.special_text)
		special_text()
extra card field:
	type: text
	name: filler text 2
	editable: true
	save value: true
	show statistics: false
	multi line: true
	script:
		forward_editor(field: card.special_text_2)
		special_text2()
extra card field:
	type: choice
	name: chapter 1
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 2
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 3
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 4
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 5
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 6
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter custom
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 1
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 2
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 3
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 4
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 1b
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 2b
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 3b
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 4b
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 5b
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter 6b
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: chapter customb
	choice: chapter
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 1b
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 2b
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 3b
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: linebreak 4b
	choice: line
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: color
	name: silver patch
	script: rgb(0,0,0)
extra card field:
	type: color
	name: silver patch 2
	script: rgb(0,0,0)
extra card field:
	type: choice
	name: evobar
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar tip
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar 2
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar tip 2
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar start
	choice: evo
	save value: false
	editable: false
extra card field:
	type: choice
	name: evobar start 2
	choice: evo
	save value: false
	editable: false
# Add the word "LEVEL" to the top arrow.
extra card field:
	type: text
	name: lvl label 0
	editable: false
	save value: false
	script: if loy_leveler() then ":" else level_label(0)
# Add the word "LEVEL" to the first arrow.
extra card field:
	type: text
	name: lvl label 1
	editable: false
	save value: false
	script: if is_class() then "Level 2" else if loy_leveler() then ":" else level_label(1)
# Add the word "LEVEL" to the second arrow.
extra card field:
	type: text
	name: lvl label 2
	editable: false
	save value: false
	script: if is_class() then "Level 3" else if loy_leveler() then ":" else level_label(2)
# Add the word "LEVEL" to the third arrow.
extra card field:
	type: text
	name: lvl label 3
	editable: false
	save value: false
	script: if is_class() then "Level 4" else if loy_leveler() then ":" else level_label(2)
extra card field:
	type: choice
	name: level 2 overlay
	script: card.card_color
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: level 3 overlay
	script: card.card_color
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: level 4 overlay
	script: card.card_color
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 1
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 2
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 3
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 4
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
# Add the word "LEVEL" to the top arrow.
extra card field:
	type: text
	name: lvl label 5
	editable: false
	save value: false
	script: if loy_leveler2() then ":" else level_label(3)
# Add the word "LEVEL" to the first arrow.
extra card field:
	type: text
	name: lvl label 6
	editable: false
	save value: false
	script: if back_class() then "Level 2" else if loy_leveler2() then ":" else level_label(4)
# Add the word "LEVEL" to the second arrow.
extra card field:
	type: text
	name: lvl label 7
	editable: false
	save value: false
	script: if back_class() then "Level 3" else if loy_leveler2() then ":" else level_label(5)
# Add the word "LEVEL" to the third arrow.
extra card field:
	type: text
	name: lvl label 8
	editable: false
	save value: false
	script: if back_class() then "Level 4" else if loy_leveler2() then ":" else level_label(5)
extra card field:
	type: choice
	name: level 6 overlay
	script: card.card_color_2
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: level 7 overlay
	script: card.card_color_2
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: level 8 overlay
	script: card.card_color_2
	choice: mask
	editable: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 5
	script: card.card_color_2
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 6
	script: card.card_color_2
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 7
	script: card.card_color_2
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: arrow 8
	script: card.card_color_2
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: alias bar
	script: card.card_color
	save value: false
	editable: false
extra card field:
	type: choice
	name: alias bar 2
	script: card.card_color_2
	save value: false
	editable: false
extra card field:
	type: choice
	name: front modal flag
	script: card.card_color_2
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: choice
	name: back modal flag
	script: card.card_color
	editable: false
	save value: false
	show statistics: false
extra card field:
	type: text
	name: back type hint
	script: if front_modal_hint().0 != "" then front_modal_hint().0 else value
	save value: true
	editable: true
extra card field:
	type: text
	name: back color hint
	script: if front_modal_hint().1 != "" then front_modal_hint().1 else value
	save value: true
	editable: true
extra card field:
	type: text
	name: front type hint
	script: if back_modal_hint().0 != "" then back_modal_hint().0 else value
	save value: true
	editable: true
extra card field:
	type: text
	name: front color hint
	script: if back_modal_hint().1 != "" then back_modal_hint().1 else value
	save value: true
	editable: true
extra card field:
	type: text
	name: vorthos box
	save value: true
	editable: true
	description: Where they put mtgstory.com on story spotlights.
extra card field:
	type: text
	name: vorthos box 2
	save value: true
	editable: true
	description: Where they put mtgstory.com on story spotlights.
extra card field:
	type: multiple choice
	name: pride pin
	include file: /magic-pride.mse-include/pins
	save value: true
	editable: true
extra card field:
	type: multiple choice
	name: pride pin 2
	include file: /magic-pride.mse-include/pins
	save value: true
	editable: true
extra card field:
	type: choice
	name: list icon
	choice: no icon
	choice: the list
	save value: true
	editable: true
extra card style:
	pt 2 copy:
		z index: 4
		right: 347
		top: 446
		width: 30
		height:	12
		alignment: bottom right
		visible: {not is_modal_dfc() and not is_leveler() and not is_saga() and not mainframe_walker() and chosen(styling.other_options, choice:"use hovering pt")}
		font:
			name: ModMatrix
			size: 12
			weight: bold
			color: {rgb(45,45,45)}
			separator color: red
	card code:
		left: 24
		top: 488
		width: 120
		height: 10
		z index: 6
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	card code 2:
		left: 399
		top: 488
		width: 120
		height: 10
		z index: 2
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	artist arrow:
		left: { 28 + card_style.set_code.content_width }
		top: 500
		width: 12
		height: 7
		z index: 6
		render style: image
		image: artist_arrow.png
	artist arrow 2:
		left: { 403 + card_style.set_code_2.content_width }
		top: 500
		width: 12
		height: 7
		z index: 2
		render style: image
		image: artist_arrow.png
	loyalty box:
		right: 364
		top: 464
		width: 60
		height: 38
		z index: 6
		render style: image
		visible: { card.loyalty != "" }
		choice images:
			loyalty: loyalty.png
	loyalty box 2:
		right: 741
		top: 464
		width: 60
		height: 38
		z index: 6
		render style: image
		visible: { card.loyalty_2 != "" }
		choice images:
			loyalty: loyalty.png
	stamp:
		left: {if is_map() then 169 else if is_normal() then 165 else 166 }
		top: { if is_normal() and not is_map() then 472 else 471.5 }
		width: { if is_map() then 38 else if is_normal() then 46 else 43.5 }
		height: { if is_map() then 24 else if is_normal() then 26 else 23 }
		z index: 3
		visible: { is_stamped() and not front_clear() }
		render style: image
		image: { if is_saga() then "saga_stamp.png" else if is_map() then "maps/holo_stamp.png" else if mainframe_walker() then walker_stamp() else if is_normal() then card_stamp2() else card_stamp() }
		mask: { (if is_full() and mainframe_walker() then "mythic" else "") + (if mainframe_walker() then "walker_" else "") + "stamp_mask.png" }
	foil stamp:
		left: {if front_clear() then 168 else if is_normal() then 165 else 169 }
		top: { if front_clear() then 471 else if is_normal() then 472 else 473 }
		width: { if front_clear() and is_normal() then 0 else if front_clear() then 41 else if is_normal() then 46 else 37 }
		height: { if front_clear() and is_normal() then 0 else if front_clear() then 28 else if is_normal() then 26 else 22.5 }
		z index: 4
		visible: { is_stamped() and not is_map() and not (mainframe_walker() and front_clear())}
		render style: image
		image: { if front_clear() then "xstamp.png" else "foil_stamp.png" }
	foil layer:
		left: 0
		top : 0
		width: 375
		height: 523
		z index: 14
		render style: image
		image: {if styling.overlay == "" then "" else styling.overlay + "/overlay.png"}
	foil layer 2:
		left: 377
		top: 0
		width: 375
		height: 523
		z index: 14
		render style: image
		image: {if styling.overlay == "" then "" else styling.overlay + "/overlay.png"}
	loyalty cost box 1:
		left: {if is_normal() then 0 else 15}
		top: { abil_center(0) - 17.3 - 2 - loyal_move(0) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_1 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 2:
		left: {if is_normal() then 0 else 15}
		top: { abil_center(1) - 17.3 - 2 - loyal_move(1) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_2 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 3:
		left: {if is_normal() then 0 else 15}
		top: { abil_center(2) - 17.3 - 2 - loyal_move(2) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_3 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 4:
		left: {if is_normal() then 0 else 15}
		top: { abil_center(3) - 17.3 - 2 - loyal_move(3) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_4 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	colon 1:
		left: {if is_normal() then 41 else 59}
		top: { abil_center(0) - 17.3 + 10 - loyal_move(0) }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_1 != "" }
	colon 2:
		left: {if is_normal() then 41 else 59}
		top: { abil_center(1) - 17.3 + 10 - loyal_move(1) }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_2 != "" }
	colon 3:
		left: {if is_normal() then 41 else 59}
		top: { abil_center(2) - 17.3 + 10 - loyal_move(2) }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_3 != "" }
	colon 4:
		left: {if is_normal() then 41 else 59}
		top: { abil_center(3) - 17.3 + 10 - loyal_move(3) }
		width: { if has_four_abilities() then 5 else 0 }
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_4 != "" }
	colon 5:
		left: {if back_normal() then 418 else 436}
		top: { abil_centerb(0) - 17.3 + 10 - loyal_moveb(0) }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_5 != "" }
	colon 6:
		left: {if back_normal() then 418 else 436}
		top: { abil_centerb(1) - 17.3 + 10 - loyal_moveb(1) }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_6 != "" }
	colon 7:
		left: {if back_normal() then 418 else 436}
		top: { abil_centerb(2) - 17.3 + 10 - loyal_moveb(2) }
		width: 5
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_7 != "" }
	colon 8:
		left: {if back_normal() then 418 else 436}
		top: { abil_centerb(3) - 17.3 + 10 - loyal_moveb(3) }
		width: { if back_four_abilities() then 5 else 0 }
		height: 10
		z index: 6
		font:
			name: MPlantin
			size: 15
			scale down to: 15
			color: black
		alignment: middle center
		visible: { card.loyalty_cost_8 != "" }
	top stripe:
		left: { if front_clear() then 47 else 45}
		top: { max(to_int(stripe01()-3)+(if front_clear() then 2 else 0), (if has_four_abilities() then 309 else 345)-(if front_clear() then 2 else 0)) }
		width: { if front_clear() then 298 else 302}
		height: 20
		image: { (if front_clear() then "clear_" else "") + "top_stripe_test.png" }
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { mainframe_walker() and force_level() != "one" }
	bot stripe:
		left: { if front_clear() then 47 else 45}
		top: {to_int(stripe12()-3) }
		width: { if front_clear() then 298 else 302}
		height: 13
		image: { (if front_clear() then "clear_" else "") + "bot_stripe_test.png" }
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { mainframe_walker() and card.level_3_text != ""}
	fourth stripe:
		left: { if front_clear() then 47 else 45}
		top: {to_int(min(465, stripe23()-3)) }
		width: { if front_clear() then 298 else 302}
		height: 20
		image: { (if front_clear() then "clear_" else "") + "top_stripe_test.png" }
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { max_level() > 3 or force_level() == "four"}
	stripe color:
		left: { if front_clear() then 47 else 45}
		top: { (if has_four_abilities() then 309 else if front_clear() then 343 else 345) }
		width: { if front_clear() then 298 else 302}
		bottom: { max(if force_level() == "one" then 465 else to_int(stripe01()-3)+(if front_clear() then 2 else 0), (if has_four_abilities() then 309 else 345)-(if front_clear() then 2 else 0)) }
		z index: 2
		mask: stripe_mask.png
		visible: {mainframe_walker()}
	stripe color 2:
		left: { if front_clear() then 47 else 45}
		top: { to_int(stripe12()+10) }
		width: { if front_clear() then 298 else 302}
		bottom: { if max_level() == 3 or stripe23() == 0 then 465 else to_int(min(465, stripe23()-3)) }
		z index: 2
		mask: stripe_mask.png
		visible: { mainframe_walker() and card.level_3_text != ""}
	top color:
		left: {if front_clear() then 28 else 26}
		top: {if front_clear() and max_level() > 4 then 288 else if has_four_abilities() then 288 else if front_clear() then 322 else 324 }
		width: {if front_clear() then 320 else 324}
		height: { if front_clear() and max_level() > 4 then 19 else 21 }
		z index: 2
		mask: mask_top.png
		visible: {mainframe_walker()}
	bottom color:
		left: { if front_clear() then 28 else 26}
		top: 465
		width: {if front_clear() then 319 else 323}
		height: 13
		z index: 2
		mask: {(if is_stamped() then "rare_" else "") + "mask_bot.png"}
		visible: { force_level() == "one" or max_level() == 3 or max_level() == 5}
	loyalty cost box 5:
		left: {if back_normal() then 377 else 392}
		top: { abil_centerb(0) - 17.3 - 2 - loyal_moveb(0) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_5 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 6:
		left: {if back_normal() then 377 else 392}
		top: { abil_centerb(1) - 17.3 - 2 - loyal_moveb(1) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_6 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 7:
		left: {if back_normal() then 377 else 392}
		top: { abil_centerb(2) - 17.3 - 2 - loyal_moveb(2) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_7 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png
	loyalty cost box 8:
		left: {if back_normal() then 377 else 392}
		top: { abil_centerb(3) - 17.3 - 2 - loyal_moveb(3) }
		width: 45
		height: 36
		z index: 6
		render style: image
		visible: { card.loyalty_cost_8 != "" }
		choice images:
			loyalty up: loyaltyup.png
			loyalty down: loyaltydown.png
			loyalty naught: loyaltynaught.png

	top stripe back:
		left: { if back_clear() then 424 else 422}
		top: { max(to_int(stripe01b()-3)+(if back_clear() then 2 else 0), (if back_four_abilities() then 309 else 345)-(if back_clear() then 2 else 0)) }
		width: { if back_clear() then 298 else 302}
		height: 20
		image: { (if back_clear() then "clear_" else "") + "top_stripe_test.png" }
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { mainframe_walkerb() and force_levelb() != "one" }
	bot stripe back:
		left: { if back_clear() then 424 else 422}
		top: {to_int(stripe12b()-3) }
		width: { if back_clear() then 298 else 302}
		height: 13
		image: { (if back_clear() then "clear_" else "") + "bot_stripe_test.png" }
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { mainframe_walkerb() and card.level_7_text != ""}
	fourth stripe back:
		left: { if back_clear() then 424 else 422}
		top: {to_int(min(465, stripe23b()-3)) }
		width: { if back_clear() then 298 else 302}
		height: 20
		image: { (if back_clear() then "clear_" else "") + "top_stripe_test.png" }
		render style: image
		z index: 2
		mask: stripe_mask.png
		visible: { max_levelb() > 3 or force_levelb() == "four"}
	stripe color back:
		left: { if back_clear() then 424 else 422}
		top: { (if back_four_abilities() then 309 else if back_clear() then 343 else 345) }
		width: { if back_clear() then 298 else 302}
		bottom: { max(if force_levelb() == "one" then 465 else to_int(stripe01b()-3)+(if back_clear() then 2 else 0), (if back_four_abilities() then 309 else 345)-(if back_clear() then 2 else 0)) }
		z index: 2
		mask: stripe_mask.png
		visible: {mainframe_walkerb()}
	stripe color 2 back:
		left: { if back_clear() then 424 else 422}
		top: { to_int(stripe12b()+10) }
		width: { if back_clear() then 298 else 302}
		bottom: { if max_levelb() == 3 or stripe23b() == 0 then 465 else to_int(min(465, stripe23b()-3)) }
		z index: 2
		mask: stripe_mask.png
		visible: { mainframe_walkerb() and card.level_7_text != ""}
	top color back:
		left: {if back_clear() then 405 else 403}
		top: {if back_clear() and max_levelb() > 4 then 288 else if back_four_abilities() then 288 else if back_clear() then 322 else 324 }
		width: {if back_clear() then 320 else 324}
		height: { if back_clear() and max_levelb() > 4 then 19 else 21 }
		z index: 2
		mask: mask_top.png
		visible: {mainframe_walkerb()}
	bottom color back:
		left: {if back_clear() then 405 else 403}
		top: 465
		width: {if back_clear() then 319 else 323}
		height: 13
		z index: 2
		mask: mask_bot.png
		visible: { force_levelb() == "one" or max_levelb() == 3 or max_levelb() == 5}
	pt box:
		left: { if is_leveler() and not lone_pt() then 278 else if is_map() then 270 else 273}
		top: { if is_leveler() and not lone_pt() then (l1_center() - (if is_map() then 26 else 18)) else if is_map() then 453 else 466}
		width: { if is_map() then 90 else if is_normal() or card.pt != "" then 81 else 0 }
		height:	{ if is_map() then 54 else 42}
		z index: 3
		visible: { card.pt != "" }
		render style: image
		image: { if is_map() then card_mapbox() else if is_vehicle() then "vpt.png" else if front_clear() then "xpt.png" else card_ptbox() }
	pt box 2:
		left: { if is_leveler() then 278 else if back_map() then 647 else 648}
		top: { if is_leveler() then (l2_center() - (if is_map() then 26 else 15)) else if back_map() then 453 else 466}
		width: { if back_map() or (is_leveler() and is_map()) then 90 else if is_leveler() or back_normal() or card.pt_2 != "" then 81 else 0}
		height:	{if back_map() or (is_leveler() and is_map()) then 54 else 42}
		z index: 3
		visible: { card.pt_2 != "" }
		render style: image
		image: { if is_leveler() then (if is_map() then card_mapbox() else if is_vehicle() then "vpt.png" else if front_clear() then "xpt.png" else leveler_ptbox2()) else if back_map() then card_mapbox() else if back_vehicle() then "vpt.png" else if back_clear() then "xpt.png" else card_ptbox2() }
	pt box 3:
		left: 278
		top: { l3_center() - (if is_map() then 26 else 15)}
		width: { if (is_leveler() and not lone_pt()) or card.pt_3 != "" then (if is_map() then 90 else 81) else 0}
		height:	{ if (is_leveler() and not lone_pt()) or card.pt_3 != "" then (if is_map() then 54 else 42) else 0}
		z index: 3
		visible: { card.pt_3 != "" }
		render style: image
		image: {if is_map() then mappt_background() else combine_blend(image1: lv_3_ptbox(), image2: "ptbox_multiply_2.png", combine: "multiply")}
	pt box 7:
		left: 278
		top: { l4_center() - (if is_map() then 26 else 15)}
		width: { if (is_leveler() and not lone_pt()) or card.pt_7 != "" then (if is_map() then 90 else 81) else 0}
		height:	{ if (is_leveler() and not lone_pt()) or card.pt_7 != "" then (if is_map() then 54 else 42) else 0}
		z index: 3
		visible: { card.pt_7 != "" }
		render style: image
		image: {if is_map() then mappt_background() else combine_blend(image1: lv_3_ptbox(), image2: "ptbox_multiply_3.png", combine: "multiply")}
	pt box 4:
		left: {377 + if back_leveler() and not lone_pt() then 278 else if back_map() then 270 else 273}
		top: { if back_leveler() and not lone_pt() then (l5_center() - (if back_map() then 26 else 18)) else if back_map() then 453 else 466}
		width: { if back_map() then 90 else 81}
		height:	{ if back_map() then 54 else 42}
		z index: 3
		visible: { card.pt_4 != "" }
		render style: image
		image: { if back_map() then card_mapbox() else if back_vehicle() then "vpt.png" else if back_clear() then "xpt.png" else if is_leveler() and not back_leveler() then card_ptbox2() else card_ptbox() }
	pt box 5:
		left: 655
		top: { l6_center() - (if back_map() then 26 else 15)}
		width: { if (back_leveler() and not lone_pt()) or card.pt_5 != "" then (if back_map() then 90 else 81) else 0}
		height:	{ if (back_leveler() and not lone_pt()) or card.pt_5 != "" then (if back_map() then 54 else 42) else 0}
		z index: 3
		visible: { card.pt_5 != "" }
		render style: image
		image: {if back_map() then card_mapbox() else combine_blend(image1: lv_6_ptbox(), image2: "ptbox_multiply_1.png", combine: "multiply")}
	pt box 6:
		left: 655
		top: { l7_center() - (if back_map() then 26 else 15)}
		width: { if (back_leveler() and not lone_pt()) or card.pt_6 != "" then (if back_map() then 90 else 81) else 0}
		height:	{ if (back_leveler() and not lone_pt()) or card.pt_6 != "" then (if back_map() then 54 else 42) else 0}
		z index: 3
		visible: { card.pt_6 != "" }
		render style: image
		image: {if back_map() then card_mapbox() else combine_blend(image1: lv_7_ptbox(), image2: "ptbox_multiply_2.png", combine: "multiply")}
	pt box 8:
		left: 655
		top: { l8_center() - (if back_map() then 26 else 15)}
		width: { if (back_leveler() and not lone_pt()) or card.pt_8 != "" then (if back_map() then 90 else 81) else 0}
		height:	{ if (back_leveler() and not lone_pt()) or card.pt_8 != "" then (if back_map() then 54 else 42) else 0}
		z index: 3
		visible: { card.pt_8 != "" }
		render style: image
		image: {if back_map() then card_mapbox() else combine_blend(image1: lv_8_ptbox(), image2: "ptbox_multiply_3.png", combine: "multiply")}

	auto copyright:
		right: 350
		top: { if is_leveler() and not lone_pt() then 488 else if is_normal() and card.pt != "" or card.loyalty != "" then 500 else if is_normal() then 488 else 498 }
		width: {if set.automatic_copyright then 140 else 0}
		height: 10
		z index: 6
		alignment: middle right shrink-overflow
		font:
			name: MPlantin
			size: 6.5
			color: white
			weight: bold
	auto copyright 2:
		right: 728
		top: { if back_leveler() then (if lone_pt() then (if card.pt_4 != "" then 500 else 488) else 488) else if is_leveler() then (if card.pt_4 != "" then 500 else 488) else if (back_normal() and card.pt_2 != "") or card.loyalty != "" then 500 else if back_normal() then 488 else 498 }
		width: {if set.automatic_copyright then 140 else 0}
		height: 10
		z index: 6
		alignment: middle right shrink-overflow
		font:
			name: MPlantin
			size: 6.5
			color: white
			weight: bold
	corner:
		left: { (if is_map() then 22 else if is_normal() then 19 else 21) - (if is_modal_dfc() then 9 else 0)}
		top: { (if is_normal() then 25 else 17) - (if is_modal_dfc() then 2 else 0)}
		height: { if is_modal_dfc() then 35 else if is_normal() then 31 else 32}
		width: { if is_modal_dfc() then 42 else if is_normal() then 31 else 32}
		z index: 5
		render style: image
		choice images:
			lesson: corners/lesson.png
			day: corners/sun_circle.png
			night: corners/night_circle.png
			eldrazi: corners/eldrazi.png
			moon: corners/moon.png
			compass: corners/compass.png
			artifact: corners/artifact.png
			creature: corners/creature.png
			enchantment: corners/enchantment.png
			instant: corners/instant.png
			land: corners/land.png
			multitype: corners/multitype.png
			sorcery: corners/sorcery.png
			planeswalker: corners/planeswalker.png
			structure: corners/structure.png
			compass: corners/compass.png
			aetherprint: corners/aetherprint.png
			closed fan: corners/closedfan.png
			open fan: corners/openfan.png
			triangle up: corners/triangle_up.png
			triangle down: corners/triangle_down.png
			specialize arrows: corners/specialized.png
			sparker colors white: corners/wcorner.png
			sparker colors blue: corners/ucorner.png
			sparker colors black: corners/bcorner.png
			sparker colors red: corners/rcorner.png
			sparker colors green: corners/gcorner.png
			sparker colors multicolor: corners/mcorner.png
			sparker colors colorless: corners/ccorner.png
			custom one: { if contains(styling.custom_symbol_one, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_symbol_one else "" }
			custom two: { if contains(styling.custom_symbol_two, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_symbol_two else "" }
			modal: {front_arrow_image(card.card_color)}

	corner 2:
		left: { (if back_map() then 399 else if back_normal() then 396 else 398) - (if is_modal_dfc() then 9 else 0)}
		top: { (if back_normal() then 25 else 17) - (if is_modal_dfc() then 2 else 0)}
		height: { if is_modal_dfc() then 35 else if back_normal() then 31 else 32}
		width: { if is_modal_dfc() then 42 else if back_normal() then 31 else 32}
		z index: 5
		render style: image
		choice images:
			lesson: corners/lesson.png
			day: corners/sun_circle.png
			night: corners/night_circle.png
			eldrazi: corners/eldrazi.png
			moon: corners/moon.png
			compass: corners/compass.png
			artifact: corners/artifact.png
			creature: corners/creature.png
			enchantment: corners/enchantment.png
			instant: corners/instant.png
			land: corners/land.png
			multitype: corners/multitype.png
			sorcery: corners/sorcery.png
			planeswalker: corners/planeswalker.png
			structure: corners/structure.png
			compass: corners/compass.png
			aetherprint: corners/aetherprint.png
			closed fan: corners/closedfan.png
			open fan: corners/openfan.png
			triangle up: corners/triangle_up.png
			triangle down: corners/triangle_down.png
			specialize arrows: corners/specialized.png
			sparker colors white: corners/wcorner.png
			sparker colors blue: corners/ucorner.png
			sparker colors black: corners/bcorner.png
			sparker colors red: corners/rcorner.png
			sparker colors green: corners/gcorner.png
			sparker colors multicolor: corners/mcorner.png
			sparker colors colorless: corners/ccorner.png
			custom one: { if contains(styling.custom_symbol_one, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_symbol_one else "" }
			custom two: { if contains(styling.custom_symbol_two, match:".png") then "/magic-mainframe-extras.mse-include/" + styling.custom_symbol_two else "" }
			modal: {back_arrow_image(card.card_color_2)}
	snow overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if front_clear() then "" else if mainframe_walker() or is_leveler() or is_saga() then snow_texture() else snow_background()}
		z index: 1
		visible: {is_snow() and not chosen(styling.other_options, choice:"mythic edition")}
		mask: {if mainframe_walker() then ("nyx/" + (if has_four_abilities() then "4" else "") + "pw_mask.png") else "snow/snow_" + (if is_saga() then "saga" else if is_modal_dfc() then (if is_leveler() then "border" else "modal") else if is_leveler() then "notched" else "front") + "_mask.png"}
	snow overlay 2:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if back_clear() then "" else if mainframe_walkerb() or back_leveler() or back_saga() then snow_texture() else snow_background()}
		z index: 1
		visible: {back_snow() and not chosen(styling.other_options, choice:"mythic edition")}
		mask: {if mainframe_walkerb() then ("nyx/" + (if back_four_abilities() then "4" else "") + "pw_mask.png") else "snow/snow_" + (if back_saga() then "saga" else if back_leveler() then "border" else "back") + "_mask.png"}
	nyx overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if front_clear() then "" else nyx_background()}
		z index: 1
		visible: {is_nyx() and not chosen(styling.other_options, choice:"mythic edition")}
		mask: {"nyx/" + (if mainframe_walker() then ((if has_four_abilities() then "4" else "") + "pw_") else if is_modal_dfc() then "" else "notch_") + (if is_vehicle() then "v_") + (if is_saga() then "full") + "mask.png"}
	curtain:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {curtain_background()}
		z index: 3
		visible: {is_curtains()}
		mask: { if is_legend() then "lcurtainmask.png" else "nodemask.png"}
	legend overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if front_clear() then "xcrown.png" else legend_background()}
		z index: 3
		visible: {is_legend()}
		mask: { if is_curtains() then "curtainmask.png" else if not front_clear() then "nodemask.png"}
	miracle overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if front_clear() then "miracles/xmiracle.png" else miracle_background()}
		z index: 2
		visible: {is_miracle() and not chosen(styling.other_options, choice:"mythic edition")}
		mask: { if not front_clear() then "nodemask.png"}
	vehicle overlay:
		left: 0
		top: 0
		width: 375
		height: 523
		render style: image
		image: full_voverlay.png
		z index: 1
		mask: {if mainframe_walker() then ("nyx/" + (if has_four_abilities() then "4") + "pw_mask.png") else if is_saga() then "nyx/fullmask.png" else if is_modal_dfc() then "nyx/mask.png" else "nyx/notch_mask.png"}
		visible: {is_vehicle()}
	nyx overlay 2:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if back_clear() then "" else nyx_background()}
		z index: 1
		visible: {back_nyx() and not chosen(styling.other_options, choice:"mythic edition")}
		mask: {"nyx/" + (if mainframe_walkerb() then ((if back_four_abilities() then "4") + "pw_")) + (if back_vehicle() then "v_") + (if back_saga() then "full") + "mask.png"}
	miracle overlay 2:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if back_clear() then "miracles/xmiracle.png" else if chosen(styling.other_options, choice:"normal back face") then miracle_background() else miracle_background2()}
		z index: 2
		visible: {back_miracle() and not chosen(styling.other_options, choice:"mythic edition")}
		mask: { if not back_clear() then "nodemask.png"}
	curtain 2:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: {curtain_background()}
		z index: 3
		visible: {is_curtains()}
		mask: { if back_legend() then "lcurtainmask.png" else "nodemask.png"}
	legend overlay 2:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: {if back_clear() then "xcrown.png" else legend_background2()}
		z index: 3
		visible: {back_legend()}
		mask: { if is_curtains() then "curtainmask.png" else if not back_clear() then "nodemask.png"}
	vehicle overlay 2:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: {(if back_saga() or mainframe_walkerb() then "full_") + "voverlay.png"}
		z index: 1
		mask: {if mainframe_walkerb() then ("nyx/" + (if back_four_abilities() then "4") + "pw_mask.png") else if back_saga() then "nyx/fullmask.png" else if chosen(styling.other_options, choice:"normal back face") then "nyx/v_mask.png" else ""}
		visible: {back_vehicle()}
	floating frame:
		left: 0
		top: 0
		width: 375
		height: 523
		z index: 1
		render style: image
		image: {if is_map() then map_background() else if front_clear() then ((if is_normal() then "clear" else if has_four_abilities() then "planeswalker/xcard3" else "planeswalker/xcard") + (if is_stamped() then "_rare") + ".png") else if has_four_abilities() then card_background5() else card_background3()}
		visible: {is_map() or front_clear() or mainframe_walker()}
		mask: {if is_map() then "maps/frame_mask.png" else walker_mask_front()}
	floating frame 2:
		left: 377
		top: 0
		width: 375
		height: 523
		z index: 1
		render style: image
		image: {if back_map() then map_background() else if chosen(styling.other_options, choice:"normal back face") then (if back_clear() then ((if back_normal() then "clear" else if back_four_abilities() then "planeswalker/xcard3" else "planeswalker/xcard") + ".png") else if back_four_abilities() then card_background5() else card_background3()) else if back_clear() then ((if back_normal() then "clear2" else if back_four_abilities() then "planeswalker/xcard4" else "planeswalker/xcard2") + ".png") else if back_four_abilities() then card_background6() else card_background4()}
		visible: {back_map() or back_clear() or mainframe_walkerb()}
		mask: {if back_map() then "maps/frame_mask.png" else walker_mask_back()}
	front modal flag:
		left: {if mainframe_walker() then 10 else 14}
		top: 468
		width: 160
		height: 20
		render style: image
		image: {front_flag_image()}
		z index: 5
		visible: {is_modal_dfc()}
	back type hint:
		left: {if mainframe_walker() then 24 else 28}
		top: 471
		width: 80
		height: 12
		z index: 7
		visible: {is_modal_dfc()}
		font:
			name: Beleren Bold
			size: 9
			color: white
	back color hint:
		right: {if mainframe_walker() then 157 else 161}
		top: 471
		width: 80
		height: 14
		z index: 8
		visible: {is_modal_dfc()}
		font:
			name: MPlantin
			size: 10
			color: white
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 10
			scale down to: 6
		alignment: right middle
	back modal flag:
		left: {if mainframe_walkerb() then 387 else 391}
		top: 468
		width: 160
		height: 20
		render style: image
		image: {back_flag_image()}
		z index: 5
		visible: {is_modal_dfc()}
	front type hint:
		left: { if mainframe_walkerb() then 401 else 405}
		top: 471
		width: 80
		height: 12
		z index: 8
		visible: {is_modal_dfc()}
		font:
			name: Beleren Bold
			size: 9
			color: black
	front color hint:
		right: {if mainframe_walkerb() then 534 else 538}
		top: {if match(value, match:"^<sym>[^<]+</sym>$") then 472 else 471}
		width: 80
		height: 14
		z index: 8
		visible: {is_modal_dfc()}
		font:
			name: MPlantin
			size: 10
			color: black
		symbol font:
			name: { styling.text_box_mana_symbols }
			size: 10
			scale down to: 6
		alignment: right middle
	meld bar:
		left: 377
		top: 0
		width: 375
		height: 523
		render style: image
		image: meldmask.png
		visible: {chosen(styling.other_options, choice:"meld back")}
		z index: 10
	promo label:
		left: 40
		top: { if has_four_abilities() then 225 else 262 }
		width: {if chosen(styling.other_options, choice:"prerelease stamps") then 295 else 0}
		height: 29
		alignment: middle right
		z index: 4
		font:
			name: ModMatrix
			size: 14
			color: rgb(223,169,41)
	flavor bar:
		left: 0
		top: { bar_equation() }
		width: 375
		height: 1
		z index: 1
		render style: image
		image: bar.png
		visible: { card.rule_text != "" and remove_tags(card.flavor_text) != "" and set.use_flavor_bar }
	promo label 2:
		left: 417
		top: { if back_four_abilities() then 225 else 262 }
		width: {if chosen(styling.other_options, choice:"prerelease stamps") then 295 else 0}
		height: 29
		alignment: middle right
		z index: 4
		font:
			name: ModMatrix
			size: 14
			color: rgb(223,169,41)
	flavor bar 2:
		left: 377
		top: { bar_equation2() }
		width: 375
		height: 1
		z index: 1
		render style: image
		image: bar.png
		visible: { card.rule_text_2 != "" and remove_tags(card.flavor_text_2) != "" and set.use_flavor_bar }

	chapter 1:
		left: 14
		top: { if chapter1() == "" then 185 else chapter1() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("1")}
		visible: {is_saga()}
	chapter 2:
		left: 14
		top: { if chapter2() == "" then 279 else chapter2() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("2")}
		visible: {is_saga()}
	chapter 3:
		left: 14
		top: { if chapter3() == "" then 373 else chapter3() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("3")}
		visible: {is_saga()}
	chapter 4:
		left: 14
		top: { if chapter4() == "" then 600 else chapter4() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("4")}
		visible: {is_saga()}
	chapter 5:
		left: 14
		top: { if chapter5() == "" then 600 else chapter5() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("5")}
		visible: {is_saga()}
	chapter 6:
		left: 14
		top: { if chapter6() == "" then 600 else chapter6() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("6")}
		visible: {is_saga()}
	chapter custom:
		left: 14
		top: { if chapter_custom() == "" then 600 else chapter_custom() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {custom_chapter_node()}
		visible: {is_saga()}
###pulls double duty as saga line and mutate bar to reduce fields
	linebreak 1:
		left: {if is_class() then 188 else if is_mutate() then 28 else 30}
		top: {if is_class() then lev0() else if is_mutate() then 393 else 154}
		width: {if is_mutate() then 317 else 156}
		height: {if is_mutate() or is_class() then 2 else 3}
		render style: image
		z index: 4
		image: {if is_class() then "bar.png" else if is_mutate() then "mutbar.png" else "line.png"}
		visible: {is_saga() or is_mutate() or is_class()}
	linebreak 2:
		left: {if is_class() then 188 else 30}
		top: {if is_class() then lev2() else if split_12() == "" then 248 else split_12()-1}
		width: {if is_class() and card.level_2_text == "​" then 0 else 156}
		height: {if is_class() then 25 else 3}
		render style: image
		z index: 4
		image: {if is_class() then "level.png" else "line.png"}
		visible: {is_saga() or is_class()}
	linebreak 3:
		left: {if is_class() then 188 else 30}
		top: {if is_class() then lev3() else if split_23() == "" then 342 else split_23()-1}
		width: {if is_class() and card.level_3_text == "​" then 0 else 156}
		height: {if is_class() then 25 else 3}
		render style: image
		z index: 4
		image: {if is_class() then "level.png" else "line.png"}
		visible: {three_boxes() or four_boxes() or is_class()}
	linebreak 4:
		left: {if is_class() then 188 else 30}
		top: {if is_class() then lev4() else if split_34() == "" then 600 else split_34()-1}
		width: {if is_class() and card.level_4_text == "" then 0 else 156}
		height: 4
		render style: image
		height: {if is_class() then 25 else 3}
		image: {if is_class() then "level.png" else "line.png"}
		visible: {four_boxes() or is_class()}
		z index: 3
	chapter 1b:
		left: 391
		top: { if chapter1b() == "" then 185 else chapter1b() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("1")}
		visible: {back_saga()}
	chapter 2b:
		left: 391
		top: { if chapter2b() == "" then 279 else chapter2b() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("2")}
		visible: {back_saga()}
	chapter 3b:
		left: 391
		top: { if chapter3b() == "" then 373 else chapter3b() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("3")}
		visible: {back_saga()}
	chapter 4b:
		left: 391
		top: { if chapter4b() == "" then 600 else chapter4b() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("4")}
		visible: {back_saga()}
	chapter 5b:
		left: 391
		top: { if chapter5b() == "" then 600 else chapter5b() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("5")}
		visible: {back_saga()}
	chapter 6b:
		left: 391
		top: { if chapter6b() == "" then 600 else chapter6b() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {alt_chapters("6")}
		visible: {back_saga()}
	chapter customb:
		left: 391
		top: { if chapter_customb() == "" then 600 else chapter_customb() }
		width: 30
		height: 34
		render style: image
		z index: 5
		image: {custom_chapter_node()}
		visible: {back_saga()}
	linebreak 1b:
		left: {if back_class() then 565 else if back_mutate() then 405 else 407}
		top: {if back_class() then lev0b() else if back_mutate() then 393 else 154}
		width: {if back_mutate() then 317 else 156}
		height: {if back_mutate() or back_class() then 2 else 3}
		render style: image
		z index: 4
		image: {if back_class() then "bar.png" else if back_mutate() then "mutbar.png" else "line.png"}
		visible: {back_saga() or back_mutate() or back_class()}
	linebreak 2b:
		left: {if back_class() then 565 else 407}
		top: {if back_class() then lev2b() else if split_12b() == "" then 248 else split_12b()-1}
		width: {if back_class() and card.level_6_text == "​" then 0 else 156}
		height: {if back_class() then 25 else 3}
		render style: image
		z index: 4
		image: {if back_class() then "level.png" else "line.png"}
		visible: {back_saga() or back_class()}
	linebreak 3b:
		left: {if back_class() then 565 else 407}
		top: {if back_class() then lev3b() else if split_23b() == "" then 342 else split_23b()-1}
		width: {if back_class() and card.level_7_text == "​" then 0 else 156}
		height: {if back_class() then 25 else 3}
		render style: image
		z index: 4
		image: {if back_class() then "level.png" else "line.png"}
		visible: {back_three_boxes() or back_four_boxes() or back_class()}
	linebreak 4b:
		left: {if back_class() then 565 else 407}
		top: {if back_class() then lev4b() else if split_34b() == "" then 600 else split_34b()-1}
		width: {if back_class() and card.level_8_text == "" then 0 else 156}
		height: {if back_class() then 25 else 3}
		render style: image
		z index: 4
		image: {if back_class() then "level.png" else "line.png"}
		visible: {back_four_boxes() or back_class()}
	opac filter:
		left: 43
		top: {if has_four_abilities() then 290 else 325}
		width: 305
		height: {if has_four_abilities() then 192 else 157}
		mask: {"opacfilter" + if has_four_abilities() then "_4.png" else ".png"}
		z index: 1
		visible: {mainframe_walker() and pull_comma_array(styling.opacity, cell:0, end:false, default:300) != 300}
	opac filter 2:
		left: 420
		top: {if back_four_abilities() then 290 else 325}
		width: 305
		height: {if back_four_abilities() then 192 else 157}
		mask: {"opacfilter" + if back_four_abilities() then "_4.png" else ".png"}
		z index: 1
		visible: {mainframe_walkerb() and pull_comma_array(styling.opacity, cell:1, end:false, default:300) != 300}
	silver patch:
		left: 10
		top: 10
		width: 355
		height: 15
		z index: 2
		visible: {not is_full() and is_legend() and card.border_color == rgb(200,200,200)}
	silver patch 2:
		left: 387
		top: 10
		width: 355
		height: 15
		z index: 2
		visible: {not is_full() and back_legend() and card.border_color == rgb(200,200,200)}
	evobar:
		left: { if is_saga() then 188 else if poke_walker() then 40 else if is_map() then 15 else 27}
		top: { if mainframe_walker() then 51 else if is_map() then 62 else 57}
		width: {card_style.alias.content_width}
		height: 27
		z index: 2
		render style: image
		image: evobar.png
		visible: {use_evobar() and not is_skinned()}
	evobar tip:
		left: {(if poke_walker() then 39.6 else if is_map() then 14.6 else if is_saga() then 187.6 else 26.6) + card_style.alias.content_width}
		top: {if mainframe_walker() then 51 else if is_map() then 62 else 57}
		width: 36
		height: 27
		z index: 2
		render style: image
		image: evobar_tip.png
		visible: {use_evobar() and not is_skinned()}
	evobar 2:
		left: { if back_saga() then 565 else if back_poke_walker() then 417 else if back_map() then 391 else 404}
		top: {if mainframe_walkerb() then 51 else if back_map() then 62 else 57}
		width: {card_style.alias_2.content_width}
		height: 27
		z index: 2
		render style: image
		image: evobar.png
		visible: {use_evobar() and not back_skinned()}
	evobar tip 2:
		left: {(if back_poke_walker() then 416.6 else if back_map() then 390.6 else if back_saga() then 564.6 else 403.6) + card_style.alias_2.content_width}
		top: {if mainframe_walkerb() then 51 else if back_map() then 62 else 57}
		width: 36
		height: 27
		z index: 2
		render style: image
		image: evobar_tip.png
		visible: {use_evobar() and not back_skinned()}
	evobar start:
		left: 31
		top: 51
		width: 9
		height: 27
		z index: 2
		render style: image
		image: evobar_start.png
		mask: evobar_mask.png
		visible: {poke_walker()}
	evobar start 2:
		left: 408
		top: 51
		width: 9
		height: 27
		z index: 2
		render style: image
		image: evobar_start.png
		mask: evobar_mask.png
		visible: {back_poke_walker()}
	lvl label 0:
		left: {if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {l1_center() - (if loy_leveler() then 2 else 10) + arrow_offset(0)}
		width: {if is_leveler() or card.level_0 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if loy_leveler() then 10 else if center_label(0) then 0 else 10}
		z index: 6
		alignment: middle center
		font:
			name: {if loy_leveler() then "MPlantin" else "Beleren Small Caps"}
			size: {if loy_leveler() then 15 else if length(level_label(0)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {card.level_0 != ""}
	lvl label 1:
		left: {if is_class() then 270 else if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {if is_class() then lev2()+4 else l2_center() - (if loy_leveler() then 2 else 10) + arrow_offset(1)}
		width: {if is_class() and card.level_2_text != "​" then 70 else if is_leveler() or card.level_1 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if is_class() then 20 else if loy_leveler() then 10 else if center_label(1) then 0 else 10}
		z index: 6
		alignment: {if is_class() then "center right" else "center middle"}
		font:
			name: {if loy_leveler() or is_class() then "MPlantin" else "Beleren Small Caps"}
			size: {if is_class() then 11 else if loy_leveler() then 15 else if length(level_label(1)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {if is_class() then (card.level_2 == "") else card.level_1 != ""}
	lvl label 2:
		left: {if is_class() then 270 else if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {if is_class() then lev3()+4 else l3_center() - (if loy_leveler() then 2 else 10) + arrow_offset(2)}
		width: {if is_class() and card.level_3_text != "​" then 70 else if is_leveler() or card.level_2 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if is_class() then 20 else if loy_leveler() then 10 else if center_label(2) then 0 else 10}
		z index: 6
		alignment: {if is_class() then "center right" else "center middle"}
		font:
			name: {if loy_leveler() or is_class() then "MPlantin" else "Beleren Small Caps"}
			size: {if is_class() then 11 else if loy_leveler() then 15 else if length(level_label(2)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {if is_class() then (card.level_3 == "") else card.level_2 != ""}
	lvl label 3:
		left: {if is_class() then 270 else if box_leveler() then 8 else if loy_leveler() then 48 else 21}
		top: {if is_class() then lev4()+4 else l4_center() - (if loy_leveler() then 2 else 10) + arrow_offset(3)}
		width: {if is_class() and card.level_4_text != "" then 70 else if is_class() then 0 else if is_leveler() or card.level_2 != "" then (if loy_leveler() then 10 else 34 + (if box_leveler() then 30 else 0)) else 0}
		height: {if is_class() then 20 else if loy_leveler() then 10 else if center_label(3) then 0 else 10}
		z index: 6
		alignment: {if is_class() then "center right" else "center middle"}
		font:
			name: {if loy_leveler() or is_class() then "MPlantin" else "Beleren Small Caps"}
			size: {if is_class() then 11 else if loy_leveler() then 15 else if length(level_label(3)) < 8 or box_leveler() then 7 else 6}
			color: black
			weight: {if loy_leveler() then "" else "bold"}
		visible: {if is_class() then (card.level_4 == "") else card.level_3 != ""}
	level 2 overlay:
		left: 29
		top: { if is_d20() then top_of_para(rolls_start(card.text)) else 329 + lv_2_coordinate()}
		height: { if is_d20() then height_of_para(rolls_start(card.text)) else lv_2_height()}
		width: 314
		z index: 1
		render style: image
		image: {if is_d20() then "d20slice.png" else slice_crop(color_background(type:"slide", base_hybrid: card_hybrid), height: lv_2_height(), width:314, distance:(152-lv_2_coordinate()))}
		visible: {is_leveler() or (is_d20() and number_of_rolls(card.text) > 0)}
	level 3 overlay:
		left: 29
		top: { if is_d20() then top_of_para(rolls_start(card.text)+2) else 329 + lv_3_coordinate()}
		height: { if is_d20() then height_of_para(rolls_start(card.text)+2) else lv_3_height()}
		width: 314
		z index: 1
		render style: image
		image: {if is_d20() then "d20slice.png" else slice_crop(color_background(type:"slide2", base_hybrid: card_hybrid), height: lv_3_height(), width:314, distance:lv_3_height())}
		visible: {is_leveler() or (is_d20() and number_of_rolls(card.text) > 2)}
	level 4 overlay:
		left: 29
		top: { if is_d20() then top_of_para(rolls_start(card.text)+4) else 329 + lv_4_coordinate()}
		height: { if is_d20() then height_of_para(rolls_start(card.text)+4) else lv_4_height()}
		width: 314
		z index: 1
		render style: image
		image: {if is_d20() then "d20slice.png" else slice_crop(color_background(type:"slide5", base_hybrid: card_hybrid), height: lv_4_height(), width:314, distance:lv_4_height())}
		visible: {is_leveler() or (is_d20() and number_of_rolls(card.text) > 4)}
	arrow 1:
		z index: 5
		left: {arrow_left()}
		top: {l1_center() - 16 + arrow_offset(0)}
		width: {if card.level_0 != "" then arrow_width() else 0}
		height:	{arrow_height(0)}
		render style: image
		image: {if loy_leveler() then loyalty_image_name(card.level_0) else if box_leveler() then card_ptbox() else arrow_background()}
	arrow 2:
		z index: 5
		left: {arrow_left()}
		top: {l2_center() - 16 + arrow_offset(1)}
		width: {if card.level_1 != "" then arrow_width() else 0}
		height:	{arrow_height(1)}
		render style: image
		image: {if loy_leveler() then loyalty_image_name(card.level_1) else if box_leveler() then card_ptbox() else arrow_background()}
		visible: {not is_class()}
	arrow 3:
		z index: 5
		left: {arrow_left()}
		top: {l3_center() - 16 + arrow_offset(2)}
		width: {if card.level_2 != "" then arrow_width() else 0}
		height:	{arrow_height(2)}
		render style: image
		image: {if loy_leveler() then loyalty_image_name(card.level_2) else if box_leveler() then card_ptbox() else arrow_background()}
		visible: {not is_class()}
	arrow 4:
		z index: 5
		left: {arrow_left()}
		top: {l4_center() - 16 + arrow_offset(3)}
		width: {if card.level_3 != "" then arrow_width() else 0}
		height:	{arrow_height(3)}
		render style: image
		image: {if loy_leveler() then loyalty_image_name(card.level_3) else if box_leveler() then card_ptbox() else arrow_background()}
		visible: {not is_class()}
	lvl label 5:
		left: {if box_leveler2() then 385 else if loy_leveler2() then 425 else 398}
		top: {l5_center() - (if loy_leveler2() then 2 else 10) + arrow_offset2(0)}
		width:  {if back_leveler() or card.level_5 != "" then (if loy_leveler2() then 10 else 34 + (if box_leveler2() then 30 else 0)) else 0}
		height: {if loy_leveler2() then 10 else if center_label2(0) then 0 else 10}
		z index: 6
		alignment: middle center
		font:
			name: {if loy_leveler2() then "MPlantin" else "Beleren Small Caps"}
			size: {if loy_leveler2() then 15 else if length(level_label(4)) < 8 or box_leveler2() then 7 else 6}
			color: black
			weight: {if loy_leveler2() then "" else "bold"}
		visible: {card.level_5 != ""}
	lvl label 6:
		left: {if back_class() then 647 else if box_leveler2() then 385 else if loy_leveler2() then 425 else 398}
		top: {if back_class() then lev2b()+4 else l6_center() - (if loy_leveler2() then 2 else 10) + arrow_offset2(1)}
		width: {if back_class() and card.level_6_text != "​" then 70 else if back_leveler() or card.level_6 != "" then (if loy_leveler2() then 10 else 34 + (if box_leveler2() then 30 else 0)) else 0}
		height: {if back_class() then 20 else if loy_leveler2() then 10 else if center_label2(1) then 0 else 10}
		z index: 6
		alignment: {if back_class() then "center right" else "center middle"}
		font:
			name: {if loy_leveler2() or back_class() then "MPlantin" else "Beleren Small Caps"}
			size: {if back_class() then 11 else if loy_leveler2() then 15 else if length(level_label(5)) < 8 or box_leveler2() then 7 else 6}
			color: black
			weight: {if loy_leveler2() then "" else "bold"}
		visible: {if back_class() then (card.level_6 == "") else card.level_6 != ""}
	lvl label 7:
		left: {if back_class() then 647 else if box_leveler2() then 385 else if loy_leveler2() then 425 else 398}
		top: {if back_class() then lev3b()+4 else l7_center() - (if loy_leveler2() then 2 else 10) + arrow_offset2(2)}
		width: {if back_class() and card.level_7_text != "​" then 70 else if back_leveler() or card.level_7 != "" then (if loy_leveler2() then 10 else 34 + (if box_leveler2() then 30 else 0)) else 0}
		height: {if back_class() then 20 else if loy_leveler2() then 10 else if center_label2(2) then 0 else 10}
		z index: 6
		alignment: {if back_class() then "center right" else "center middle"}
		font:
			name: {if loy_leveler2() or back_class() then "MPlantin" else "Beleren Small Caps"}
			size: {if back_class() then 11 else if loy_leveler2() then 15 else if length(level_label(6)) < 8 or box_leveler2() then 7 else 6}
			color: black
			weight: {if loy_leveler2() then "" else "bold"}
		visible: {if back_class() then (card.level_7 == "") else card.level_7 != ""}
	lvl label 8:
		left: {if back_class() then 647 else if box_leveler2() then 385 else if loy_leveler2() then 425 else 398}
		top: {if back_class() then lev4b()+4 else l8_center() - (if loy_leveler2() then 2 else 10) + arrow_offset2(3)}
		width: {if back_class() and card.level_8_text != "" then 70 else if back_leveler() or card.level_8 != "" then (if loy_leveler2() then 10 else 34 + (if box_leveler2() then 30 else 0)) else 0}
		height: {if back_class() then 20 else if loy_leveler2() then 10 else if center_label2(3) then 0 else 10}
		z index: 6
		alignment: {if back_class() then "center right" else "center middle"}
		font:
			name: {if loy_leveler2() or back_class() then "MPlantin" else "Beleren Small Caps"}
			size: {if back_class() then 11 else if loy_leveler2() then 15 else if length(level_label(7)) < 8 or box_leveler2() then 7 else 6}
			color: black
			weight: {if loy_leveler2() then "" else "bold"}
		visible: {if back_class() then (card.level_8 == "") else card.level_8 != ""}
	level 6 overlay:
		left: 406
		top: { if back_d20() then top_of_para_b(rolls_start_b(card.text_2)) else 329 + lv_6_coordinate()}
		height: { if back_d20() then height_of_para_b(rolls_start_b(card.text_2)) else lv_6_height()}
		width: 314
		z index: 1
		render style: image
		image: {if back_d20() then "d20slice.png" else slice_crop(color_background(type:"slide3", base_hybrid: card_hybrid), height: lv_6_height(), width:314, distance:(152-lv_6_coordinate()))}
		visible: {back_leveler() or (back_d20() and number_of_rolls_b(card.text_2) > 0)}
	level 7 overlay:
		left: 406
		top: { if back_d20() then top_of_para_b(rolls_start_b(card.text_2)+2) else 329 + lv_7_coordinate()}
		height: { if back_d20() then height_of_para_b(rolls_start_b(card.text_2)+2) else lv_7_height()}
		width: 314
		z index: 1
		render style: image
		image: {if back_d20() then "d20slice.png" else slice_crop(color_background(type:"slide4", base_hybrid: card_hybrid), height: lv_7_height(), width:314, distance:lv_7_height())}
		visible: {back_leveler() or (back_d20() and number_of_rolls_b(card.text_2) > 2)}
	level 8 overlay:
		left: 406
		top: { if back_d20() then top_of_para_b(rolls_start_b(card.text_2)+4) else 329 + lv_8_coordinate()}
		height: { if back_d20() then height_of_para_b(rolls_start_b(card.text_2)+4) else lv_8_height()}
		width: 314
		z index: 1
		render style: image
		image: {if back_d20() then "d20slice.png" else slice_crop(color_background(type:"slide6", base_hybrid: card_hybrid), height: lv_8_height(), width:314, distance:lv_8_height())}
		visible: {back_leveler() or (back_d20() and number_of_rolls_b(card.text_2) > 4)}
	arrow 5:
		z index: 5
		left: {arrow_left2()}
		top: {l5_center() - 16 + arrow_offset2(0)}
		width: {if card.level_5 != "" then arrow_width2() else 0}
		height:	{arrow_height2(0)}
		render style: image
		image: {if loy_leveler2() then loyalty_image_name(card.level_5) else if box_leveler2() then card_ptbox() else arrow_background()}
	arrow 6:
		z index: 5
		left: {arrow_left2()}
		top: {l6_center() - 16 + arrow_offset2(1)}
		width: {if card.level_6 != "" then arrow_width2() else 0}
		height:	{arrow_height2(1)}
		render style: image
		image: {if loy_leveler2() then loyalty_image_name(card.level_6) else if box_leveler2() then card_ptbox() else arrow_background()}
		visible: {not back_class()}
	arrow 7:
		z index: 5
		left: {arrow_left2()}
		top: {l7_center() - 16 + arrow_offset2(2)}
		width: {if card.level_7 != "" then arrow_width2() else 0}
		height:	{arrow_height2(2)}
		render style: image
		image: {if loy_leveler2() then loyalty_image_name(card.level_7) else if box_leveler2() then card_ptbox() else arrow_background()}
		visible: {not back_class()}
	arrow 8:
		z index: 5
		left: {arrow_left2()}
		top: {l8_center() - 16 + arrow_offset2(3)}
		width: {if card.level_8 != "" then arrow_width2() else 0}
		height:	{arrow_height2(3)}
		render style: image
		image: {if loy_leveler2() then loyalty_image_name(card.level_8) else if box_leveler2() then card_ptbox() else arrow_background()}
		visible: {not back_class()}
	bookmark:
		left: 15
		top: 60
		width: 27
		height: 372
		render style: image
		image: {bookmark_background()}
		z index: 5
		visible: {is_saga()}
	bookmark 2:
		left: 392
		top: 60
		width: 27
		height: 372
		render style: image
		image: {bookmark_background()}
		z index: 5
		visible: {back_saga()}
	class paper:
		left: 186
		top: 58
		width: 160
		height: 380
		render style: image
		image: paper.png
		z index: 4
		visible: {is_class()}
	class paper 2:
		left: 563
		top: 58
		width: 160
		height: 380
		render style: image
		image: paper.png
		z index: 4
		visible: {back_class()}
	stripe:
		left: 15
		top: 60
		width: 27
		height: 372
		render style: image
		image: bookmarks/stripe.png
		z index: 5
		visible: {length(write_wubrg(card.card_color))==2 and is_saga()}
	stripe 2:
		left: 392
		top: 60
		width: 27
		height: 372
		render style: image
		image: bookmarks/stripe.png
		z index: 5
		visible: {length(write_wubrg(card.card_color_2))==2 and back_saga()}
	alias bar:
		left: 34
		top: {if is_normal() then 55 else 49}
		width: 307
		height: 24
		z index: 2
		render style: image
		image: {if front_clear() then "alias/" + (if mainframe_walker() then "walker" else "normal") + "/xalias.png" else alias_bar()}
		visible: {is_skinned() and not use_evobar()}
	alias bar 2:
		left: 411
		top: {if back_normal() then 55 else 49}
		width: 307
		height: 24
		z index: 2
		render style: image
		image: {if back_clear() then "alias/" + (if mainframe_walkerb() then "walker" else "normal") + "/xalias.png" else alias_bar2()}
		visible: {is_skinned() and not use_evobar()}
	vorthos box:
		right: { if mainframe_walker() then 275 else if is_leveler() and not lone_pt() then 350 else if card.pt != "" then 275 else 350 }
		top: {if mainframe_walker() then 488 else if card.pt == "" and shown_cr() then 500 else 488}
		left: 210
		height: {if use_vorthos() then 10 else 0}
		z index: 3
		alignment: middle right
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	vorthos box 2:
		right: { if mainframe_walkerb() then 652 else if back_leveler() and not lone_pt() then 727 else if card.pt_2 != "" then 652 else 727 }
		top: {if mainframe_walkerb() then 488 else if card.pt_2 == "" and shown_cr() then 500 else 488}
		left: 587
		height: {if use_vorthos() then 10 else 0}
		z index: 3
		alignment: middle right
		font:
			name: Relay-Medium
			size: 7
			color: white
			weight: bold
	pride pin:
		left: {if mainframe_walker() then 19 else if is_legend() then 18 else 24}
		top: {if mainframe_walker() then 51 else 58}
		width: {if not is_pinned() then 0 else if mainframe_walker() then 337 else if is_legend() then 338 else 325}
		height: {if not is_pinned() then 0 else if has_four_abilities() then 205 else if mainframe_walker() then 240 else 234}
		z index: 7
		render style: image
		popup style: in place
		mask: {"/magic-pride.mse-include/masks/" + if has_four_abilities() then "4planeswalker.png" else if mainframe_walker() then "planeswalker.png" else if is_legend() then "m15 legend.png" else "m15.png"}
		image: {pin_image()}
	pride pin 2:
		left: {377+if mainframe_walkerb() then 19 else if back_legend() then 18 else 24}
		top: {if mainframe_walkerb() then 51 else 58}
		width: {if not is_pinned() then 0 else if mainframe_walkerb() then 337 else if back_legend() then 338 else 325}
		height: {if not is_pinned() then 0 else if back_four_abilities() then 205 else if mainframe_walkerb() then 240 else 234}
		z index: 7
		render style: image
		popup style: in place
		mask: {"/magic-pride.mse-include/masks/" + if back_four_abilities() then "4planeswalker.png" else if mainframe_walkerb() then "planeswalker.png" else if back_legend() then "m15 legend.png" else "m15.png"}
		image: {pin_image()}
	list icon:
		left: 0
		top: 487
		width: 29
		height: 36
		render style: image
		choice images:
			the list: /magic-mainframe-extras.mse-include/mfsfiles/list.png
		z index: 4
