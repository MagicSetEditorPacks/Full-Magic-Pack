mse version:		2.0.0
game:				magic
short name:			Unfinity
full name:			Showcase
icon:				card-sample.png
position hint:		095

version: 2021-06-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-default-image.mse-include
	version: 2007-09-23
depends on:
	package: magic-watermarks.mse-include
	version: 2007-09-23
depends on:
	package: magic-identity-new.mse-include
	version: 2012-01-22
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mainframe-extras.mse-include
	version: 2007-09-23

card width: 375
card height: 523
card dpi: 150


### blanks by CluelessWanderer and GenevensiS
### code by GenevensiS


############################################################## Extra scripts
init script:
	
	template_prefix	:= [card: "card/", pt: "pt/", crown: "crown/", stamp: "stamp/", identity: "/magic-identity-new.mse-include/"]
	template_suffix	:= [card: "card.png", pt: "pt.png", crown: "crown.png", stamp: "stamp.png", identity: "identity.png"]
	template		:= { template_prefix[type] + input + template_suffix[type] }
	land_template	:= { template_prefix[type] + (if input == "a" then "c" else input) + template_suffix[type] }
	# Use land templates for previews because they show more contrast
	hybrid_previews := "land,hybrid"
	
	card_background		:= { color_background(type: "card",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_crown			:= { color_background(type: "crown",	base_hybrid: card_hybrid)		}@(offset:0 )
	card_ptbox			:= { color_background(type: "pt",		base_hybrid: card_hybrid)		}@(offset:0 )
	card_stamp			:= { color_background(input: card.card_color, type: "stamp",	base_hybrid: card_hybrid)		}@(offset:0 )
	
	mana_t := {
		if      styling.tap_symbol == "old"        then "old"
		else if styling.tap_symbol == "diagonal T" then "older"
		else                                            "new"
	}
	guild_mana := { styling.use_guild_mana_symbols }
	ancestral_mana := { styling.ancestral_mana_symbols }
	
	is_promo := { styling.promo }
	
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and contains(card.super_type, match:"Legendary")) }
	
	is_stamped := { card.card_stamp != "none" and (styling.holofoil_stamps == "yes" or (styling.holofoil_stamps == "if rare or mythic" and is_rare())) }
	
	has_identity := { styling.color_indicator_dot }
	
	shrink_name :=	{ if styling.shrink_name_text == "-"		then 0 else if styling.shrink_name_text != ""		then clamp(to_number(styling.shrink_name_text), minimum: -40, maximum: 13) else 0 }
	shrink_type :=	{ if styling.shrink_typeline_text == "-"	then 0 else if styling.shrink_typeline_text != ""	then clamp(to_number(styling.shrink_typeline_text), minimum: -40, maximum: 11) else 0 }
	
	chop_top := { split := split_comma(styling.chop_rule_textbox); if length(split) > 0 and split.0 != "" then max(min(split.0,1500),-1500) else 0 }
	chop_bot := { split := split_comma(styling.chop_rule_textbox); if length(split) > 1 and split.1 != "" then max(min(split.1,1500),-1500) else 0 }
	
	use_main_rarity := { contains(set.mainframe_rarity_name, match: ".png")}
	alt_rarity := { styling.alt_rarity_color != "" }
	alt_rarity_color :=
	{
		string := "83,67,53:177,150,131:0,0,0:0,0,0:0.07:"
		if match(styling.alt_rarity_color, match:":$") then string := styling.alt_rarity_color
		colons := length(filter_text(string, match:":"))
		output := split_text(string, match:",|:")
		splits := split_text(string, match:":")
		if colons == 4
			then output := split_text(string+"0.07:", match:",|:")
		if colons == 3
			then output := split_text(string+splits[2]+"0.07:", match:",|:")
		else if colons == 2
			then output := split_text(string+"0,0,0:0,0,0:0.07:", match:",|:")
		else if colons == 1
			then output := split_text(string+splits[0]+":0,0,0:0,0,0:0.07:", match:",|:")
		output
	}
	alt_symbol :=
	{
		colors := alt_rarity_color()
		symbol_variation(
			symbol:			set.symbol,
			border_radius:	colors.12,
			fill_type:		"linear gradient",
			fill_color_1:	rgb(colors.0, colors.1, colors.2),
			fill_color_2:	rgb(colors.3, colors.4, colors.5),
			border_color_1:	rgb(colors.6, colors.7, colors.8),
			border_color_2:	rgb(colors.9, colors.10, colors.11),
			center_x:		0.5,
			center_y:		0.5,
			end_x:			1,
			end_y:			1
		)
	}
	
	rarity_right	:= { split := split_comma(styling.rarity_coordinates); if length(split) > 0 and split.0 != "" then max(min(split.0,1000),0) else 344 }
	rarity_top		:= { split := split_comma(styling.rarity_coordinates); if length(split) > 1 and split.1 != "" then max(min(split.1,1500),0) else 296 }
	rarity_size		:= { split := split_comma(styling.rarity_coordinates); if length(split) > 2 and split.2 != "" then max(min(split.2,1500),0) else 26 }
	rarity_left		:= { rarity_right() - rarity_size() }
	
	popout_left		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.0 != "" then max(min(split.0,1500),-500) else 0 }
	popout_top		:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.1 != "" then max(min(split.1,2000),-500) else 0 }
	popout_width	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.2 != "" then max(min(split.2,1500),0) else 0 }
	popout_height	:= { split := split_comma(styling.popout_image_coordinates); if length(split) > 3 and split.3 != "" then max(min(split.3,2000),0) else 0 }
	
	split_comma := split_text@(match: " *, *")
	
	un_png := replace@(match:".png", replace: "")


############################################################## Set info fields
set info style:
	symbol:
		variation:
			name: invertedcommon
			border radius: 0.10
			fill type: solid
			fill color:   rgb(255,255,255)
			border color: rgb(0,0,0)


############################################################## Extra style options
styling field:
	type:			text
	name:			popout image coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch image to whole card
	description:	Make the image span the whole card instead of just the visible part. Used to help make popout effects.
	initial:		no
styling field:
	type:			text
	name:			shrink name text
	description:	Shrinks name X pixels
styling field:
	type:			text
	name:			shrink typeline text
	description:	Shrinks type X pixels
styling field:
	type:			text
	name:			rule text font cap
	description:	Caps the font size of the rules text and the flavor text. Default is 13.5.
styling field:
	type:			text
	name:			chop rule textbox
	description:	Formatted as "X,Y". Shrinks textbox X pixels from the top and Y from bottom.
styling field:
	type:			choice
	name:			center text
	description:	When to center text (short text only means only on one-line cards with no flavor text).
	choice:			always
	choice:			short text only
	choice:			never
	initial:		never
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legendary crown.
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			holofoil stamps
	description:	Use the security holofoil stamps.
	choice:			yes
	choice:			if rare or mythic
	choice:			no
	initial:		if rare or mythic
styling field:
	type:			boolean
	name:			color indicator dot
	description:	Use the color indicator dot for cards without casting cost.
	initial:		no
styling field:
	type:			boolean
	name:			inverted common symbol
	description:	Invert the colors of the common rarity symbol, like in Coldsnap.
	initial:		no
styling field:
	type:			text
	name:			alt rarity color
	description:	Use a custom color for the rarity symbol. Formatted as "R1,G1,B1:R2,G2,B2:R3,G3,B3:R4,G4,B4:br:". 1 and 2 are fill colors, 3 and 4 border colors, br is the border radius. Must end with :
styling field:
	type:			text
	name:			rarity coordinates
	description:	The coordinates for the set symbol, formatted as "right,top,size". Default is 344,296,26.
styling field:
	type:			boolean
	name:			ancestral mana symbols
	description:	Enables ancestral's modified generic mana.
	initial:		no
styling field:
	type:			boolean
	name:			use guild mana symbols
	description:	Use the Ravnica guild symbols instead of the official half/half circles for hybrid mana.
	initial:		no
styling field:
	type:			choice
	name:			tap symbol
	description:	Use older versions of the tap and untap symbols.
	initial:		modern
	choice:			modern
	choice:			old
	choice:			diagonal T
styling field:
	type:			package choice
	name:			casting cost mana symbols
	description:	Symbols used in the casting cost.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			package choice
	name:			text box mana symbols
	description:	Symbols used in the rule text and flavor text.
	match:			magic-mana-*.mse-symbol-font
	initial:		magic-mana-small.mse-symbol-font
styling field:
	type:			boolean
	name:			remove from autocount
	description:	Removes the automatic card number for specific cards, to allow for overcounted cards like in Planeswalker Decks.
	initial:		no
styling field:
	type:			boolean
	name:			promo
	description:	Is this card a promo card, with the "P" rarity?
	initial:		no
styling field:
	type:			color
	name:			copyright text color
	description:	Color of the copyright, illustrator, and set code text.
	choice:			white
	choice:			black
	initial:		white
	allow custom:	true
styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false
styling style:
	use guild mana symbols:
		choice images:
			yes: /magic-mana-small.mse-symbol-font/mana_guild_rg.png
			no:  /magic-mana-small.mse-symbol-font/mana_rg.png
	tap symbol:
		render style: both
		choice images:
			modern:     /magic-mana-large.mse-symbol-font/mana_t.png
			old:        /magic-mana-large.mse-symbol-font/mana_t_old.png
			diagonal T: /magic-mana-large.mse-symbol-font/mana_t_older.png
	center text:
		render style: both
		choice images:
			always:          /magic.mse-game/icons/center-all-text.png
			short text only: /magic.mse-game/icons/center-short-text.png
			never:           /magic.mse-game/icons/center-no-text.png
	inverted common symbol:
		choice images:
			no:  { symbol_variation(symbol: set.symbol, variation: "common") }
			yes: { symbol_variation(symbol: set.symbol, variation: "invertedcommon") }


############################################################## Card fields
card style:
	############################# Background stuff
	border color:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			-1
		radius:				18
		left width:			23
		right width:		23
		top width:			26
		bottom width:		42
	card color:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			0
		popup style:		in place
		render style:		image
		image:				{ card_background() }
		mask:				foil_mask.png
	############################# Name line
	name:
		left:				32
		top:				28
		right:				{ 339 - card_style.casting_cost.content_width }
		height:				{ 25 - (0.5 * shrink_name()) }
		z index:			100
		alignment:			top shrink-overflow
		font:
			name:				Beleren Bold
			size:				{15 - shrink_name()}
			color:				white
		line height hard:	{if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
	casting cost:
		right:				348
		top:				27
		width:				{ max(30, card_style.casting_cost.content_width) + 5 }
		height:				24
		z index:			100
		alignment:			middle right
		always symbol:		true
		font:
			name:				MPlantin
			size:				15
		symbol font:
			name:				{ styling.casting_cost_mana_symbols }
			size:				15
	############################# Image
	image:
		left:				{ if styling.stretch_image_to_whole_card then 0 else 29 }
		top:				{ if styling.stretch_image_to_whole_card then 0 else 58 }
		width:				{ if styling.stretch_image_to_whole_card then 375 else 319 }
		height:				{ if styling.stretch_image_to_whole_card then 523 else 232 }
		z index:			1
		mask:				{ if styling.stretch_image_to_whole_card then "image_mask.png" else "" }
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			400
	############################# Card type
	indicator:
		left:				28
		top:				300
		width:				17
		height:				17
		z index:			100
		render style:		image
		visible:			{ has_identity() }
		image:				{ card_identity() }
	type:
		left:				{ if styling.color_indicator_dot then 51 else 31 }
		top:				296
		right:				{ if set.shorten_types_for_rarity then max(188,min(rarity_left()-4,344)) else 344 }
		height:				26
		z index:			110
		alignment:			middle left shrink-overflow
		font:
			name:				Beleren Bold
			size:				{13 - shrink_type()}
			color:				white
			separator color:	red
	rarity:
		right:				{ rarity_right() }
		top:				{ rarity_top() }
		width:				{ rarity_size() }
		height:				{ rarity_size() }
		z index:			111
		alignment:			middle right
		render style:		image
		choice images:
			# Images based on the set symbol
			basic land:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			common:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "c.png"
					else if alt_rarity() then alt_symbol()
					else if styling.inverted_common_symbol then symbol_variation(symbol: set.symbol, variation: "invertedcommon")
					else symbol_variation(symbol: set.symbol, variation: "common")
			uncommon:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "u.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "uncommon")
			rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "r.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "rare")
			mythic rare:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "m.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "mythic rare")
			special:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "s.png"
					else if alt_rarity() then alt_symbol()
					else symbol_variation(symbol: set.symbol, variation: "special")
			masterpiece:
				script:
					if use_main_rarity() then "/magic-mainframe-extras.mse-include/" + un_png(set.mainframe_rarity_name) + "mp.png"
					else symbol_variation(symbol: set.masterpiece_symbol, variation: "mythic rare")
	############################# Text box
	text:
		left:				31
		top:				{ 328 - (-chop_top()) }
		width:				314
		bottom:				{ 478 - chop_bot() }
		z index: 100
		font:
			name:				MPlantin
			italic name:		MPlantin-Italic
			size:				{ if styling.rule_text_font_cap != "" then to_number(styling.rule_text_font_cap) else 13.5 }
			scale down to:		6
			color:				black
		symbol font:
			name:				{ styling.text_box_mana_symbols }
			size:				{ if styling.rule_text_font_cap != "" then to_number(styling.rule_text_font_cap) else 13.5 }
			scale down to:		6
		alignment:
			script:
				if (styling.center_text == "short text only" and
				   not contains(match:"\n", card.rule_text) and
				   card.flavor_text == "<i-flavor></i-flavor>" and
				   card_style.text.content_lines <= 2) or
				   styling.center_text == "always"
				then "middle center"
				else "middle left"
		padding left:		2
		padding right:		2
		line height hard:	{if is_modal(card.rule_text) then 0.9 else 1.2 }
		line height line:	1.5
		line height soft:	0.9
		line height hard max:	{if is_modal(card.rule_text) then 1.0 else 1.3 }
		line height line max:	1.6
	watermark:
		left:				20
		top:				328
		width:				335
		height:				153
		z index:			1
		alignment:			middle center
		popup style:		in place
		render style:		image
		include file:		/magic-watermarks.mse-include/watermarks
	############################# PT
	pt:
		z index:			2
		left:				294
		top:				467
		width:				60
		height:				28
		alignment:			center middle shrink-overflow
		font:
			name:				Beleren Bold
			size:				15
			color:				white
			separator color:	red
	############################# Copyright stuff
	card stamp:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			3
		popup style:		in place
		render style:		image
		image:				{ if is_stamped() then card_stamp() else "" }
		mask:				stamp_mask.png
	set code:
		left:				24
		top:				499
		width:				40
		height:				10
		z index:			100
		alignment:			middle left
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	illustrator:
		left:				{ if card.set_code == "" then 38 else 42 + card_style.set_code.content_width }
		top:				498.5
		width:				200
		height:				10
		z index:			100
		alignment:			middle left
		font:
			name:				Beleren Small Caps Bold
			size:				7.25
			color:				{ styling.copyright_text_color }
	copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 0 else 140 }
		height:				10
		z index:			100
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold


############################################################## Extra card fields
extra card field:
	type:				text
	name:				card code
	save value:			false
	show statistics:	false
	script:
		if set.automatic_card_numbers and not styling.remove_from_autocount
		then forward_editor(prefix: card_number_m15() + "/" + card_count_m15() + " " + rarity_code() + " ", field: card.card_code_text)
		else combined_editor(field1: card.custom_card_number, separator: (if card.custom_card_number != "" then " " else "") + rarity_code() + " ", field2: card.card_code_text)
extra card field:
	type:				choice
	name:				artist arrow
	editable:			false
	save value:			false
	show statistics:	false
	choice:				artist arrow
extra card field:
	type:				choice
	name:				pt box
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				crown
	script:				card.card_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				foil layer
	editable:			false
	save value:			false
	show statistics:	false
	choice:				foil layer
extra card field:
	type:				text
	name:				auto copyright
	script:				set.copyright
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				flavor bar
	editable:			false
	save value:			false
	show statistics:	false
	choice:				flavor bar
extra card field:
	type:				color
	name:				stamp border
	script:				card.border_color
	editable:			false
	save value:			false
	show statistics:	false
extra card field:
	type:				choice
	name:				stamp foil
	editable:			false
	save value:			false
	show statistics:	false
	choice:				stamp foil
extra card style:
	card code:
		left:				24
		top:				489
		width:				120
		height:				10
		z index:			100
		font:
			name:				Relay-Medium
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	auto copyright:
		right:				351
		top:				{ if card.pt != "" then 499 else 494 }
		width:				{ if set.automatic_copyright then 140 else 0 }
		height:				10
		z index:			100
		alignment:			middle right shrink-overflow
		font:
			name:				Matrix
			size:				7
			color:				{ styling.copyright_text_color }
			weight:				bold
	artist arrow:
		left:				{ if card.set_code == "" then 25 else 29 + card_style.set_code.content_width }
		top:				501
		width:				12
		height:				7
		z index:			100
		render style:		image
		image:				{ recolor_image("artist_arrow.png", color: styling.copyright_text_color) }
	flavor bar:
		left:				0
		top:				{ bar_equation() }
		width:				375
		height:				1
		z index:			100
		render style:		image
		image:				bar.png
		visible:			{ card.rule_text != "" and remove_tags(card.flavor_text) != "" and set.use_flavor_bar }
	pt box:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			1
		visible:			{ card.pt != "" }
		render style:		image
		image:				{ card_ptbox() }
	crown:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			1
		visible:			{ is_crowned() }
		render style:		image
		image:				{ card_crown() }
	foil layer:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			200
		render style:		image
		image:				{if styling.overlay == "" then nil else styling.overlay + "/overlay.png"}
		mask:				{ "foil_mask" + (if card.pt != "" then "_pt" else "") + (if is_stamped() then "_rare" else "") + (if is_crowned() then "_crown" else "") + ".png" }
	stamp border:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			2
		visible:			{ is_stamped() }
		mask:				stamp_border_mask.png
	stamp foil:
		left:				0
		top:				0
		width:				375
		height:				523
		z index:			3
		visible:			{ is_stamped() }
		render style:		image
		image:				{ if card.card_stamp == "acorn" then "stamp_acorn_foil.png" else "stamp_normal_foil.png" }
