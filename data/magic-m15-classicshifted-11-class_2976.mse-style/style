mse version: 2.1.2
game: magic
short name: M15 CS Class
full name: Classicshifted Class
icon: card-sample.png
position hint: 000

version: 2024-08-01
depends on:
	package: magic.mse-game
	version: 2014-06-25
depends on:
	package: magic-modules.mse-include
	version: 2024-05-20
depends on:
	package: magic-m15-classicshifted-99-shared_2976.mse-include
	version: 2024-08-01
depends on:
	package: magic-mana-large.mse-symbol-font
	version: 2007-09-23
depends on:
	package: magic-mana-small.mse-symbol-font
	version: 2007-09-23

card width: 2976
card height: 4152
card dpi: 1190

### blanks by iDerp, tweaks by GenevensiS
### code by GenevensiS

############################################################## Extra scripts
init script:
	card_shape := { "class" }
	
	separator_enable_level := { true }
	separator_default := { if margin_code == "sep1" then "flavor bar" else if lang_setting("is_case")(card.sub_type) then "flavor bar" else if styling.remove_level_costs then "level notchless" else "level" }
	level_filter_default := { replace(margin_code, match: "lv", replace: "Level ") }
	
	class_reminder_text_offset_left_1 :=		{ 0 }
	class_reminder_text_offset_top_1 :=			{ if is_crowned() then -42 else -72 }
	class_reminder_text_offset_width_1 :=		{ 0 }
	class_reminder_text_offset_height_1 :=		{ 0 }
	
	class_text_offset_left_1 :=					{ 8 }
	class_text_offset_top_1 :=					{ if is_crowned() then -42 else -72 }
	class_text_offset_width_1 :=				{ -24 }
	class_text_offset_height_1 :=				{ if styling.transformation_reminder or card.pt != "" then 0 else 72 }
	
	class_text_offset_padding_1 :=				{ 0 }
	
	class_first_separator_offset_left_1 :=		{ 0 }
	class_first_separator_offset_top_1 :=		{ 0 }
	class_first_separator_offset_width_1 :=		{ 0 }
	class_first_separator_offset_height_1 :=	{ 0 }
	
	class_separator_offset_left_1 :=			{ 12 }
	class_separator_offset_top_1 :=				{ 0 }
	class_separator_offset_width_1 :=			{ -16 }
	class_separator_offset_height_1 :=			{ 0 }
	
	class_level_cost_offset_left_1 :=			{ 0 }
	class_level_cost_offset_top_1 :=			{ 0 }
	class_level_cost_offset_width_1 :=			{ 0 }
	class_level_cost_offset_height_1 :=			{ 0 }
	
	class_level_offset_left_1 :=				{ 0 }
	class_level_offset_top_1 :=					{ 0 }
	class_level_offset_width_1 :=				{ 0 }
	class_level_offset_height_1 :=				{ 0 }
	
	watermark_offset_left_1 :=					{ 0 }
	watermark_offset_top_1 :=					{ 0 }
	watermark_offset_width_1 :=					{ -40 }
	watermark_offset_height_1 :=				{ 0 }
	
	information_secondary_shift_with_pt_1 := { false }
	
	nameline_offset_top_1 := { if is_crowned() then -28 else -64 }
	casting_cost_offset_top_1 := { 4 }
	transform_symbol_offset_left_1 := { 72 }
	transform_symbol_offset_top_1 := { 56 }
	transform_symbol_offset_width_1 := { -111 }
	transform_symbol_offset_height_1 := { -111 }
	name_transform_symbol_offset_left_1 := { -72 }
	card_symbol_offset_left_1 := { -48 }
	card_symbol_offset_top_1 := { 20 }
	card_symbol_offset_width_1 := { -24 }
	card_symbol_offset_height_1 := { -24 }
	name_card_symbol_offset_left_1 := { 48 }
	
	typeline_offset_top_1 := { 1186 }
	typeline_offset_left_1 := { -8 }
	rarity_offset_left_1 := { 16 }
	rarity_offset_top_1 := { 8 }
	
	card_stamp_offset_top_1 := { -8 }
	card_stamp_offset_height_1 := { 48 }
	card_stamp_offset_left_1 := { -24 }
	card_stamp_offset_width_1 := { 48 }
	
	swap_fonts_pt_default :=
	[
		name: {"Beleren Bold"},
		size: {119.0},
		color: {"white"},
		vertical: {0},
		italic: {"Beleren Bold"}
	]
	swap_fonts_body_default :=
	[
		name: {"MPlantin"},
		size: {103.0},
		color: {"black"},
		vertical: {0},
		italic: {"MPlantin-Italic"}
	]
	swap_fonts_type_default :=
	[
		name: {"Beleren Bold"},
		size: {103.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	swap_fonts_name_default :=
	[
		name: {"Beleren Bold"},
		size: {111.0},
		color: {"white"},
		vertical: {0},
		italic: {""}
	]
	
	template_prefix :=
	[
		card:			{ "card/" }
		transform:		{ "transform/" }
		pt:				{ "/magic-m15-classicshifted-99-shared_2976.mse-include/pt/" }
		identity:		{ "/magic-modules.mse-include/indicators/" }
		crown:			{ "crown/" }
	]
	template_suffix :=
	[
		card:			"card.png"
		transform:		"card.png"
		pt:				"pt.png"
		identity:		"identity.png"
		crown:			"card.png"
	]
	template :=
	{
		if type == "pt" then crop(template_prefix[type]() + input + template_suffix[type], offset_x: 1631, offset_y: 754, width: 2976, height: 4152)
		else template_prefix[type]() + input + template_suffix[type]
	}
	land_template :=
	{
		if type == "pt" then crop(template_prefix[type]() + (if input == "a" then "c" else input) + "l" + template_suffix[type], offset_x: 1631, offset_y: 754, width: 2976, height: 4152)
		else template_prefix[type]() + (if input == "a" then "c" else input) + "l" + template_suffix[type]
	}
	
	card_transform :=	{ color_background(type:"transform",	base_hybrid:card_hybrid) }
	card_crown :=		{ color_background(type:"crown",		base_hybrid:card_hybrid) }
	card_ptbox :=		{ color_background(type:"pt",			base_hybrid:card_hybrid) }
	
	pure_colors :=
	{
		sort_text(
			order: if card_is_wedge(input) then "(wbgur)" else "(wubrg)",
			(if chosen(card.card_color, choice:"white")	then "w") +
			(if chosen(card.card_color, choice:"blue")	then "u") +
			(if chosen(card.card_color, choice:"black")	then "b") +
			(if chosen(card.card_color, choice:"red")	then "r") +
			(if chosen(card.card_color, choice:"green")	then "g")
		)
	}
	pt_colors := { if styling.PT_color_scheme == "canon" then pt_colors_canon() else styling.PT_color_scheme }
	pt_colors_canon := { if is_hybrid_cost() then "land" else "gold" }
	
	is_clear :=
	{
		styling.clear_frame == "yes" or
		(
			styling.clear_frame == "if colorless" and
			not lang_setting("is_artifact")(card.super_type) and
			not lang_setting("is_land")(card.super_type) and
			not contains(card.card_color, match: "white") and
			not contains(card.card_color, match: "blue") and
			not contains(card.card_color, match: "black") and
			not contains(card.card_color, match: "red") and
			not contains(card.card_color, match: "green") and
			not contains(card.card_color, match: "land") and
			not contains(card.card_color, match: "artifact") and
			not contains(card.card_color, match: "multicolor")
		)
	}
	is_crowned := { styling.legend_crown == "yes" or (styling.legend_crown == "if legendary" and lang_setting("is_legendary")(card.super_type)) }
	is_nyx := { styling.nyx_frame == "yes" or (styling.nyx_frame == "if enchantment" and lang_setting("is_nyx")(card.super_type)) }
	is_vehicle := { styling.vehicle_frame == "yes" or (styling.vehicle_frame == "if vehicle" and lang_setting("is_vehicle")(card.sub_type)) }
	is_miracle := { styling.miracle_frame == "yes" or (styling.miracle_frame == "if miracle" and lang_setting("is_miracle")(card.text)) }
	is_notched := { styling.transformation_reminder }
	has_identity := { styling.color_indicator_dot }
	has_identity_2 := { false }
	has_identity_3 := { false }
	
	popout_left :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.0 != "" and split.0 != "-" then clamp(split.0, maximum:3000, minimum:-500) else 0 }
	popout_top :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.1 != "" and split.1 != "-" then clamp(split.1, maximum:4200, minimum:-500) else 0 }
	popout_width :=		{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.2 != "" and split.2 != "-" then clamp(split.2, maximum:3000, minimum:0) else 0 }
	popout_height :=	{ split := split_comma(styling.popout_art_coordinates); if length(split) > 3 and split.3 != "" and split.3 != "-" then clamp(split.3, maximum:4200, minimum:0) else 0 }

############################################################## Extra style options
styling field:
	type:			text
	name:			popout art coordinates
	description:	The coordinates for the popout image field, formatted as "left,top,width,height". Used to make the illustration jump in front of the frame.
styling field:
	type:			boolean
	name:			stretch art to whole card
	description:	Make the image span the whole card instead of just the visible part. Use this to help make popout effects.
	initial:		no

include file: /magic-modules.mse-include/levels/styling_fields

styling field:
	type:			boolean
	name:			transformation reminder
	description:	Add a transformation notch and p/t
	initial:		no
styling field:
	type:			choice
	name:			PT color scheme
	description:	Use the selected color scheme for the PT box on two color cards. Canon is "land" on hybrid cards, "gold" otherwise.
	choice:			canon
	choice:			gold
	choice:			hybrid
	choice:			colored
	choice:			land
	initial:		canon
styling field:
	type:			choice
	name:			legend crown
	description:	Use the legend crown?
	choice:			yes
	choice:			if legendary
	choice:			no
	initial:		if legendary
styling field:
	type:			choice
	name:			clear frame
	description:	Use a see-through frame?
	choice:			yes
	choice:			if colorless
	choice:			no
	initial:		if colorless
styling field:
	type:			choice
	name:			vehicle frame
	description:	Use the vehicle frame overlay?
	choice:			yes
	choice:			if vehicle
	choice:			no
	initial:		if vehicle
styling field:
	type:			choice
	name:			nyx frame
	description:	Use the nyx frame overlay?
	choice:			yes
	choice:			if enchantment
	choice:			no
	initial:		if enchantment
styling field:
	type:			choice
	name:			miracle frame
	description:	Use the miracle frame overlay?
	choice:			yes
	choice:			if miracle
	choice:			no
	initial:		if miracle

include file: /magic-modules.mse-include/rarities/styling_fields

include file: /magic-modules.mse-include/indicators/styling_fields

include file: /magic-modules.mse-include/watermarks/styling_fields

styling field:
	type:			package choice
	name:			overlay
	description:	Should there be an overlay applied, such as foil?
	match:			magic-overlay-*.mse-include
	required:		false

include file: /magic-modules.mse-include/information/styling_fields

include file: /magic-modules.mse-include/symbol-fonts/styling_fields

include file: /magic-modules.mse-include/fonts/styling_fields

############################################################## Card fields

include file: /magic-modules.mse-include/information/card_fields

include file: /magic-modules.mse-include/stamps/card_fields

include file: /magic-modules.mse-include/corners/card_fields

include file: /magic-modules.mse-include/watermarks/card_fields

include file: /magic-modules.mse-include/separators/card_fields

include file: /magic-modules.mse-include/namelines/card_fields

include file: /magic-modules.mse-include/typelines/card_fields

include file: /magic-modules.mse-include/levels/card_fields

card style:
	############################# Background stuff
	card color:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		popup style:		in place
		render style:		image
		image:				{ if is_clear() then "" else if is_crowned() then card_crown() else card_background() }
		mask:				masks/card_mask.png
	
	############################# Image
	image:
		left:				{ if styling.stretch_art_to_whole_card then 0						else if is_crowned() and is_clear() then 43		else if is_clear() then 115									else 238 }
		top:				{ if styling.stretch_art_to_whole_card then 0						else if is_crowned() and is_clear() then 59		else if is_clear() then 119	else if is_crowned() then 416	else 384 }
		right:				{ if styling.stretch_art_to_whole_card then stylesheet.card_width	else if is_crowned() and is_clear() then 2933	else if is_clear() then 2861								else 1492 }
		bottom:				{ if styling.stretch_art_to_whole_card then stylesheet.card_height	else if is_crowned() and is_clear() then 3853	else if is_clear() then 3853								else 3500 }
		z index:			0
	mainframe image:
		left:				{ popout_left() }
		top:				{ popout_top() }
		width:				{ popout_width() }
		height:				{ popout_height() }
		z index:			1000
	
	############################# Text box
	rule text 3:
		left:				301
		top:				{ 3325 + body_font_vertical() }
		width:				{ if is_notched() then 400 else 0 }
		height:				119
		z index:			920
		alignment:			right middle
		font:
			name:				{ body_font() }
			italic name:		{ body_font_italic() }
			size:				93
			color:				{ body_font_color() }
	
	############################# PT
	pt:
		left:				2337
		top:				{ 3277 + pt_font_vertical() }
		width:				373
		height:				238
		z index:			910
		alignment:			center middle shrink-overflow
		font:
			name:				{ pt_font() }
			size:				{ pt_font_size() }
			color:				{ pt_font_color() }
			separator color:	red
			shadow color:			rgb(0,0,0)
			shadow displacement x:	6
			shadow displacement y:	6

############################################################## Extra card fields
extra card field:
	type:				choice
	name:				transform notch
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				pt box
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				color
	name:				stamp border
	editable:			false
	save value:			false
	script:				rgb(0,0,0)
extra card field:
	type:				choice
	name:				miracle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				nyx overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				vehicle overlay
	editable:			false
	save value:			false
	script:				card.card_color
extra card field:
	type:				choice
	name:				devoid card mask
	editable:			false
	save value:			false
	choice:				devoid card mask
extra card field:
	type:				choice
	name:				devoid frame
	editable:			false
	save value:			false
	choice:				devoid frame
extra card field:
	type:				choice
	name:				devoid frame 2
	editable:			false
	save value:			false
	choice:				devoid frame 2
extra card field:
	type:				choice
	name:				devoid textbox
	editable:			false
	save value:			false
	choice:				devoid textbox
extra card style:
	transform notch:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_notched() and not is_clear() }
		render style:		image
		image:				{ card_transform() }
	pt box:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ card.pt != "" }
		render style:		image
		image:
			script:
				pure := pure_colors()
				count := length(pure)
				color := pt_colors()
				if is_clear() then								template("c", type: "pt")
				else if color == "gold" and count > 1 then		template("m", type: "pt")
				else if color == "land" and count > 1 then		template("c", type: "pt")
				else if color == "hybrid" and count == 2 then	masked_blend(
																	mask: crop("/magic-m15-classicshifted-99-shared_2976.mse-include/pt/special_blend_pt.png", offset_x: 1631, offset_y: 754, width: 2976, height: 4152),
																	dark: template(pure.0, type: "pt"),
																	light: template(pure.1, type: "pt")
																)
				else											card_ptbox()
	stamp border:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			19
		visible:			{ is_stamped() }
		mask:				masks/stamp_border_mask.png
	nyx overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			5
		visible:			{ is_nyx() }
		render style:		image
		image:				{ image := "/magic-m15-classicshifted-99-shared_2976.mse-include/nyx/nyx" + (if is_crowned() then "_crown" else "") + "_extended.png"; set_combine(image, combine: "add") }
	vehicle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			6
		visible:			{ is_vehicle() }
		render style:		image
		image:				/magic-m15-classicshifted-99-shared_2976.mse-include/vehicle/vehicle_extended.png
	miracle overlay:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			7
		visible:			{ is_miracle() }
		render style:		image
		image:				{ image := "/magic-m15-classicshifted-99-shared_2976.mse-include/miracle/miracle" + (if is_crowned() then "_crown" else "") + "_extended.png"; set_alpha(set_combine(image, combine: "add"), alpha:0.6) }
	devoid card mask:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			1
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_image_mask_crown.png" else "/devoid_image_mask.png"); set_combine(image, combine: "multiply") }
	devoid frame:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			2
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_crown" else "/devoid") + (if is_notched() then "_transform.png" else ".png"); set_combine(image, combine: "multiply") }
		mask:				{ "clear_masks" + (if is_crowned() then "/devoid_mask_crown.png" else "/devoid_mask.png") }
	devoid frame 2:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			3
		visible:			{ is_clear() }
		render style:		image
		image:				{ image := "clear_masks" + (if is_crowned() then "/devoid_screen_crown" else "/devoid_screen") + (if is_notched() then "_transform.png" else ".png"); set_alpha(set_combine(image, combine: "screen"), alpha:0.2) }
		mask:				{ "clear_masks" + (if is_crowned() then "/devoid_mask_crown.png" else "/devoid_mask.png") }
	devoid textbox:
		left:				0
		top:				0
		width:				{ stylesheet.card_width }
		height:				{ stylesheet.card_height }
		z index:			4
		visible:			{ is_clear() }
		render style:		image
		image:				{ set_alpha(set_combine("clear_masks" + "/devoid_screen" + (if is_notched() then "_transform.png" else ".png"), combine: "screen"), alpha:0.75) }
		mask:				{ "clear_masks" + "/devoid_textbox_mask" + (if is_crowned() then "_crown" else "") + (if is_notched() then "_transform.png" else ".png") }
